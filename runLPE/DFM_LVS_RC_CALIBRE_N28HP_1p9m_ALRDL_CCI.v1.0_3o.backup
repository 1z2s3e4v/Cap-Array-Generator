#!tvf

tvf::VERBATIM {


// xCalibre/calibre  RC/LVS command file based on the follow calibre command file//
/////////////////////////////////////////////////////////////////////////////////
// 
// 
// 
// 
//   @(#) TSMC 28nm CALIBRE LVS/CCI COMMAND FILE  
//   @(#) COMMAND FILE DOCUMENT: T-N28-CL-LS-002-C1 
//   @(#) COMMAND FILE VERSION: v1.0_3o  
//   @(#) COMMAND FILE METAL SCHEME: 1P9M  
//   @(#) COMMAND FILE DATE: 03/10/2017  
//   @(#) EDA TOOL VERSION: Calibre 2015.4_34.25  
// 
//   @(#) TSMC has developed this deck using Mentor Graphics proprietary SVRF and TVF formats. 
//   @(#) The deck is to be used only in Calibre tools.    
// 
// 
//   @(#) ****************** MODEL CARD SUPPORT ************************ 
//   @(#) PROCESS :  0.028um LOGIC HIGH PERFORMANCE (0.85V/1.8V) (CLN28HP) 
//   @(#) DOC. NO.:  T-N28-CL-SP-002 
//   @(#) SPICE MODEL VERSION: v1d0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 02:00PM, Jun. 28, 2011 
//   @(#) PROCESS :  0.028um LOGIC HIGH PERFORMANCE (0.85V/2.5V) (CLN28HP) 
//   @(#) DOC. NO.:  T-N28-CL-SP-003 
//   @(#) SPICE MODEL VERSION: v1d0_2 
//   @(#) SPICE MODEL RELEASE DATE: 01:00PM, Jul. 15, 2013 
//   @(#) PROCESS :  0.028um LOGIC HIGH PERFORMANCE (0.85V/1.8V) (CLN28HP) 
//   @(#) DOC. NO.:  T-N28-CL-SP-004 
//   @(#) SPICE MODEL VERSION: v1d0_2 
//   @(#) SPICE MODEL RELEASE DATE: 01:00PM, Jul. 15, 2013 
//   @(#) PROCESS :  0.028um LOGIC SALICIDE ELK-IMD (0.85V/2.5V) (CLN28HPA) 
//   @(#) DOC. NO.:  T-N28-CL-SP-007 
//   @(#) SPICE MODEL VERSION: v1d0_2 
//   @(#) SPICE MODEL RELEASE DATE: 03:00PM, Jul 23, 2013 
//   @(#) PROCESS :  0.028um LOGIC SALICIDE ELK-IMD (0.85V/1.5V) (CLN28HP) 
//   @(#) DOC. NO.:  T-N28-CL-SP-009 
//   @(#) SPICE MODEL VERSION : v1d0_2 
//   @(#) SPICE MODEL RELEASE DATE: 05:00PM, Jul 23, 2013 
//   @(#) PROCESS :  0.028um LOGIC SALICIDE ELK-IMD (1.0V/1.8V) (CLN28HPL) 
//   @(#) DOC. NO.:  T-N28-CL-SP-010 
//   @(#) SPICE MODEL VERSION : v1.0_2p6 
//   @(#) SPICE MODEL RELEASE DATE: 05:00PM, Jan. 15, 2015 
//   @(#) PROCESS :  0.028um LOGIC HIGH PERFORMANCE (0.85V/1.8V) (CLN28HP) 
//   @(#) DOC. NO.:  T-N28-CL-SP-013 
//   @(#) SPICE MODEL VERSION: v1d0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 01:00PM, June 28, 2011 
//   @(#) PROCESS :  0.028um LOGIC HIGH PERFORMANCE (0.9V/1.8V)(CLN28HPM) 
//   @(#) DOC. NO.:  T-N28-CL-SP-017 
//   @(#) SPICE MODEL VERSION: v1.1_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 06:00PM, Jul. 30, 2013 
//   @(#) PROCESS : 0.028um LOGIC SALICIDE ELK-IMD (1.0V/2.5V) (CLN28HPL)  
//   @(#) DOC. NO.:  T-N28-CL-SP-019  
//   @(#) SPICE MODEL VERSION: v1.0_2p6 
//   @(#) SPICE MODEL RELEASE DATE: 09:03AM, Aug. 20, 2014 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE (0.9V/1.8V)(CLN28HPM) 
//   @(#) DOC. NO.:  T-N28-CL-SP-021 
//   @(#) SPICE MODEL VERSION: v1.1_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 06:30PM, Oct. 18, 2013 
//   @(#) PROCESS : 0.028um LOGIC HIGH SPEED (0.85V/1.8V) (CLN28HP+) 
//   @(#) DOC. NO.:  T-N28-CL-SP-022 
//   @(#) SPICE MODEL VERSION: V1d0_2 
//   @(#) SPICE MODEL RELEASE DATE: 02:00PM, Jul 24, 2013 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE (0.9V/1.8V)(CLN28HPM)  
//   @(#) DOC. NO.:  T-N28-CL-SP-024   
//   @(#) SPICE MODEL VERSION: v0.5_1p1 
//   @(#) SPICE MODEL RELEASE DATE: 07:09PM, Oct. 29, 2010 
//   @(#) PROCESS : 0.028um LOGIC SALICIDE ELK-IMD (1.0V/1.8V) (CLN28HPL) 
//   @(#) DOC. NO.:  T-N28-CL-SP-026 
//   @(#) SPICE MODEL VERSION: v1.0_2p3 
//   @(#) SPICE MODEL RELEASE DATE: 01:45PM, Jun. 29, 2011 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE (0.85V/2.5V) (CLN28HPL)  
//   @(#) DOC. NO.:  T-N28-CL-SP-027   
//   @(#) SPICE MODEL VERSION: v1.0_2p6 
//   @(#) SPICE MODEL RELEASE DATE: 10:25AM, Aug. 27, 2014 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE (0.85V/2.5V) (CLN28HP)  
//   @(#) DOC. NO.:  T-N28-CL-SP-029   
//   @(#) SPICE MODEL VERSION: v1d0_2 
//   @(#) SPICE MODEL RELEASE DATE: 03:00PM, Jul. 18, 2013 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE (0.9V/2.5V)(CLN28HPM) 
//   @(#) DOC. NO.:  T-N28-CL-SP-031   
//   @(#) SPICE MODEL VERSION: v1.1_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 11:30AM, Nov. 11, 2013 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE (0.9V/1.8V)(CLN28HPM) 
//   @(#) DOC. NO.:  T-N28-CL-SP-033   
//   @(#) SPICE MODEL VERSION: v1.1_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 11:00AM, Jul. 30, 2013 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE (0.9V/2.5V)(CLN28HPM) 
//   @(#) DOC. NO.:  T-N28-CL-SP-041 
//   @(#) SPICE MODEL VERSION: v1.1_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 11:00AM, Jul. 30, 2013 
//   @(#) PROCESS : 0.028um LOGIC SALICIDE ELK-IMD (Vg=1.8V/Vd=5V)(CLN28HPL HVMOS) 
//   @(#) DOC. NO.:  T-N28-CL-SP-042  
//   @(#) SPICE MODEL VERSION: v1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 01:43PM, Dec. 28, 2012 
//   @(#) PROCESS : 0.028um LOGIC SALICIDE ELK-IMD (Vg=1.8V/Vd=5V)(CLN28HPM HVMOS) 
//   @(#) DOC. NO.:  T-N28-CL-SP-043  
//   @(#) SPICE MODEL VERSION: v1.0_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 06:15PM, Aug. 22, 2013 
//   @(#) PROCESS : TSMC 28 NM CMOS LOGIC HIGH PERFORMANCE MOBILE COMPUTING HD MIM SPICE MODEL 28HPM 
//   @(#) DOC. NO.:  T-N28-CL-SP-045  
//   @(#) SPICE MODEL VERSION: v0.5_1p1 
//   @(#) SPICE MODEL RELEASE DATE: 06:00PM, Feb. 05, 2013 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/1.8V)(CLN28HPC) 
//   @(#) DOC. NO.:  T-N28-CL-SP-052  
//   @(#) SPICE MODEL VERSION: v1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 05:58PM, Sep. 02, 2016 
//   @(#) PROCESS :  0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/2.5V)(CLN28HPC) 
//   @(#) DOC. NO.:  T-N28-CL-SP-053  
//   @(#) SPICE MODEL VERSION: v1.0_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 08:58AM, Feb. 14, 2014 
//   @(#) PROCESS :  0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/1.8V)(CLN28HPC) 
//   @(#) DOC. NO.:  T-N28-CL-SP-054  
//   @(#) SPICE MODEL VERSION: v1.0_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 05:58PM, Feb. 24, 2014 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/1.8V)(CLN28HPC) 
//   @(#) DOC. NO.:  T-N28-CL-SP-055 
//   @(#) SPICE MODEL VERSION: v1.0_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 03:26PM, Feb. 10, 2015 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/1.8V)(CLN28HPC) 
//   @(#) DOC. NO.:  T-N28-CL-SP-056 
//   @(#) SPICE MODEL VERSION: v1.0_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 03:08PM, Mar. 25, 2015 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/1.8V)(CLN28HPM) 
//   @(#) DOC. NO.:  T-N28-CL-SP-065 
//   @(#) SPICE MODEL VERSION: v1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 10:58AM, Nov. 07, 2014 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/1.8V)(CLN28HPC) 
//   @(#) DOC. NO.:  T-N28-CL-SP-066 
//   @(#) SPICE MODEL VERSION: v1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 10:58AM, Nov. 07, 2014 
//   @(#) PROCESS : 0.028um LOGIC ULTRA LOW POWER SALICIDE ELK-IMD(0.7V/1.8V)(CLN28ULP) 
//   @(#) DOC. NO.:  T-N28-CL-SP-068 
//   @(#) SPICE MODEL VERSION: V1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 08:58AM, May. 20, 2015 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/2.5V)(CLN28HPC) 
//   @(#) DOC. NO.:  T-N28-CL-SP-069 
//   @(#) SPICE MODEL VERSION: v1.0_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 10:58AM, Nov. 07, 2014 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING PLUS (0.9V/1.8V)(CLN28HT) 
//   @(#) DOC. NO.:  T-N28-CL-SP-079 
//   @(#) SPICE MODEL VERSION: V1.0_2p8 
//   @(#) SPICE MODEL RELEASE DATE: 08:58AM, Jan. 06, 2017 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING PLUS (0.9V/2.5V)(CLN28HT) 
//   @(#) DOC. NO.:  T-N28-CL-SP-081 
//   @(#) SPICE MODEL VERSION: V1.0_2p6 
//   @(#) SPICE MODEL RELEASE DATE: 08:58AM, Dec. 05, 2016 
//   @(#) PROCESS : 0.028um LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING PLUS High Voltage 1.8V SPICE MODEL 28HPC+ (5V HVMOS) 
//   @(#) DOC. NO.:  T-N28-CL-SP-083 
//   @(#) SPICE MODEL VERSION: v1.1_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 04:15PM, Mar. 03, 2017 
//   @(#) PROCESS : 0.028um Mixed Signal RF SALICIDE ELK-IMD (0.85V/1.8V/UD 1.5V) 
//   @(#) DOC. NO.:  T-N28-CM-SP-002 
//   @(#) SPICE MODEL VERSION: v0.03 
//   @(#) SPICE MODEL RELEASE DATE: Mar. 04, 2011 
//   @(#) PROCESS : 28nm Mixed Signal RF SALICIDE ELK-IMD (0.85V/1.5V) (CRN28HP) 
//   @(#) DOC. NO.:  T-N28-CM-SP-003 
//   @(#) SPICE MODEL VERSION: v1.0 
//   @(#) SPICE MODEL RELEASE DATE: Nov. 08, 2010 
//   @(#) PROCESS : 28nm Mixed Signal RF SALICIDE ELK-IMD (0.85V/2.5V) (CRN28HP)  
//   @(#) DOC. NO.:  T-N28-CM-SP-004 
//   @(#) SPICE MODEL VERSION: v1.0 
//   @(#) SPICE MODEL RELEASE DATE: Dec. 8, 2010 
//   @(#) PROCESS : 0.028um Mixed Signal RF SALICIDE ELK-IMD (0.85V/1.8V/UD 1.5V) 
//   @(#) DOC. NO.:  T-N28-CM-SP-005  
//   @(#) SPICE MODEL VERSION: v0.01 
//   @(#) SPICE MODEL RELEASE DATE: Jan. 31, 2010 
//   @(#) PROCESS : 28nm Mixed Signal RF SALICIDE ELK-IMD (1.0V/2.5V) (CRN28HPL) 
//   @(#) DOC. NO.:  T-N28-CR-SP-001 
//   @(#) SPICE MODEL VERSION: v1.0_2p4 
//   @(#) SPICE MODEL RELEASE DATE: Sep. 19, 2014 
//   @(#) PROCESS : 0.028um Mixed Signal RF SALICIDE ELK-IMD (1.0V/2.5V) (crn28hpl_lct) 
//   @(#) DOC. NO.:  T-N28-CR-SP-002 
//   @(#) SPICE MODEL VERSION: V0.01 
//   @(#) SPICE MODEL RELEASE DATE: Nov. 15, 2010 
//   @(#) PROCESS : 28nm Mixed Signal RF SALICIDE ELK-IMD (0.85V/1.8V) (CRN28HP)  
//   @(#) DOC. NO.:  T-N28-CR-SP-003 
//   @(#) SPICE MODEL VERSION: v1.1_2p1 
//   @(#) SPICE MODEL RELEASE DATE: Sep. 15, 2011 
//   @(#) PROCESS : 28nm Mixed Signal RF SALICIDE ELK-IMD (1.0V/1.8V) (CRN28HPL) 
//   @(#) DOC. NO.:  T-N28-CR-SP-004 
//   @(#) SPICE MODEL VERSION: v1.0_2p3 
//   @(#) SPICE MODEL RELEASE DATE: Mar. 14, 2014 
//   @(#) PROCESS : 28nm Mixed Signal RF SALICIDE ELK-IMD (0.85V/1.5V) (CRN28HP) 
//   @(#) DOC. NO.:  T-N28-CR-SP-007 
//   @(#) SPICE MODEL VERSION: v1.1_2p1 
//   @(#) SPICE MODEL RELEASE DATE: Sep. 15, 2011 
//   @(#) PROCESS : 28nm Mixed Signal RF SALICIDE ELK-IMD (0.85V/2.5V) (CRN28HP) 
//   @(#) DOC. NO.:  T-N28-CR-SP-008 
//   @(#) SPICE MODEL VERSION: v1.1_2p1 
//   @(#) SPICE MODEL RELEASE DATE: Sep. 15, 2011 
//   @(#) PROCESS : 0.028um Mixed Signal RF HIGH PERFORMANCE (0.9V/1.8V)(CRN28HPM) 
//   @(#) DOC. NO.:  T-N28-CR-SP-010 
//   @(#) SPICE MODEL VERSION: v1.0_2p4 
//   @(#) SPICE MODEL RELEASE DATE: Oct. 15. 2013 
//   @(#) PROCESS : 0.028um Mixed Signal RF HIGH PERFORMANCE (0.9V/2.5V)(CRN28HPM LCT) 
//   @(#) DOC. NO.:  T-N28-CR-SP-011 
//   @(#) SPICE MODEL VERSION: v1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: Oct. 15. 2013  
//   @(#) PROCESS : 0.028um Mixed Signal RF HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/2.5V)(CRN28HPC LCT) 
//   @(#) DOC. NO.:  T-N28-CR-SP-016 
//   @(#) SPICE MODEL VERSION: v1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: Aug. 19, 2014 
//   @(#) PROCESS : 0.028um Mixed Signal RF HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/1.8V)(CRN28HPC LCT) 
//   @(#) DOC. NO.:  T-N28-CR-SP-017 
//   @(#) SPICE MODEL VERSION: v1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: Aug. 19, 2014 
//   @(#) PROCESS : 0.028um RF LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING (0.9V/1.8V)(CRN28HPC) 
//   @(#) DOC. NO.:  T-N28-CR-SP-020 
//   @(#) SPICE MODEL VERSION: v1.1_2p1 
//   @(#) SPICE MODEL RELEASE DATE: Sep. 8, 2016 
//   @(#) PROCESS : 0.028um Mixed Signal RF LC Tank HIGH PERFORMANCE COMPACT MOBILE COMPUTING PLUS (0.9V/1.8V)(CRN28HT LCT) 
//   @(#) DOC. NO.:  T-N28-CR-SP-021 
//   @(#) SPICE MODEL VERSION: v1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: Jan. 31, 2016 
//   @(#) PROCESS : 0.028um Mixed Signal RF LC Tank HIGH PERFORMANCE COMPACT MOBILE COMPUTING PLUS (0.9V/2.5V)(CRN28HT LCT) 
//   @(#) DOC. NO.:  T-N28-CR-SP-023 
//   @(#) SPICE MODEL VERSION: v1.0_2p1 
//   @(#) SPICE MODEL RELEASE DATE: Feb. 02, 2016    
//   @(#) PROCESS : 0.028um RF LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING PLUS (0.9V/1.8V)(CRN28HPCP) 
//   @(#) DOC. NO.:  T-N28-CR-SP-025 
//   @(#) SPICE MODEL VERSION: v1.0_2p2 
//   @(#) SPICE MODEL RELEASE DATE: 10:12AM, Mar. 06, 2017 
//   @(#) PROCESS : 0.028um RF LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING PLUS (0.9V/2.5V)(CRN28HPCP) 
//   @(#) DOC. NO.:  T-N28-CR-SP-026 
//   @(#) SPICE MODEL VERSION: v1.0_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 10:16AM, Mar. 06, 2017 
//   @(#) PROCESS : 0.028um eDRAM SALICIDE Low-K IMD (0.85/1.2/1.8V) 
//   @(#) DOC. NO.:  T-N28-CE-SP-001-P1 
//   @(#) SPICE MODEL VERSION: V0.01_1p1  
//   @(#) SPICE MODEL RELEASE DATE: 11:18AM, Jul. 19, 2010 
//   @(#) PROCESS : 0.028um eDRAM SALICIDE Low-K IMD (0.85/1.8V) 
//   @(#) DOC. NO.:  T-N28-CE-SP-002 
//   @(#) SPICE MODEL VERSION: V0.1_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 2:02PM, Feb. 14, 2011 
//   @(#) PROCESS : 0.028um eDRAM SALICIDE Low-K IMD (0.85/1.8V) 
//   @(#) DOC. NO.:  T-N28-CE-SP-004 
//   @(#) SPICE MODEL VERSION: V0.2_2p1 
//   @(#) SPICE MODEL RELEASE DATE: 1:37PM, Aug. 26, 2011 
//   @(#) PROCESS :  CLN28HP SRAM (0.85V) 
//   @(#) DOC. NO.:  T-N28-CL-CL-004 
//   @(#) SPICE MODEL VERSION: V1.0_2p3 
//   @(#) SPICE MODEL RELEASE DATE: Mar. 23, 2012 
//   @(#) PROCESS :  CLN28HPL SRAM (1.0V) 
//   @(#) DOC. NO.:  T-N28-CL-CL-005 
//   @(#) SPICE MODEL VERSION: V1.0_2p1 
//   @(#) SPICE MODEL RELEASE DATE: Feb. 17, 2011 
//   @(#) PROCESS : CLN28HPM SRAM (1.0V, Cell HD D127,HC D155,L1-D240,DP D315 and 2P 8T MUX-N D240) 
//   @(#) DOC. NO.:  T-N28-CL-CL-021 
//   @(#) SPICE MODEL VERSION: v1.0 
//   @(#) SPICE MODEL RELEASE DATE: Dec. 30, 2011 
//   @(#) PROCESS : CLN28HPM SRAM (0.95V, Cell HD D127, HC D155, 2P 8T MUX-1 D240, TCAM D555 ) 
//   @(#) DOC. NO.:  T-N28-CL-CL-041 
//   @(#) SPICE MODEL VERSION: V0.5_2p1 
//   @(#) SPICE MODEL RELEASE DATE: Oct. 29, 2012 
//   @(#) PROCESS : TSMC 28NM CMOS LOGIC HIGH PERFORMANCE COMPACT MOBILE COMPUTING PLUS SRAM CU-ELK 0.9V ULL SRAM CELL LAYOUT AND MODEL 
//   @(#) DOC. NO.:  T-N28-CL-CL-056 
//   @(#) SPICE MODEL VERSION: V1.0_2p4 
//   @(#) SPICE MODEL RELEASE DATE: Feb. 25, 2016 
//   @(#) PROCESS : 0.028um LOGIC SALICIDE ELK-IMD (1.8V under-drived 1.2V) (CLN28HP) 
//   @(#) DOC. NO.:  N/A 
//   @(#) SPICE MODEL VERSION: v0d03_1p1 
//   @(#) SPICE MODEL RELEASE DATE: 10:08PM, Oct. 21, 2010 
// 
//////////////////////////////////////////////////////////////////////////////// 
// DISCLAIMER 
// 
// This file usually contains the super set of device extraction rule at TSMC
// processes. However, all of device in basic deck may not be offered at current
// SPICE model. PLEASE ALWAYS REFER TO THE CORRESPONDING SPICE MODEL DOCUMENT
// FOR ANY DEVICE YOU WOULD LIKE USE.
// 
// The information contained herein is provided by TSMC on an "AS IS" basis 
// without any warranty, and TSMC has no obligation to support or otherwise 
// maintain the information.  TSMC disclaims any representation that the 
// information does not infringe any intellectual property rights or proprietary 
// rights of any third parties.  There are no other warranties given by TSMC, 
// whether express, implied or statutory, including, without limitation, implied 
// warranties of merchantability and fitness for a particular purpose. 
// 
// STATEMENT OF USE 
// 
// This information contains confidential and proprietary information of TSMC. 
// No part of this information may be reproduced, transmitted, transcribed, 
// stored in a retrieval system, or translated into any human or computer 
// language, in any form or by any means, electronic, mechanical, magnetic, 
// optical, chemical, manual, or otherwise, without the prior written permission 
// of TSMC.  This information was prepared for informational purpose and is for 
// use by TSMC's customers only.  TSMC reserves the right to make changes in the 
// information at any time and without notice. 
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
//                             DEVICE FORMULA 
//	 CORE == 0.85v or 0.9v or 1.0v 
//	 I/O  == 2.5v or 3.3v or 1.8v 
//   ----- ----------------------------- ---------------------------------- 
//   NAME     DESCRIPTION                   DEVICE LAYER OPERATION 
//   ----- ----------------------------- ---------------------------------- 
// 
//   M[nch_mac]            CORE Nominal VT NMOS           ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T-ROM-SR_ESD-OD_HG-TN2-eVTL_N) 
//   M[nch_hvt_mac]        CORE HIGH-VT NMOS              ((NGATE-OD_12-OD2-NT_N-DCO)*VTH_N-SRM)  
//   M[nch_elvt_mac]       Extreme CORE LOW-VT NMOS       ((NGATE-OD_12-OD2-NT_N-DCO)*eVTL_N-SRM) 
//   M[nch_mlvt_mac]       CORE ILVT NMOS                 ((NGATE-OD_12-OD2-NT_N-DCO)*ILVT-SRM) 
//   M[nch_ulvt_mac]       Ultra Low VT NMOS              ((NGATE-OD2-NT_N)-OD1T*VTUL_N-DCO_LPP) 
//   M[nch_svt_sp_mac]     SVT SP NMOS                    ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T-ROM-SR_ESD-OD_HG*TN2) 
// 
//   M[nch_lvt_mac]        CORE LOW-VT NMOS               ((NGATE-OD_12-OD2-NT_N-DCO)*VTL_N-SRM) 
//   M[nch_hia15_mac]      ESD 1.5V NMOS                  ((NGATE*OD15-OD15_18)*SR_ESD-NT_N) 
//   M[nch_hia18_mac]      ESD 1.8V NMOS                  ((NGATE*OD18-OD18_15-OD25-OD33-OD_50F)*SR_ESD-NT_N)  
//   M[nch_hia_mac]        ESD CORE NMOS                  ((NGATE-OD_12-OD2-NT_N-DCO)*SR_ESD-SRM-OD1T) 
//   M[nch_hia25_mac]      ESD 2.5V NMOS                  ((NGATE*OD25-OD18_15-OD18-OD33)*SR_ESD-NT_N) 
// 
//   M[nch_18_mac]         I/O Nominal VT NMOS            ((NGATE*OD18-OD18_15-OD18_12-OD25-OD33-OD_50F)-NT_N-HVD_N)  
//   M[nch_18ud12_mac]     I/O Nominal VT NMOS under-drive 1.2V ((NGATE*OD18*OD18_12-VTL_N_IO-OD25-OD33-OD_50F)-NT_N)  
//   M[nch_18ud15_mac]     I/O Nominal VT NMOS under-drive 1.5V ((NGATE*OD18*OD18_15-OD25-OD33-OD_50F)-NT_N)  
//   M[nch_33_mac]         I/O Nominal VT NMOS            ((NGATE*OD33-OD25-OD18-NT_N))  
//   M[nch_zvt_mac]        CORE Zero-VT device            ((NGATE-OD_12-OD2-DNW)*NT_N*ZVT-SRM-ANVT)  
//   M[nch_15_mac]         I/O Nominal device             ((NGATE*OD15-OD15_18)-SR_ESD-NT_N-LVSDMY) 
//   M[nch_15od18_mac]     I/O Nominal device over-drive 1.8V   ((NGATE*OD15*OD15_18)-SR_ESD-NT_N-LVSDMY) 
//   M[nch_na15_mac]       I/O native device              ((NGATE*OD15-OD15_18)-SR_ESD*NT_N-LVSDMY) 
//   M[nch_na18_mac]       I/O native device              ((NGATE*OD18-OD18_15-OD25-OD33-OD_50F)-DNW*NT_N)   
//   M[nch_na18ud15_mac]   I/O native device              ((NGATE*OD18*OD18_15-OD25-OD33)-DNW*NT_N)   
// 
//   M[nch_25_mac]         I/O Nominal VT NMOS            ((NGATE*OD25-OD33-OD18)-NT_N-OD25_18-OD25_33)  
//   M[nch_25ud18_mac]     I/O Nominal VT NMOS under-drive 1.8V ((NGATE*OD25-OD33-OD18)-NT_N*OD25_18-OD25_33)  
//   M[nch_25od33_mac]     I/O Nominal VT NMOS over-drive 3.3V ((NGATE*OD25-OD33-OD18)-NT_N-OD25_18*OD25_33)  
//   M[nch_na_mac]         CORE native device             ((NGATE-OD_12-OD2-DNW)*NT_N-ZVT-SRM)  
//   M[nch_na25_mac]       I/O native device              ((NGATE*OD25-OD33-OD18)-DNW-OD25_33-OD25_18*NT_N)   
//   M[nch_na25ud18_mac]   I/O native device under-drive 1.8V ((NGATE*OD25-OD33-OD18)-DNW-OD25_33*OD25_18*NT_N)   
//   M[nch_na25od33_mac]   I/O native device over-drive 3.3V  ((NGATE*OD25-OD33-OD18)-DNW*OD25_33-OD25_18*NT_N)   
//   M[nch_na33_mac]       I/O native device              ((NGATE*OD33-OD25-OD18)-DNW*NT_N)   
//   M[nch_io_lvt_mac]     I/O Low VT NMOS                ((NGATE*OD18-OD25-OD33)-DNW*NT_N*VTL_N_18) 
// 
// 
//   M[nchpg_sr]           SRAM passgate NMOS sp          ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM*SRAMPSGT*SRM_SP-SRMD14i-SRMD5-SRM_ULL) 
//   M[nchpd_sr]           SRAM pulldown NMOS sp          ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM-SRAMPSGT*SRM_SP-SRMD14i-SRMD5-SRM_ULL) 
//   M[nchpg_tgosr]        SRAM TGO_LL passgate NMOS sp   ((NGATE*SRM*SRMD69*SRAMPSGT*OD_12) 
//   M[nchpd_tgosr]        SRAM TGO_LL pulldown NMOS sp   ((NGATE*SRM*SRMD69-SRAMPSGT*OD_12) 
//   M[nchpg_iosr_mac]     SRAM IO_LL passgate NMOS sp    ((NGATE*SRMD68*SRAMPSGT*OD18*OD18_12) 
//   M[nchpd_iosr_mac]     SRAM IO_LL pulldown NMOS sp    ((NGATE*SRMD68-SRAMPSGT*OD18*OD18_12) 
//   M[nchpg_dpsr]         SRAM passgate NMOS dp          ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM*SRAMPSGT*SRM_DP-SRMD14i-SRMD5-SRM_ULL) 
//   M[nchpd_dpsr]         SRAM pulldown NMOS dp          ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM-SRAMPSGT*SRM_DP-SRMD14i-SRMD5-SRM_ULL) 
//   M[nch_rpsr]           SRAM 2P 8T readport NMOS       ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP-SRMD9-SRMD14i-SRM_ULL-SRMD5-SRMD4-VTH_N) 
//   M[nch_svtrpsr]        SRAM 2P SVT 8T readport NMOS   ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP-SRMD9-SRMD14i-SRM_ULL-SRMD5*SRMD4-VTH_N) 
//   M[nch_hvtrpsr]        SRAM 2P HVT 8T readport NMOS   ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP-SRMD9-SRMD14i-SRM_ULL-SRMD5*SRMD4*VTH_N) 
//   M[nch_svtllrpsr]      SRAM 2P SVT 8T readport LL NMOS   ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP-SRMD9-SRMD14i-SRM_ULL*SRMD5*SRMD4-VTH_N) 
//   M[nch_hvtllrpsr]      SRAM 2P HVT 8T readport LL NMOS   ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP-SRMD9-SRMD14i-SRM_ULL*SRMD5*SRMD4*VTH_N) 
//   M[nch_lvtrpsr]        SRAM 2P 8T LVT readport NMOS   ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_LVTRP) 
//   M[nchpg_hvtsr]        SRAM High VTpassgate NMOS      ((NGATE-OD2-NT_N-VTL_N*VTH_N*SRM*SRAMPSGT) 
//   M[nchpd_hvtsr]        SRAM High VTpulldown NMOS      ((NGATE-OD2-NT_N-VTL_N*VTH_N*SRM-SRAMPSGT)     
//   M[nchrpd_sr]          SRAM 10T readport NMOS         ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RPD) 
// 
// 
//   M[nch_hg_mac]         CORE horizontal NMOS           ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T-ROM-SR_ESD*OD_HG) 
//   M[nch_edc_mac]        eDRAM cell NMOS                ((NGATE-OD2-NT_N)-SRM*OD1T*CLDD) 
//   M[nch_qrpsr]          SRAM 2P 8T readport NMOS       ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP*SRMD9-SRMD14i) 
//   M[nch_lvt18ud12_mac]  I/O Nominal LVT NMOS under-drive 1.2V ((NGATE*OD18*OD18_12*VTL_N_IO-OD25-OD33)-NT_N)  
//   M[nchpg_hlsr]         SRAM passgate HP and LL NMOS sp       ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM*SRAMPSGT*SRM_SP*SRMD14i-SRMD5-SRM_ULL) 
//   M[nchpd_hlsr]         SRAM pulldown HP and LL NMOS sp       ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM-SRAMPSGT*SRM_SP*SRMD14i-SRMD5-SRM_ULL) 
//   M[nch_hlrpsr]         SRAM 2P 8T readport HP and LL NMOS    ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP-SRMD9*SRMD14i-SRMD5-SRM_ULL) 
//   M[nch_hlqrpsr]        SRAM 2P 8T readport HP and LL NMOS    ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP*SRMD9*SRMD14i-SRMD4)   
//   M[nch_hlsvtrpsr]      SRAM 2P SVT 8T readport HP and LL NMOS    ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP*SRMD9*SRMD4)   
//   M[nchpg_llsr]         SRAM passgate LL NMOS sp       ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM*SRAMPSGT*SRM_SP-SRMD14i*SRMD5-SRM_ULL) 
//   M[nchpd_llsr]         SRAM pulldown LL NMOS sp       ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM-SRAMPSGT*SRM_SP-SRMD14i*SRMD5-SRM_ULL) 
//   M[nchpg_ullsr]        SRAM passgate ULL NMOS sp      ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM*SRAMPSGT*SRM_SP-SRMD14i-SRMD5*SRM_ULL) 
//   M[nchpd_ullsr]        SRAM pulldown ULL NMOS sp      ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM-SRAMPSGT*SRM_SP-SRMD14i-SRMD5*SRM_ULL) 
//   M[nch_llrpsr]         SRAM 2P 8T readport LL NMOS    ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP-SRMD9-SRMD14i*SRMD5-SRM_ULL-SRMD4) 
//   M[nch_ullrpsr]        SRAM 2P 8T readport ULL NMOS   ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP-SRMD9-SRMD14i-SRMD5*SRM_ULL-SRMD4) 
//   M[nchpg_hltsr]        SRAM passgate TCAM NMOS        ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM*SRAMPSGT*SRM_SP*SRMD42) 
//   M[nchpd_hltsr]        SRAM pulldown TCAM NMOS        ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM-SRAMPSGT*SRM_SP*SRMD42)   
//   M[nch_hltrpsr]        SRAM 2P 8T readport TCAM NMOS  ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*SRM_RP-SRMD9*SRMD42-SRMD4)            
//   M[nchpg_lldpsr]       SRAM passgate LL NMOS dp       ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM*SRAMPSGT*SRM_DP-SRMD14i*SRMD5-SRM_ULL) 
//   M[nchpd_lldpsr]       SRAM pulldown LL NMOS dp       ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM-SRAMPSGT*SRM_DP-SRMD14i*SRMD5-SRM_ULL) 
//   M[nchpg_ulldpsr]      SRAM passgate ULL NMOS dp      ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM*SRAMPSGT*SRM_DP-SRMD14i-SRMD5*SRM_ULL) 
//   M[nchpd_ulldpsr]      SRAM pulldown ULL NMOS dp      ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM-SRAMPSGT*SRM_DP-SRMD14i-SRMD5*SRM_ULL) 
//   M[nchpg_hldpsr]       SRAM passgate HP and LL NMOS dp    ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM*SRAMPSGT*SRM_DP*SRMD14i-SRMD5-SRM_ULL) 
//   M[nchpd_hldpsr]       SRAM pulldown HP and LL NMOS dp    ((NGATE-OD2-NT_N-VTL_N-VTH_N*SRM-SRAMPSGT*SRM_DP*SRMD14i-SRMD5-SRM_ULL) 
//   M[pchpu_hlsr]         SRAM HP and LL PMOS sp hd      ((PGATE-OD2)-VTH_P*SRM*SRM_SP*SRMD14i-SRMD5-SRM_ULL)   
//   M[pchpu_llsr]         SRAM LL PMOS sp hd             ((PGATE-OD2)-VTH_P*SRM*SRM_SP-SRMD14i*SRMD5-SRM_ULL) 
//   M[pchpu_ullsr]        SRAM ULL PMOS sp hd            ((PGATE-OD2)-VTH_P*SRM*SRM_SP-SRMD14i-SRMD5*SRM_ULL) 
//   M[pchpu_hltsr]        SRAM TCAM PMOS hd              ((PGATE-OD2)-VTH_P*SRM*SRM_SP*SRMD42)            
//   M[pchpu_lldpsr]       SRAM LL PMOS dp hd             ((PGATE-OD2)-VTH_P*SRM*SRM_DP-SRMD14i*SRMD5-SRM_ULL) 
//   M[pchpu_ulldpsr]      SRAM ULL PMOS dp hd            ((PGATE-OD2)-VTH_P*SRM*SRM_DP-SRMD14i-SRMD5*SRM_ULL) 
//   M[pchpu_hldpsr]       SRAM HP and LL PMOS dp hd      ((PGATE-OD2)-VTH_P*SRM*SRM_DP*SRMD14i-SRMD5-SRM_ULL) 
//   M[pchpu_2psr]         HPL SRAM PMOS sp hd            ((PGATE-OD2)-VTH_P*SRM*SRM_SP*SRMD15-SRMD14i-SRMD5)   
//   M[nch_rom]            NMOS ROM device                ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T*VTH_N*HP_ROM) 
//   M[pch_mac]            CORE Nominal VT PMOS           ((PGATE*PMETAL-OD_12-OD2-DCO)-SRM-OD1T-SR_ESD-TN2-eVTL_P)  
//   M[pch_hvt_mac]        CORE High-VT PMOS              ((PGATE*PMETAL-OD_12-OD2*VTH_P-DCO)-SRM) 
//   M[pch_elvt_mac]       Extreme CORE LOW-VT PMOS       ((PGATE*PMETAL-OD_12-OD2*eVTL_P-DCO)-SRM) 
//   M[pch_mlvt_mac]       CORE ILVT PMOS                 ((PGATE*PMETAL-OD_12-OD2*ILVT-DCO)-SRM)) 
//   M[pch_ulvt_mac]       Ultra Low VT PMOS              ((PGATE*PMETAL-OD2)*VTUL_P-OD1T-DCO_LPP) 
//   M[pch_svt_sp_mac]     SVT SP PMOS                    ((PGATE*PMETAL-OD_12-OD2-DCO)-SRM-OD1T-SR_ESD*TN2) 
// 
//   M[pch_lvt_mac]        CORE LOW-VT PMOS               ((PGATE*PMETAL-OD_12-OD2*VTL_P-DCO)-SRM) 
//   M[nch_chvt_mac]       CRAM HIGH-VT NMOS              ((NGATE-OD_12-OD2-NT_N-DCO)*CHVT_N-SRM)  
//   M[nch_avt_mac]        Analog Transistor NMOS         ((NGATE-OD_12-OD2-NT_N-DCO)*AVT-SRM) 
//   M[pch_alvt_mac]       CORE ALVT PMOS                 ((ALVTPGATE*PMETAL-OD_12-OD2-DCO)-SRM-OD1T)  
//   M[nch_hguhvt_mac]     CORE horizontal ULTRA HIGH_VT NMOS ((NGATE-OD_12-OD2-NT_N-DCO)-SRM-OD1T-ROM-SR_ESD*OD_HG*UHVT_N) 
//   M[nch_uhvt_mac]       Ultra High-VT NMOS             ((NGATE-OD_12-OD2-NT_N-DCO)*UHVT_N-SRM) 
//   M[pch_uhvt_mac]       Ultra High-VT PMOS             ((PGATE*PMETAL-OD2)*UHVT_P-OD1T) 
//   M[nch_ehvt_mac]       Extra High-Vt NMOS             ((NGATE-OD_12-OD2-NT_N-DCO)*EHVT_N-SRM) 
//   M[pch_ehvt_mac]       Extra High-Vt PMOS             ((PGATE*PMETAL-OD2)*EHVT_P-OD1T) 
//   M[pch_15_mac]         I/O Nominal VT PMOS            (PGATE*PMETAL*OD15-OD15_18)  
//   M[pch_15od18_mac]     I/O Nominal VT PMOS over-drive 1.8V (PGATE*PMETAL*OD15*OD15_18)        
//   M[pch_18_mac]         I/O Nominal VT PMOS            (PGATE*PMETAL*OD18-OD18_15-OD18_12-OD25-OD33-OD_50F-HVD_P)  
//   M[pch_18ud12_mac]     I/O Nominal VT PMOS under-drive 1.2V (PGATE*PMETAL*OD18*OD18_12-OD25-OD33-OD_50F)  
//   M[pch_18ud15_mac]     I/O Nominal VT PMOS under-drive 1.5V (PGATE*PMETAL*OD18*OD18_15-OD25-OD33-OD_50F)  
//   M[pch_33_mac]         I/O Nominal VT PMOS            (PGATE*PMETAL*OD33-OD25-OD18)  
// 
//   M[pch_25_mac]         I/O Nominal VT PMOS            ((PGATE*PMETAL*OD25-OD33-OD18)-OD25_18-OD25_33-VTL_P25)  
//   M[pch_25ud18_mac]     I/O Nominal VT PMOS under-drive 1.8V ((PGATE*PMETAL*OD25-OD33-OD18)*OD25_18-OD25_33)  
//   M[pch_25od33_mac]     I/O Nominal VT PMOS over-drive 3.3V  ((PGATE*PMETAL*OD25-OD33-OD18)-OD25_18*OD25_33)  
//   M[pchpu_sr]           SRAM PMOS sp hd                ((PGATE-OD2)-VTH_P*SRM*SRM_SP-SRMD14i-SRMD5-SRM_ULL)  
//   M[pchpu_tgosr]        SRAM TGO_LL PMOS sp hd         ((PGATE)*SRM*SRMD69*OD_12)  
//   M[pchpu_iosr_mac]     SRAM IO_LL PMOS sp hd          ((PGATE)*SRMD68*OD18*OD18_12)  
//   M[pchpu_dpsr]         SRAM PMOS dp hd                ((PGATE-OD2)-VTH_P*SRM*SRM_DP-SRMD14i-SRMD5-SRM_ULL)  
//   M[pch_hguhvt_mac]     CORE horizontal ULTRA HIGH_VT PMOS ((PGATE*PMETAL-OD_12-OD2-DCO)-SRM-OD1T-SR_ESD*OD_HG*UHVT_P)  
// 
//   M[pchpu_hvtsr]        SRAM High VT PMOS              ((PGATE-OD2)*VTH_P*SRM) 
// 
//   M[pch_hg_mac]         CORE horizontal PMOS           ((PGATE*PMETAL-OD_12-OD2-DCO)-SRM-OD1T-SR_ESD*OD_HG)  
//   LDDN[nch_udm_mac]        CORE UDM NMOS  	           ((NGATE-OD_12-OD2-NT_N-DCO)*UDM*RPO-SRM-OD1T-ROM-SR_ESD-OD_HG-TN2) 
//   LDDN[nch_udm18_mac]      I/O UDM NMOS                   ((NGATE-OD_12*OD18-OD18_12-OD18_15-OD25-NT_N-DCO)*UDM*RPO-SRM-OD1T-ROM-SR_ESD-OD_HG-TN2) 
//   LDDN[nch_udm18ud15_mac]  I/O UDM NMOS under-drive 1.5V  ((NGATE-OD_12*OD18*OD18_15-OD25-NT_N-DCO)*UDM*RPO-SRM-OD1T-ROM-SR_ESD-OD_HG-TN2) 
//   LDDP[pch_udm_mac]        CORE UDM PMOS  	           ((PGATE*PMETAL-OD_12-OD2-DCO)*UDM*RPO-SRM-OD1T-SR_ESD-TN2) 
//   LDDP[pch_udm18_mac]      I/O UDM PMOS                   ((PGATE*PMETAL-OD_12*OD18-OD18_12-OD18_15-OD25-DCO)*UDM*RPO-SRM-OD1T-SR_ESD-TN2) 
//   LDDP[pch_udm18ud15_mac]  I/O UDM PMOS under-drive 1.5V  ((PGATE*PMETAL-OD_12*OD18*OD18_15-OD25-DCO)*UDM*RPO-SRM-OD1T-SR_ESD-TN2) 
// 
//   LDDN[nch_hv18_mac]       I/O HV NMOS                 (NGATE*OD18*HVD_N-OD18_15-OD18_12-OD25-OD33-OD_50F-NT_N) 
//   LDDP[pch_hv18_mac]       I/O HV PMOS                 (PGATE*PMETAL*OD18*HVD_P-OD18_15-OD18_12-OD25-OD33-OD_50F*DNW)  
//   D[pdio]              CORE diode P+/NW                (DIODMY*OD*PP-OD_12-OD2*NW-NWLVT-OD1T-DCO-SR_ESD-OD_HG-eVTL_N-DIODMY_L)  
//   D[pdio_25]           I/O diode P+/NW                 (DIODMY*OD*PP*OD25*NW-DIODMY_L)  
//   D[pdio_25od33]       I/O diode P+/NW over-drive 3.3V (DIODMY*OD*PP*OD25-OD25_18*OD25_33*NW-DIODMY_L)  
//   D[pdio_25ud18]       I/O diode P+/NW under-drive 1.8V (DIODMY*OD*PP*OD25*OD25_18-OD25_33*NW-DIODMY_L)  
//   D[pdio_hg]           CORE horizontal diode P+/NW     (DIODMY*OD*PP-OD_12-OD2*NW-NWLVT-OD1T-DCO-SR_ESD*OD_HG-DIODMY_L)  
//   D[pdio_lvt]          CORE Low-VT diode P+/NW         (DIODMY*OD*PP-OD2*NW-NWLVT*VTL_P-DCO-DIODMY_L) 
//   D[pdio_hvt]          CORE High-VT diode P+/NW        (DIODMY*OD*PP-OD2*NW-NWLVT*VTH_P-DCO-DIODMY_L)  
//   D[pdio_elvt]         Extreme CORE Low-VT diode P+/NW (DIODMY*OD*PP-OD2*NW-NWLVT*eVTL_P-DCO-DIODMY_L) 
//   D[pdio_mlvt]         CORE ILVT diode P+/NW           (DIODMY*OD*PP-OD2*NW-NWLVT*ILVT-DCO-DIODMY_L)  
//   D[pdio_ulvt]         Ultra Low VT diode P+/NW        (DIODMY*OD*PP-OD2*NW-OD1T*VTUL_P-DCO_LPP-DIODMY_L)  
//   D[pdio_15]           I/O diode P+/NW                  (DIODMY*OD*PP*OD15-OD15_18*NW-DIODMY_L)  
//   D[pdio_15od18]       I/O diode P+/NW over-drive 1.8V  (DIODMY*OD*PP*OD15*OD15_18*NW-DIODMY_L) 
//   D[pdio_18]           I/O diode P+/NW                  (DIODMY*OD*PP*OD18-OD18_15-OD18_12*NW-DIODMY_L)  
//   D[pdio_18ud12]       I/O diode P+/NW under-drive 1.2V (DIODMY*OD*PP*OD18*OD18_12*NW-DIODMY_L)  
//   D[pdio_18ud15]       I/O diode P+/NW under-drive 1.5V (DIODMY*OD*PP*OD18*OD18_15*NW-DIODMY_L)  
//   D[pdio_33]           I/O diode P+/NW                  (DIODMY*OD*PP*OD33*NW-DIODMY_L)  
// 
// 
//   D[ndio]              CORE diode N+/PW                 (DIODMY*OD*NP-OD_12-OD2*PSUB-OD1T-DCO-SR_ESD-OD_HG-eVTL_N-DIODMY_L)  
//   D[ndio_25]           I/O diode N+/PW                  (DIODMY*OD*NP*OD25-OD25_18-OD25_33*PSUB-DIODMY_L)  
//   D[ndio_25ud18]       I/O diode N+/PW under-drive 1.8V (DIODMY*OD*NP*OD25*OD25_18-OD25_33*PSUB-DIODMY_L)  
//   D[ndio_25od33]       I/O diode N+/PW over-drive 3.3V  (DIODMY*OD*NP*OD25-OD25_18*OD25_33*PSUB-DIODMY_L)  
//   D[ndio_esd]          Diode DB                         (ESDIMP*NP*OD*RPO)  
//   D[ndio_hg]           CORE horizontal diode N+/PW      (DIODMY*OD*NP-OD_12-OD2*PSUB-OD1T-DCO-SR_ESD*OD_HG-DIODMY_L)  
//   D[ndio_lvt]          CORE Low-VT diode N+/PW          (DIODMY*OD*NP-OD2*PSUB*VTL_N-DCO-DIODMY_L) 
//   D[ndio_na]           CORE native diode N+/PW          (DIODMY*OD*NP-OD_12-OD2*PSUB*NT_N-ZVT-DCO-ANVT-DIODMY_L)  
//   D[ndio_na25]         I/O native diode N+/PW           (DIODMY*OD*NP*OD25*PSUB*NT_N-DIODMY_L)  
// 
//   D[dnwpsub]           Diode DNW/PSUB                   (DNW*PSUB)            
//   D[pwdnw]             Diode DNW/PSUB                   (DNW-NW) 
//   D[pnwdio]            Parasitic NW/PW diode            (NW-DIODMY) 
//   D[ndio_hvt]          CORE High-VT diode N+/PW        (DIODMY*OD*NP-OD2*PSUB*VTH_N-DCO-DIODMY_L)  
//   D[ndio_elvt]         Extreme CORE Low-VT diode N+/PW (DIODMY*OD*NP-OD2*PSUB*eVTL_N-DCO-DIODMY_L) 
//   D[ndio_mlvt]         CORE ILVT diode N+/PW           (DIODMY*OD*NP-OD2*PSUB*ILVT-DCO-DIODMY_L) 
//   D[ndio_ulvt]         Ultra Low VT diode N+/PW        (DIODMY*OD*NP-OD2*PSUB-OD1T*VTUL_N-DCO_LPP-DIODMY_L)  
// 
//   D[ndio_15]           I/O diode N+/PW                 (DIODMY*OD*NP*OD15-OD15_18-NT_N*PSUB-DIODMY_L) 
//   D[ndio_15od18]       I/O diode N+/PW over-drive 1.8V (DIODMY*OD*NP*OD15*OD15_18*PSUB-DIODMY_L) 
//   D[ndio_18]           I/O diode N+/PW                 (DIODMY*OD*NP*OD18-OD18_15-OD18_12*PSUB-DIODMY_L)  
//   D[ndio_18ud12]       I/O diode N+/PW under-drive 1.2V (DIODMY*OD*NP*OD18*OD18_12*PSUB-VTL_N_IO-DIODMY_L)  
//   D[ndio_18ud15]       I/O diode N+/PW under-drive 1.5V (DIODMY*OD*NP*OD18*OD18_15*PSUB-DIODMY_L)  
//   D[ndio_33]           I/O diode N+/PW                 (DIODMY*OD*NP*OD33*PSUB-DIODMY_L)  
// 
//    
//   D[ndio_18ll]         I/O 1.8V LOW LEAKAGE diode N+/PW    (DIODMY*OD*NP*OD18*PSUB*DIODMY_L) 
//   D[pdio_18ll]         I/O 1.8V LOW LEAKAGE diode P+/NW    (DIODMY*OD*PP*OD18*NW*DIODMY_L) 
//   D[ndio_avt]          Analog Transistor diode N+/PW   (DIODMY*OD*NP-OD2*PSUB-OD1T*AVT-DIODMY_L)  
//   D[ndio_hguhvt]       CORE horizontal ultra HVT diode N+/PW (DIODMY*OD*NP-OD_12-OD2*PSUB-OD1T-DCO-SR_ESD*OD_HG*UHVT_N-DIODMY_L)  
//   D[pdio_hguhvt]       CORE horizontal ultra HVT diode P+/NW (DIODMY*OD*PP-OD_12-OD2*NW-NWLVT-OD1T-DCO-SR_ESD*OD_HG*UHVT_P-DIODMY_L)  
//   D[ndio_lvt18ud12]    I/O diode N+/PW LVT under-drive 1.2V (DIODMY*OD*NP*OD18*OD18_12*PSUB*VTL_N_IO-DIODMY_L)  
//   D[ndio_ll]           CORE LOW LEAKAGE diode N+/PW    (DIODMY*OD*NP-OD2*PSUB*DIODMY_L) 
//   D[pdio_ll]           CORE LOW LEAKAGE diode P+/NW    (DIODMY*OD*PP-OD2*NW*DIODMY_L) 
//   D[ndio_25ll]         I/O 2.5V LOW LEAKAGE diode N+/PW    (DIODMY*OD*NP*OD25*PSUB*DIODMY_L) 
//   D[pdio_25ll]         I/O 2.5V LOW LEAKAGE diode P+/NW    (DIODMY*OD*PP*OD25*NW*DIODMY_L) 
//   D[ndio_uhvt]         Ultra High VT diode N+/PW       (DIODMY*OD*NP-OD2*PSUB-OD1T*UHVT_N-DIODMY_L) 
//   D[pdio_uhvt]         Ultra High VT diode P+/NW       (DIODMY*OD*PP-OD2*NW-OD1T*UHVT_P-DIODMY_L) 
//   D[ndio_ehvt]         Extra High-Vt diode N+/PW       (DIODMY*OD*NP-OD2*PSUB-OD1T*EHVT_N-DIODMY_L)  
//   D[pdio_ehvt]         Extra High-Vt diode P+/NW       (DIODMY*OD*PP-OD2*NW-OD1T*EHVT_P-DIODMY_L)    
// 
//   ndio_hia_mac         CORE ESD diode N+/PW            (DIODMY*OD*NP-OD_12-OD2*PSUB*SR_ESD*HIA_DUMMY-RFDMY-DIODMY_L)  
//   pdio_hia_mac         CORE ESD diode P+/NW            (DIODMY*OD*PP-OD_12-OD2*NW*SR_ESD*HIA_DUMMY-RFDMY-DIODMY_L)  
//   D[nwdio]             Diode NW/PW                     (DIODMY*NW-DIODMY_L)  
//   D[ndio_zvt]          CORE Zero-VT diode N+/PW        (DIODMY*OD*NP-OD_12-OD2*PSUB*NT_N*ZVT-DCO-ANVT-DIODMY_L)  
//   D[ndio_na15]         I/O native diode N+/PW          (DIODMY*OD*NP*OD15-OD15_18*PSUB*NT_N-DIODMY_L) 
//   D[ndio_na18]         I/O native diode N+/PW          (DIODMY*OD*NP*OD18-OD18_15*PSUB*NT_N-DIODMY_L)  
//   D[ndio_na18ud15]     I/O native diode N+/PW          (DIODMY*OD*NP*OD18*OD18_15*PSUB*NT_N-DIODMY_L)  
//   D[ndio_na25od33]     I/O native diode N+/PW overdrvie (DIODMY*OD*NP*OD25-OD25_18*OD25_33*PSUB*NT_N-DIODMY_L)  
//   D[ndio_na33]         I/O native diode N+/PW          (DIODMY*OD*NP*OD33*PSUB*NT_N-DIODMY_L)  
//   D[ndio_io_lvt]       I/O native diode Low VT N+/PW   (DIODMY*OD*NP*OD18*PSUB*NT_N*VTL_N_18-DIODMY_L)  
// 
// 
//   Q[pnp10_mis]         PNP10X10 mis                    (BJTDMY*OD*PP*NW*RPO)  
//   Q[pnp5_mis]          PNP5X5 mis                      (BJTDMY*OD*PP*NW*RPO)  
//   Q[pnp2_mis]          PNP2X2 mis                      (BJTDMY*OD*PP*NW*RPO)  
//   Q[pnp1d6_mis]        PNP1d6X1d6 mis                  (BJTDMY*OD*PP*NW*RPO)  
//   Q[pnp10]             PNP10X10                        (BJTDMY*OD*PP*NW*RPO*LVSDMYi)  
//   Q[pnp5]              PNP5X5                          (BJTDMY*OD*PP*NW*RPO*LVSDMYi)  
//   Q[pnp2]              PNP2X2                          (BJTDMY*OD*PP*NW*RPO*LVSDMYi)  
//   Q[pnp1d6]            PNP1d6X1d6                      (BJTDMY*OD*PP*NW*RPO*LVSDMYi)  
//   nmoscap              MOSCAP Varactor                 ((VARGT*NW-OD_12-OD18-OD25-OD33-OD_50F)-RFDMY-OD1T) 
//   nmoscap_25           2.5V MOSCAP Varactor            ((VARGT*NW-OD18*OD25-OD33)-RFDMY) 
//   pmoscap              PMOSCAP Varactor                (PVARGT-RFDMY-OD15-OD18-OD25-OD33-OD_50F) 
//   pmoscap_25           2.5v PMOSCAP Varactor           (PVARGT-RFDMY-OD15-OD18*OD25-OD33) 
//   nmoscap_15           1.5V MOSCAP Varactor            ((VARGT*NW*OD15-OD_12-OD18-OD25-OD33)-RFDMY-OD1T) 
//   nmoscap_33           3.3V MOSCAP Varactor            ((VARGT*NW-OD18-OD25*OD33)-RFDMY) 
//   nmoscap_edc          eDRAM Ultra LVT MOSCAP Varactor ((VARGT*NW-OD2)-RFDMY*OD1T) 
//   nmoscap_18           1.8V MOSCAP Varactor            ((VARGT*NW*OD18-OD25-OD33-OD_50F)-RFDMY-VAR10)   
//   pmoscap_18           1.8v PMOSCAP Varactor           (PVARGT-RFDMY-OD15*OD18-OD25-OD33-OD_50F) 
//   cmoscap_rf           CORE NMOS varactor with C-shape metal routing           (VAR11GT*NW-OD18-OD25*RFDMY*DNW)    
//   cmoscap_rf_nw        CORE NMOS varactor w/o DNW with C-shape metal routing   (VAR11GT*NW-OD18-OD25*RFDMY) 
//   cmoscap_rf18         1.8V NMOS varactor with C-shape metal routing           (VAR11GT*NW*OD18-OD25*RFDMY*DNW) 
//   cmoscap_rf18_nw      1.8V NMOS varactor w/o DNW with C-shape metal routing   (VAR11GT*NW*OD18-OD25*RFDMY) 
//   cmoscap_rf25         2.5V NMOS varactor with C-shape metal routing           (VAR11GT*NW-OD18*OD25*RFDMY*DNW) 
//   cmoscap_rf25_nw      2.5V NMOS varactor w/o DNW with C-shape metal routing   (VAR11GT*NW-OD18*OD25*RFDMY) 
//   pcmoscap_rf           CORE PMOS varactor with C-shape metal routing          (PVARGT-OD18-OD25*RFDMY*DNW*VAR11)    
//   pcmoscap_rf18         1.8V PMOS varactor with C-shape metal routing          (PVARGT*OD18-OD25*RFDMY*DNW*VAR11) 
//   pcmoscap_rf25         2.5V PMOS varactor with C-shape metal routing          (PVARGT-OD18*OD25*RFDMY*DNW*VAR11) 
//   dmoscap_rf           CORE DMOSCAP varactor           (VAR10GT*NW-OD18-OD25*RFDMY*DNW) 
//   dmoscap_rf_nw        CORE DMOSCAP varactor w/o DNW   (VAR10GT*NW-OD18-OD25*RFDMY) 
//   dmoscap_rf18         1.8V DMOSCAP varactor           (VAR10GT*NW*OD18-OD25*RFDMY*DNW) 
//   dmoscap_rf18_nw      1.8V DMOSCAP varactor w/o DNW   (VAR10GT*NW*OD18-OD25*RFDMY) 
//   dmoscap_rf25         2.5V DMOSCAP varactor           (VAR10GT*NW-OD18*OD25*RFDMY*DNW) 
//   dmoscap_rf25_nw      2.5V DMOSCAP varactor w/o DNW   (VAR10GT*NW-OD18*OD25*RFDMY) 
//   ndio_hia_rf          RF N+/PW High-Current Diode     (DIODMY*OD*NP-OD_12-OD2*PSUB*SR_ESD*HIA_DUMMY*RFDMY-DIODMY_L) 
//   pdio_hia_rf          RF P+/NW High-Current Diode     (DIODMY*OD*PP-OD_12-OD2*NW*SR_ESD*HIA_DUMMY*RFDMY-DIODMY_L) 
//   mimcap_sin		MiM decap 2T 			(ctm*cbm*CTMDMYt) 
// 
//   moscap_rf            RF MOSCAP Varactor w/ DNW       ((VARGT*NW-OD18-OD25-OD33-VTH_P)*RFDMY*DNW-VAR14) 
//   moscap_rf_nw         RF MOSCAP Varactor w/o DNW      ((VARGT*NW-OD_12-OD18-OD25-OD33-VTH_P)*RFDMY-DNW) 
//   moscap_rf18          1.8V MOSCAP Varactor w/ DNW     ((VARGT*NW*OD18-OD15-OD25-OD33)*RFDMY*DNW-VAR14) 
//   moscap_rf18_nw       1.8V MOSCAP Varactor w/o DNW    ((VARGT*NW-OD_12*OD18-OD15-OD25-OD33)*RFDMY-DNW) 
//   moscap_rf15_nw       1.5V MOSCAP Varactor w/o DNW    ((VARGT*NW-OD_12*OD15-OD25-OD33)*RFDMY-DNW) 
//   moscap_rf25          2.5V MOSCAP Varactor            ((VARGT*NW-OD15-OD18*OD25-OD33)*RFDMY*DNW) 
//   moscap_rf25_nw       2.5V MOSCAP Varactor w/o DNW    ((VARGT*NW-OD15-OD18*OD25-OD33)*RFDMY-DNW) 
//   pmoscap_rf           CORE RF PMOS Varactor           (PVARGT-NW-SR_DPOi*VARi*RFDMY*DNW-OD18) 
//   pmoscap_rf18         1.8V RF PMOSCAP Varactor        (PVARGT-NW-SR_DPOi*OD18*VARi*RFDMY*DNW) 
//   nmos_rf_nw           CORE RF NMOS                    ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*RFDMY-RFDMY6T-RFDMY5T) 
//   nmos_rf_lvt_nw       LVT RF NMOS                     ((NGATE-OD18-OD25-OD33-NT_N-VTH_N*VTL_N-ILVT-VTUL_N)*RFDMY-RFDMY6T-RFDMY5T) 
//   nmos_rf_18_nw        I/O RF NMOS                     ((NGATE*OD18-OD18_15-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*RFDMY-RFDMY6T-RFDMY5T) 
//   nmos_rf_18ud15_nw    I/O RF NMOS under-drive 1.5V	((NGATE*OD18*OD18_15-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*RFDMY-RFDMY6T-RFDMY5T) 
//   pmos_rf_nw           CORE RF PMOS                       ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)*RFDMY-RFDMY5T) 
//   pmos_rf_lvt_nw       LVT RF PMOS                        ((PGATE-OD18-OD25-OD33-NT_N-VTH_P*VTL_P-ILVT-VTUL_P)*RFDMY-RFDMY5T)  
//   pmos_rf_18_nw        I/O RF PMOS                             ((PGATE*OD18-OD18_15-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)*RFDMY-RFDMY5T) 
//   pmos_rf_18ud15_nw    I/O RF PMOS under-drive 1.5V            ((PGATE*OD18*OD18_15-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)*RFDMY-RFDMY5T) 
//   nmos_rf_5t           5T RF NMOS                       ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY5T)   
//   nmos_rf_18_5t        I/O 5T RF NMOS                   ((NGATE*OD18-OD18_15-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY5T)  
//   nmos_rf_lvt_5t       LVT 5T RF NMOS                   ((NGATE-OD18-OD25-OD33-NT_N-VTH_N*VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY5T) 
//   nmos_rf_18ud15_5t    I/O 5T RF NMOS under-drive 1.5V  ((NGATE*OD18*OD18_15-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY5T)  
//   pmos_rf_5t           5T CORE RF PMOS                  ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)*DNW*RFDMY*RFDMY5T)  
//   pmos_rf_nw_5t        5T CORE RF PMOS w/o DNW          ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY*RFDMY5T) 
//   pmos_rf_lvt_5t       5T LVT RF PMOS                   ((PGATE-OD18-OD25-OD33-NT_N-VTH_P*VTL_P-ILVT-VTUL_P)*DNW*RFDMY*RFDMY5T)  
//   pmos_rf_lvt_nw_5t    5T LVT RF PMOS w/o DNW           ((PGATE-OD18-OD25-OD33-NT_N-VTH_P*VTL_P-ILVT-VTUL_P)-DNW*RFDMY*RFDMY5T)  
//   pmos_rf_18_5t        I/O 5T RF PMOS                   ((PGATE*OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_18_nw_5t     I/O 5T RF PMOS w/o DNW           ((PGATE*OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY*RFDMY5T)  
//   pmos_rf_18ud15_5t    I/O 5T RF PMOS under-drive 1.5V  	 ((PGATE*OD18*OD18_15-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_18ud15_nw_5t I/O 5T RF PMOS under-drive 1.5V w/o DNW  ((PGATE*OD18*OD18_15-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY*RFDMY5T) 
//   nmos_rf_6t           6T CORE RF NMOS                  ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_lvt_6t       6T LVT RF NMOS                   ((NGATE-OD18-OD25-OD33-NT_N-VTH_N*VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_18_6t        6T 1.8V RF NMOS                  ((NGATE*OD18-OD18_15-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_18ud15_6t    I/O 6T RF NMOS under-drive 1.5V  ((NGATE*OD18*OD18_15-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY6T) 
// 
//   nmos_rf_hvt_nw       HVT RF NMOS w/o DNW             ((NGATE-OD18-OD25-OD33-NT_N*VTH_N-VTL_N-ILVT-VTUL_N)*RFDMY-RFDMY6T-DNW) 
//   nmos_rf_ulvt_nw      ULVT RF NMOS                    ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT*VTUL_N)*RFDMY-RFDMY6T-RFDMY5T)    
//   nmos_rf_25_nw        I/O RF NMOS                     ((NGATE-OD18*OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*RFDMY-RFDMY6T-RFDMY5T) 
//   nmos_rf_25od33_nw    I/O RF NMOS over-drive 3.3V	((NGATE-OD18*OD25-OD33*OD25_33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*RFDMY-RFDMY6T-RFDMY5T) 
//   nmos_rf_25ud18_nw    I/O RF NMOS under-drive 1.8V	((NGATE-OD18*OD25-OD33*OD25_18-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*RFDMY-RFDMY6T-RFDMY5T) 
//   pmos_rf_hvt_nw       HVT RF PMOS w/o DNW                     ((PGATE-OD18-OD25-OD33-NT_N*VTH_P-VTL_P)-DNW*RFDMY-RFDMY5T)  
//   pmos_rf_hvt_nw       HVT RF PMOS                             ((PGATE-OD18-OD25-OD33-NT_N*VTH_P-VTL_P-ILVT-VTUL_P)*RFDMY-RFDMY5T)  
//   pmos_rf_ulvt_nw      ULVT RF PMOS                       ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT*VTUL_P)*RFDMY-RFDMY5T)  
//   pmos_rf_25_nw        I/O RF PMOS w/o DNW                     ((PGATE-OD18*OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY-RFDMY5T) 
//   pmos_rf_25ud18_nw    I/O RF PMOS w/o DNW under-drive 1.8V    ((PGATE-OD18*OD25*OD25_18-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY-RFDMY5T) 
//   pmos_rf_25od33_nw    I/O RF PMOS w/o DNW over-drive 3.3V     ((PGATE-OD18*OD25*OD25_33-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY-RFDMY5T) 
//   nmos_rf_25_5t        I/O 5T RF NMOS                   ((NGATE-OD18*OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY5T)  
//   nmos_rf_hvt_5t       HVT 5T RF NMOS                   ((NGATE-OD18-OD25-OD33-NT_N*VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY5T)          
//   nmos_rf_ulvt_5t      ULVT 5T RF NMOS                  ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT*VTUL_N)*DNW*RFDMY*RFDMY5T) 
//   nmos_rf_25ud18_5t    I/O 5T RF NMOS under-drive 1.8V  ((NGATE-OD18*OD25*OD25_18-OD33-NT_N-VTH_N-VTL_N-ILVT-ILVT-VTUL_N)*DNW*RFDMY*RFDMY5T)  
//   nmos_rf_25od33_5t    I/O 5T RF NMOS over-drive 3.3V   ((NGATE-OD18*OD25*OD25_33-OD33-NT_N-VTH_N-VTL_N-ILVT-ILVT-VTUL_N)*DNW*RFDMY*RFDMY5T)  
//   pmos_rf_hvt_5t       5T HVT RF PMOS                   ((PGATE-OD18-OD25-OD33-NT_N*VTH_P-VTL_P-ILVT-VTUL_P)*DNW*RFDMY*RFDMY5T)  
//   pmos_rf_hvt_nw_5t    5T HVT RF PMOS w/o DNW           ((PGATE-OD18-OD25-OD33-NT_N*VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY*RFDMY5T)  
//   pmos_rf_25_5t        I/O 5T RF PMOS                           ((PGATE-OD18*OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_25_nw_5t     I/O 5T RF PMOS w/o DNW                   ((PGATE-OD18*OD25-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY*RFDMY5T)  
//   pmos_rf_ulvt_5t      5T ULVT RF PMOS                  ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT*VTUL_P)*DNW*RFDMY*RFDMY5T)  
//   pmos_rf_ulvt_nw_5t   5T ULVT RF PMOS w/o DNW          ((PGATE-OD18-OD25-OD33-NT_N-VTH_P-VTL_P-ILVT*VTUL_P)-DNW*RFDMY*RFDMY5T)  
//   pmos_rf_25ud18_5t    I/O 5T RF PMOS under-drive 1.8V          ((PGATE-OD18*OD25*OD25_18-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_25ud18_nw_5t I/O 5T RF PMOS under-drive 1.8V w/o DNW  ((PGATE-OD18*OD25*OD25_18-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY*RFDMY5T)  
//   pmos_rf_25od33_5t    I/O 5T RF PMOS over-drive 3.3V           ((PGATE-OD18*OD25*OD25_33-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)*DNW*RFDMY*RFDMY5T) 
//   pmos_rf_25od33_nw_5t I/O 5T RF PMOS over-drive 3.3V w/o DNW   ((PGATE-OD18*OD25*OD25_33-OD33-NT_N-VTH_P-VTL_P-ILVT-VTUL_P)-DNW*RFDMY*RFDMY5T)  
//   nmos_rf_hvt_6t       6T HVT RF NMOS                   ((NGATE-OD18-OD25-OD33-NT_N*VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_ulvt_6t      6T ULVT RF NMOS                  ((NGATE-OD18-OD25-OD33-NT_N-VTH_N-VTL_N-ILVT*VTUL_N)*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_25_6t        I/O 6T RF NMOS                   ((NGATE-OD18*OD25-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY6T) 
//   nmos_rf_25ud18_6t    I/O 6T RF NMOS under-drive 1.8V  ((NGATE-OD18*OD25*OD25_18-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY6T)  
//   nmos_rf_25od33_6t    I/O 6T RF NMOS over-drive 3.3V   ((NGATE-OD18*OD25*OD25_33-OD33-NT_N-VTH_N-VTL_N-ILVT-VTUL_N)*DNW*RFDMY*RFDMY6T)  
//   rupolym_rf           High R resistor 3T               (RPDMYi*PO*PP*RPO*RH_PO*PMETAL*RFDMY) 
//   spiral_std_mu_z              Standard inductor Top(Mu) coil(Mu) cross(Mz)   (M9i*INDDMYi) 
//   spiral_sym_ct_mu_z_a         Centro-tap inductor Mu_z    	               (M9i*INDDMYi*APi*IND_D4) 
//   spiral_sym_mu_z              Symmetric inductor Top(Mu) coil(Mu) cross(Mz)  (M9i*INDDMYi) 
//   spiral_sym_ct_lc     Centro-tap inductor             (M9i*INDDMYi*APi) 
//   spiral_sym_ct_rl     Centro-tap inductor             (M9i*INDDMYi*APi) 
//   spiral_sym           spiral sym inductor             (M9i*INDDMYi)  
//   spiral_std_mu_z_dm           Standard inductor                              (M9i*INDDMYi) 
//   spiral_sym_ct_mu_z_a28_dm    Centro-tap inductor                            (M9i*INDDMYi*APi*IND_D4)  
//   spiral_sym_mu_z_dm           Symmetric inductor                             (M9i*INDDMYi) 
//   spiral_std_mu_a28_dm         Standard inductor                              (M9i*INDDMYi*APi) 
//   spiral_sym_ct_mu_a28_a28_dm  Centro-tap inductor   	                       (M9i*INDDMYi*APi*IND_D4) 
//   spiral_sym_mu_a28_dm         Symmetric inductor                             (M9i*INDDMYi*APi) 
//   rnwod                N-Well resistor under OD 2T     (NWDMYi*NW*(OD*RPO))  
//   rnwod_m              N-Well resistor under OD 3T     (NWDMY1*NW*(OD*RPO))  
//   rnwsti               N-Well resistor under STI 2T    (NWDMYi*NW-(OD*RPO))  
//   rnwsti_m             N-Well resistor under STI 3T    (NWDMY1*NW-(OD*RPO))  
//   rupolym              High R resistor 2T              (RPDMYi*PO*PP*RPO*RH_PO*PMETAL-OD_50F-RFDMY) 
//   rupolym_m            High R resistor 3T              (RPDMY1*PO*PP*RPO*RH_PO*PMETAL-OD_50F-RFDMY) 
//   rnmg                 N+ metal gate resistor 2T       (RPDMYi*PO*NP-RPO*RH_PO-OD_50F-RFDMY) 
//   rnmg_m               N+ metal gate resistor 3T       (RPDMY1*PO*NP-RPO*RH_PO-OD_50F-RFDMY) 
//   rpmg                 P+ metal gate resistor 2T       (RPDMYi*PO*PP-RPO*RH_PO*PMETAL-OD_50F-RFDMY) 
//   rpmg_m               P+ metal gate resistor 3T       (RPDMY1*PO*PP-RPO*RH_PO*PMETAL-OD_50F-RFDMY) 
//   rpodwo               P+diff resistor w/o Silicide 2T (RPDMYi*OD*PP*RPO*RH_OD-OD_50F)  
//   rnodwo               N+diff resistor w/o Silicide 2T (RPDMYi*OD*NP*RPO*RH_OD-OD_50F)  
//   rpodwo_m             P+diff resistor w/o Silicide 3T (RPDMY1*OD*PP*RPO*RH_OD*NW-OD_50F)  
//   rnodwo_m             N+diff resistor w/o Silicide 3T (RPDMY1*OD*NP*RPO*RH_OD-OD_50F)  
//   rnodl                N+diff resistor w/i Silicide >=2 2T (RPDMYi*OD*NP-RPO*RH_OD-OD_50F)  
//   rnodl_m              N+diff resistor w/i Silicide >=2 3T (RPDMY1*OD*NP-RPO*RH_OD-OD_50F)  
//   rnods                N+diff resistor w/i Silicide <2  2T (RPDMYi*OD*NP-RPO*RH_OD-OD_50F)  
//   rnods_m              N+diff resistor w/i Silicide <2  3T (RPDMY1*OD*NP-RPO*RH_OD-OD_50F)  
//   rpodl                P+diff resistor w/i Silicide >=2 2T (RPDMYi*OD*PP-RPO*RH_OD-OD_50F)  
//   rpodl_m              P+diff resistor w/i Silicide >=2 3T (RPDMY1*OD*PP-RPO*RH_OD*NW-OD_50F)  
//   rpods                P+diff resistor w/i Silicide <2  2T (RPDMYi*OD*PP-RPO*RH_OD-OD_50F)  
//   rpods_m              P+diff resistor w/i Silicide <2  3T (RPDMY1*OD*PP-RPO*RH_OD*NW-OD_50F) 
//   rm1w               M1 resistor                     (RMDMY1*M1i) 
//   rm2w               M2 resistor                     (RMDMY2*M2i) 
//   rm3w               M3 resistor                     (RMDMY3*M3i) 
//   rm4w               M4 resistor                     (RMDMY4*M4i) 
//   rm5w               M5 resistor                     (RMDMY5*M5i) 
//   rm6w               M6 resistor                     (RMDMY6*M6i) 
//   rm7w               M7 resistor                     (RMDMY7*M7i) 
//   rm8w               M8 resistor                     (RMDMY8*M8i) 
//   rm9w               M9 resistor                     (RMDMY9*M9i) 
//   rmap            AP resistor                     (RMDMYAP*APi) 
//   C[cm]                cm capacitor device             (crown*p3*OD-RPO) 
//   C[cm_decap]    	cm capacitor device             (crown*p3*PO*NP*CLDD*EDRAM_DECAP-RPO) 
//   Q[npn10_mis]         NPN10X10 mis                    (DNW*BJTDMY*OD*NP*RPO-OD_50F)  
//   Q[npn5_mis]          NPN5X5 mis                      (DNW*BJTDMY*OD*NP*RPO-OD_50F)  
//   Q[npn2_mis]          NPN2X2 mis                      (DNW*BJTDMY*OD*NP*RPO-OD_50F)  
//   Q[npn1d6_mis]        NPN1d6X1d6 mis                  (DNW*BJTDMY*OD*NP*RPO-OD_50F)  
//   Q[npn10]             NPN10X10                        (DNW*BJTDMY*OD*NP*RPO-OD_50F*LVSDMYi)  
//   Q[npn5]              NPN5X5                          (DNW*BJTDMY*OD*NP*RPO-OD_50F*LVSDMYi)  
//   Q[npn2]              NPN2X2                          (DNW*BJTDMY*OD*NP*RPO-OD_50F*LVSDMYi)  
//   Q[npn1d6]            NPN1d6X1d6                      (DNW*BJTDMY*OD*NP*RPO-OD_50F*LVSDMYi)  
//   probe1               Probe M1                        (PROBEM1*M1i) 
//   probe2               Probe M2                        (PROBEM2*M2i) 
//   probe3               Probe M3                        (PROBEM3*M3i) 
//   probe4               Probe M4                        (PROBEM4*M4i) 
//   probe5               Probe M5                        (PROBEM5*M5i) 
//   probe6               Probe M6                        (PROBEM6*M6i) 
//   probe7               Probe M7                        (PROBEM7*M7i) 
// 
// 
//   cfmom_mx             cross cfmom wi poly shield      ((SR_DPOi*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)*MOMDMY22-RFDMY-MOMDMY27-MOMDMY31-MOMDMY32-MOMDMY33)  
//   cfmom_wo_rf          RF cfmom wi NW shield           ((NW*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)*RFDMY-MOMDMY22-MOMDMY27*MOMDMY31)  
//   cfmom_wo_rf          RF cfmom wi PW shield           ((PSUB*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)*RFDMY-MOMDMY22-MOMDMY27*MOMDMY32)  
//   cfmom_wo_rf          RF cfmom wi NTN shield          ((NT_N*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)*RFDMY-MOMDMY22-MOMDMY27*MOMDMY33)  
//   cfmom                cfmom wi poly shield            ((SR_DPOi*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)-RFDMY-MOMDMY22-MOMDMY27-MOMDMY31-MOMDMY32-MOMDMY33)  
//   cfmom_2t             cfmom 2T                        ((MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)-RFDMY-MOMDMY22*MOMDMY27-MOMDMY31-MOMDMY32-MOMDMY33) 
//   cfmom_mx_4t          cross cfmom 4T                  ((MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)*MOMDMY22-RFDMY*MOMDMY27-MOMDMY31-MOMDMY32-MOMDMY33) 
//   cfmom_wo             cfmom wi NW shield              ((NW*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)-RFDMY-MOMDMY22-MOMDMY27*MOMDMY31)  
//   cfmom_wo             cfmom wi PW shield              ((PSUB*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)-RFDMY-MOMDMY22-MOMDMY27*MOMDMY32)  
//   cfmom_wo             cfmom wi NTN shield             ((NT_N*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)-RFDMY-MOMDMY22-MOMDMY27*MOMDMY33-MOMDMY28)  
//   cfmom_wo             cfmom wi NTN shield - ptap ring ((NT_N*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)-RFDMY-MOMDMY22-MOMDMY27*MOMDMY33*MOMDMY28)  
//   cfmom_wo_mx          cross cfmom wi NW shield        ((NW*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)*MOMDMY22-RFDMY-MOMDMY27*MOMDMY31)  
//   cfmom_wo_mx          cross cfmom wi PW shield        ((PSUB*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)*MOMDMY22-RFDMY-MOMDMY27*MOMDMY32)  
//   cfmom_wo_mx          cross cfmom wi NTN shield       ((NT_N*MOMDMY100*M1i*MOMDMY1*M2i*MOMDMY2*M3i*MOMDMY3)*MOMDMY22-RFDMY-MOMDMY27*MOMDMY33)  
//   ndio_gated_mac       2T IO 1.8V gated N+/PW DIODE    (NGATE*GATED*OD18*PP-GATED3T)   
//   pdio_gated_mac       2T IO 1.8V gated P+/NW DIODE	(PGATE*GATED*OD18*NP-GATED3T*PMETAL) 
//   pdio_gated_mac_3t    3T IO 1.8V gated P+/NW DIODE	(PGATE*GATED*OD18*NP*GATED3T*PMETAL) 
// 
// 
// 
//   ----- ----------------------------- ---------------------------------- 
//   * OD      = ODI 
//   * PO      = POI 
//   * p3      = p3i 
//   * NGATE   = ODI * POI * NP - NW - NWLVT 
//   * PGATE   = ODI * POI * PP * NW - NWLVT 
//   * ALVTPGATE = ODI * POI * PP - NW * NWLVT 
//   * CTMDMYt  = CTMDMY_9 + CTMDMY_8 
// 
//   * VARGT   = ODI * POI * NP * NW * VARi 
//   * VAR10GT = ODI * POI * NP * VAR10 * VARi 
//   * VAR11GT = ODI * POI * NP * VAR11 * VARi 
//   * PVARGT  = ODI * POI * PP * PMETAL * VARi 
//   * PSUB    = BULK 
//   * ROM     = SRMD6 + HP_ROM 
//   * SRM_SP  = SRMD10 + SRMD11 + SRMD9 + SRMD15 + SRMD16 + SRMD17 + SRMD18 + SRMD19 + SRMD20 + SRMD66 + SRMD67 + SRMD70 + SRMD71 
//   * SRM_DP  = SRMD12 + SRMD13 
//   * SRM_RP  = SRMD9 + SRMD14i + SRMD15 + SRMD18 - VTL_N 
//   * SRM_LVTRP = SRMD15 * VTL_N 
//   * SRM_RPD = SRMD16 + SRMD20 + SRMD67 + SRMD70 + SRMD71 
//   * SRM2P   = SRMD9 + SRMD15 
//   * OD2     = OD18 + OD25 + OD33 + OD_50F  
//   * BJTDMY  = BJTDMYi 
//   * RPDMYi  = RPDMYai 
//   * RPDMY1  = RPDMYa1 
//   * VAR     = VARi 
//   * DIODMY  = DIODMYi 
//    
//////////////////////////////////////////////////////////////////////////////// 
// 
// USER NOTES :  
//  
// 1) Must execute LVS_install.pl to get correct LVS decks . 
// 
// 2) In general, MOS devices use macro model in N32/N28 process for accuracy.   
//    MOS devices use compact model if there is LVSDMY(208,1) layer. 
// 
// 3) For Calibre "EDTEXT" file, use .INCLUDE strings.txt.  
//        LAYOUT TEXT  "text string" [x] [y]  (layer num) (cell name)  
//  
// 4) Input layer 'OD' is defined as thin oxide (OD) area which would   
//    be drawn by one generic od mask or by seperated N+OD and P+OD.   
//    Remove layers in the 'OD' entries you don't want to use at   
//    layer definition block.  
//  
// 5) Default setting for property check is 0%. Users should check with  
//    IP/Designe providers for proper tolerance.  
//  
// 6) It's recommended to run Calibre LVS by hierarchical mode since false  
//    errors have been encountered by only flat mode option '-lvs'.  
//  
// 7) Default property resolution for ambiguity is set to 32. It could be  
//    necessary to increase this setting to resolve serious ambiguity.  
//    Uncomment statement 'LVS PROPERTY RESOLUTION MAXIMUM' in this deck  
//    to reset the capability of property resolution.  
//  
// 8) This deck does not extract MOS AS/AD property by default. To turn on the  
//    extraction of MOS AS/AD property, please uncomment the line  
//    "#DEFINE extract_as_ad". It would cause SEED PROMOTION, and pose  
//    much overhead on layout netlist extraction, erc checks, and lvs comparison.  
//  
// 9) Thin oxide layers PDIFF (7;0) and NDIFF (8;0) are not recommended to be  
//    used as tape out layers. Please use OD (6:0) for thin oxide tape out layers.  
//    If PDIFF (7;0) and NDIFF (8;0) layers are used, be sure to check MT (tape out)  
//    form for correctness after modifying this LVS deck (to pass LVS check)  
//  
// 10) This lvs command file does not support four resistors "rrwod,rrwsti,rdnwod,rdnwsti".  
//    Spice model defines them just for providing the sheet resistance of RWELL  
//    and DNW, not for the purpose of forming devices. We can not guarantee the resistance  
//    value if these four devices are applied in customer's design.  
//  
// 11) By default, the two diodes, PWDNW and DNWPSUB, are not extracted in this command   
//     file.  Please turn on the switch, "#DEFINE extract_dnwdio",  
//     to apply the extraction of these two diode.  
// 
// 12) By default, the nw-psub parasitic diode is not extracted. Please turn on the switch 
//     "#DEFINE extract_pnwdio" to apply the extraction of this diode. 
// 
// 13) Layer number 2000 - 2050 is saved for pseudo layer purpose.  
//     Please don't adopt these layers. 
// 
// 14) By default, VIRTUAL CONNECT COLON is set yes. Please set to "NO" as doing full-chip checking. 
// 
// 15) This file usually reads all datatype (0-255) for each layer defined. User customization datatype  
//     may be already included in the layer mapping of this deck.  
//     PLEASE ALWAYS REVIEW THE LAYER DEFINITION AND MODIFY IT FOR USERS' PARTICULAR LAYER USE. 
// 
//     For example, for CO_VIRT (30;30), VIA3_VIRT (53;200), and such kind of virtual layer, please refer  
//     above statement, they are treated as real CO, VIA3, and etc. Please refer LVS deck usage document  
//     to modify relative layers according to your need. 
//     * CO_VIRT (30;30), VIA3_VIRT (53;200) : LAYER FOR TSMC INTERNAL EVALUATION ONLY 
// 
//lvs_gen.pl version: 1.251
//calibre.pl version: 1.348

// LVS/RC_DFM switch option
// --------------------
#define DFM_RULE    //comment this line when this deck would like to exclude DFM rules
//#define LVS_DECK   //uncomment this line when this deck would be used as a LVS command file
#define CCI_DECK   //uncomment this line when this deck would be used as a CCI command file
#define ZERO_NRS_NRD    //comment this line when this deck would calculate NRS and NRD 
//#define SKIP_PSE   //uncomment this line to skip poly_space_effect
//#define SKIP_ODSE  //uncomment this line to skip od_space_effect
//#define SKIP_MBE   //uncomment this line to skip metal boundary effect
//#define FILTER_DGS_TIED_MOS // uncomment this line to filter MOS with D, G and S tied together (default filter MOS with all pins tied)
#define WELL_TO_PG_CHECK 
// Default is on. Turn on to highlight if nwell connects to ground or psub connects to power.
//#define GATE_TO_PG_CHECK 
// Default is off. Turn on to highlight if a mos gate directly connects to power or ground.
//#define PATH_CHECK 
// Default is off. Turn on to highlight if
//(1) nodes have a path to power but no path to ground
//(2) nodes have a path to ground but no path to power
//(3) nodes have no path to power or ground
//(4) nodes have no path to any label net
#define DS_TO_PG_CHECK 
// Default is on. Turn on to highlight if drain connects to power and source connects to ground.
#define FLOATING_WELL_CHECK 
// Default is on. Turn on to highlight if well does not connect to power or ground. 
//The nwell of moscaps and nwell-resistor are excluded.

VARIABLE WPED 5.556
VARIABLE PRESCALE 0.9

//#define NW_RING	//uncomment this line to enable the NW ring to separate the node from BULK

// POWER and GROUND name string variable setting
VARIABLE POWER_NAME  "VDD09A" "AHVDD"  "AHVDDB"  "AHVDDG"  "AHVDDR"  "AHVDDWELL"  "AVDD"  "AVDDB"  "AVDDBG"  "AVDDG"  "AVDDR"  "AVDWELL"  "DHVDD"  "DVDD"  "HVDDWELL"  "TACVDD"  "TAVD33"  "TAVD33PST"  "TAVDD"  "TAVDDPST"  "TVDD"  "VD33"  "VDD"  "VDD5V"  "VDDESD"  "VDDG"  "VDDM"  "VDDPST"  "VDDSA"  "VDWELL" 

VARIABLE GROUND_NAME  "VSS09A" "AGND"  "AHVSS"  "AHVSSB"  "AHVSSG"  "AHVSSR"  "AHVSSUB"  "AVSS"  "AVSSB"  "AVSSBG"  "AVSSG"  "AVSSR"  "AVSSUB"  "DHVSS"  "DVSS"  "GND"  "HVSSUB"  "TACVSS"  "TAVSS"  "TAVSSPST"  "TVSS"  "VS33"  "VSS"  "VSSESD"  "VSSG"  "VSSM"  "VSSPST"  "VSSUB" 

//#########################################################################
//# ENVIRONMENT SETTING                              
//#########################################################################
// LVS option
// --------------------
//#define extract_as_ad
//

//  RC_BLOCKING SETTING
LAYOUT CELL LIST pcells "cfmom*" "cfmom_2t*" "cfmom_mx*" "cfmom_mx_4t*" "cfmom_wo*" "cfmom_wo_mx*" "cfmom_wo_rf*" "cmoscap_rf*" "cmoscap_rf18*" "cmoscap_rf18_nw*" "cmoscap_rf25*" "cmoscap_rf25_nw*" "cmoscap_rf_nw*" "dmoscap_rf*" "dmoscap_rf18*" "dmoscap_rf18_nw*" "dmoscap_rf25*" "dmoscap_rf25_nw*" "dmoscap_rf_nw*" "moscap_rf*" "moscap_rf15_nw*" "moscap_rf18*" "moscap_rf18_nw*" "moscap_rf25*" "moscap_rf25_nw*" "moscap_rf_nw*" "ndio_hia_rf*" "nmos_rf_18_5t*" "nmos_rf_18_6t*" "nmos_rf_18_nw*" "nmos_rf_18ud15_5t*" "nmos_rf_18ud15_6t*" "nmos_rf_18ud15_nw*" "nmos_rf_25_5t*" "nmos_rf_25_6t*" "nmos_rf_25_nw*" "nmos_rf_25od33_5t*" "nmos_rf_25od33_6t*" "nmos_rf_25od33_nw*" "nmos_rf_25ud18_5t*" "nmos_rf_25ud18_6t*" "nmos_rf_25ud18_nw*" "nmos_rf_5t*" "nmos_rf_6t*" "nmos_rf_hvt_5t*" "nmos_rf_hvt_6t*" "nmos_rf_hvt_nw*" "nmos_rf_lvt_5t*" "nmos_rf_lvt_6t*" "nmos_rf_lvt_nw*" "nmos_rf_nw*" "nmos_rf_ulvt_5t*" "nmos_rf_ulvt_6t*" "nmos_rf_ulvt_nw*" "pcmoscap_rf*" "pcmoscap_rf18*" "pcmoscap_rf25*" "pdio_hia_rf*" "pmos_rf_18_5t*" "pmos_rf_18_nw*" "pmos_rf_18_nw_5t*" "pmos_rf_18ud15_5t*" "pmos_rf_18ud15_nw*" "pmos_rf_18ud15_nw_5t*" "pmos_rf_25_5t*" "pmos_rf_25_nw*" "pmos_rf_25_nw_5t*" "pmos_rf_25od33_5t*" "pmos_rf_25od33_nw*" "pmos_rf_25od33_nw_5t*" "pmos_rf_25ud18_5t*" "pmos_rf_25ud18_nw*" "pmos_rf_25ud18_nw_5t*" "pmos_rf_5t*" "pmos_rf_hvt_5t*" "pmos_rf_hvt_nw*" "pmos_rf_hvt_nw_5t*" "pmos_rf_lvt_5t*" "pmos_rf_lvt_nw*" "pmos_rf_lvt_nw_5t*" "pmos_rf_nw*" "pmos_rf_nw_5t*" "pmos_rf_ulvt_5t*" "pmos_rf_ulvt_nw*" "pmos_rf_ulvt_nw_5t*" "pmoscap_rf*" "pmoscap_rf18*" "rupolym_rf*" "spiral_std_mu_a28_dm*" "spiral_std_mu_z*" "spiral_std_mu_z_dm*" "spiral_sym*" "spiral_sym_ct_lc*" "spiral_sym_ct_mu_a28_a28_dm*" "spiral_sym_ct_mu_z_a*" "spiral_sym_ct_mu_z_a28_dm*" "spiral_sym_ct_rl*" "spiral_sym_mu_a28_dm*" "spiral_sym_mu_z*" "spiral_sym_mu_z_dm*" 
LAYOUT PRESERVE CELL LIST pcells

//#define HPL_PROCESS		// uncomment this line when the process is N28HPL
//#define HPM_PROCESS		// uncomment this line when the process is N28HPM
//#define HPP_PROCESS		// uncomment this line when the process is N28HP+
//#define HPC_PROCESS		// uncomment this line when the process is N28HPC
//#define HPC_PLUS_PROCESS	// uncomment this line when the process is N28HPC+
//#define ULP_PROCESS		// uncomment this line when the process is N28ULP
    

//#define MULTI_FINGER		// uncomment this line to do multifinger LVS compare.
#define HIGH_RESOLUTION	// uncomment this line to set resolution as 0.1nm, comment this line to set resolution as 1nm
//#define MIMCAP_TYPE	// uncomment this line to set mimcap inserted between Mtop-1 & Mtop-2 OR comment it for Mtop & Mtop-1  

//#define STD_LIB	        // uncomment this line to extend WPE boundary on STD cell. 

//#define SKIP_ODR		// uncomment this line to skip DFM OD Rounding( only valid when turn on DFM_LPE )
//#define SKIP_COP		// uncomment this line to skip DFM co placement effect( only valid when turn on DFM_LPE )
//#define SKIP_EFLOD            // uncomment this line to skip edge finger LOD effect( only valid when turn on DFM_LPE )
//#define FLICKER_CORNER_EXTRACTION   // uncomment this line to enable flicker corner extraction. 

#IFDEF FLICKER_CORNER_EXTRACTION
   #define MULTI_DEVICE_EXTRACTION    // avoid forgetting to turn on MULTI_DEVICE_EXTRACTION when user want to extract relative parameter. 
#ENDIF    

//#define extract_dnwdio        // Turn on to extract parasitic dnw diode
//#define extract_pnwdio        // Turn on to extract parasitic nw-psub diode

// n-well approximity parameter       
#IFDEF STD_LIB
VARIABLE	PMOS_TOP_EXT    0.335*1e-6	
VARIABLE	NMOS_BOT_EXT    0.38*1e-6	
VARIABLE	MOS_LR_EXT 	5.0*1e-6
// These values are provided by SCLP/TSMC, may be changed in the future
#ELSE
VARIABLE	PMOS_TOP_EXT 	0
VARIABLE	NMOS_BOT_EXT 	0
VARIABLE	MOS_LR_EXT 	0
#ENDIF

VARIABLE  MOS_Werr      0.0001  // Set the tolerance to 1e-6 to eliminate the numberic error
VARIABLE  MOS_Lerr  	0.0001  // Set the tolerance to 1e-6 to eliminate the numberic error
VARIABLE  DIO_Aerr  	0
VARIABLE  DIO_Lerr  	0
VARIABLE  DIO_Werr  	0
VARIABLE  DIOWELL_Aerr 	0
VARIABLE  BJT_Aerr	0
VARIABLE  RES_Werr  	0
VARIABLE  RES_Lerr  	0
VARIABLE  PROBE_Aerr    0
VARIABLE  PROBE_Perr    0
VARIABLE  RFMOS_Werr  	0
VARIABLE  RFMOS_Lerr  	0
VARIABLE  MOSCAP_Werr  	0
VARIABLE  MOSCAP_Lerr  	0 
VARIABLE  SPIRAL_Werr  	0
VARIABLE  SPIRAL_Serr  	0
VARIABLE  MOM_Werr  	0
VARIABLE  MOM_Serr  	0
VARIABLE  MOM_Lerr      0
VARIABLE  MIMCAP_Werr  	0
VARIABLE  MIMCAP_Lerr  	0
VARIABLE  MIN_MOM_LR    1
VARIABLE  MINGRID_RECT1            0.001
VARIABLE  MINGRID_RECT2            ( MINGRID_RECT1 * 2 )
VARIABLE  MINGRID_RECT4            ( MINGRID_RECT1 * 4 )
VARIABLE  MINGRID_RECT1_UNIT       ( MINGRID_RECT1 * 1e-6 )
VARIABLE  MINGRID_RECT1_01_UNIT    (( MINGRID_RECT1 + MINGRID_RECT1 * 0.01 ) * 1e-6)
//It's recommended to turn on the "FLATTEN CELL" option when dummy patterns are insered.
//======================================================================================
//FLATTEN CELL TOP_CELL_DM TOP_CELL_DODDPO  // fill in topcell name of dummy patterns.   
    
LAYOUT PRIMARY "ARRAY_CMP"
LAYOUT PATH "/raidj/user/t28/t28u25/etron/ADC_SAR4BIT/gds/ARRAY_CAP_FI.gds"
LAYOUT SYSTEM GDSII
//LAYOUT PATH "layout.net"
//LAYOUT SYSTEM SPICE

SOURCE PRIMARY "ARRAY_CMP"
SOURCE PATH "/raidj/user/t28/t28u25/etron/ADC_SAR4BIT/spice/ARRAY_CMP.sp"
SOURCE SYSTEM SPICE

DRC RESULTS DATABASE "./DRC/calibre_drc.db" ASCII // ASCII or GDSII
DRC SUMMARY REPORT "./DRC/calibre_drc.sum"

ERC RESULTS DATABASE "./LVS/calibre_erc.db" ASCII // ASCII or GDSII
ERC SUMMARY REPORT "./LVS/calibre_erc.sum"

LVS REPORT "./LVS/lvs.rep"
LVS REPORT MAXIMUM 1000 // ALL
MASK RESULTS DATABASE NONE //"mask.db"

#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
  MASK SVDB DIRECTORY "./LVS/svdb" QUERY CCI SI
#ELSE
  MASK SVDB DIRECTORY "./LVS/svdb" QUERY CCI
#ENDIF
#ENDIF

#IFDEF RC_DECK
  //MASK SVDB DIRECTORY "svdb" QUERY
#ENDIF

#IFDEF LVS_DECK
  MASK SVDB DIRECTORY "svdb" QUERY
#ENDIF

LVS ISOLATE SHORTS YES
LVS REPORT OPTION S

SOURCE CASE YES		 	// set case sensitivity for the source
LAYOUT CASE YES		 	// set case sensitivity for the layout
LVS COMPARE CASE NAMES TYPES	// set case sensititive during LVS comparison

#IFDEF HIGH_RESOLUTION
LAYOUT PRECISION 1000
PRECISION 10000
RESOLUTION 1
LAYOUT MAGNIFY AUTO 
#ELSE
PRECISION 1000
RESOLUTION 1
#ENDIF
UNIT LENGTH U

TEXT DEPTH PRIMARY
PORT DEPTH PRIMARY

FLAG SKEW YES
FLAG OFFGRID YES
//LAYOUT ALLOW DUPLICATE CELL YES

LVS SPICE PREFER PINS	         YES
LVS SPICE REPLICATE DEVICES      YES
LVS ABORT ON SUPPLY ERROR        NO
LVS ALL CAPACITOR PINS SWAPPABLE YES
LVS RECOGNIZE GATES              NONE
LVS IGNORE PORTS                 NO
LVS CHECK PORT NAMES             YES
LVS REDUCE PARALLEL BIPOLAR      YES
LVS REDUCE PARALLEL DIODES       YES
LVS REDUCE PARALLEL CAPACITORS   YES
LVS REDUCE PARALLEL RESISTORS    YES
LVS REDUCE SERIES RESISTORS      YES      //Smashes series resistors
LVS REDUCE SERIES CAPACITORS     YES      //Smashes series capacitors
LVS REDUCE SPLIT GATES           NO       //Smashes MOS split-gates.
//LVS FILTER UNUSED OPTION B D E O
//Strongly recommand to comment FILTER_DGS_TIED_MOS switch
//AG is to filter MOS with all pins tied together, AB is to filter MOS with D,G,S tied together
#IFNDEF FILTER_DGS_TIED_MOS
LVS FILTER UNUSED OPTION AG RC RE RG
#ELSE
LVS FILTER UNUSED OPTION AB RC RE RG
#ENDIF
LVS PROPERTY RESOLUTION MAXIMUM 65536 // ALL
LVS INJECT LOGIC NO
//User Define Device Reduce
//====================================================================

//LVS REDUCE nmoscap PARALLEL YES
//[ TOLERANCE lr 0 
//  EFFECTIVE wr, lr
//  lr = sum(lr)/count()
//  wr = sum(wr)
//]
//LVS REDUCE nmoscap_25 PARALLEL YES
//[ TOLERANCE lr 0 
//  EFFECTIVE wr, lr
//  lr = sum(lr)/count()
//  wr = sum(wr)
//]
//LVS REDUCE nmoscap_15 PARALLEL YES
//[ TOLERANCE lr 0 
//  EFFECTIVE wr, lr
//  lr = sum(lr)/count()
//  wr = sum(wr)
//]
//LVS REDUCE nmoscap_33 PARALLEL YES
//[ TOLERANCE lr 0 
//  EFFECTIVE wr, lr
//  lr = sum(lr)/count()
//  wr = sum(wr)
//]
//LVS REDUCE nmoscap_edc PARALLEL YES
//[ TOLERANCE lr 0 
//  EFFECTIVE wr, lr
//  lr = sum(lr)/count()
//  wr = sum(wr)
//]
//LVS REDUCE nmoscap_18 PARALLEL YES
//[ TOLERANCE lr 0 
//  EFFECTIVE wr, lr
//  lr = sum(lr)/count()
//  wr = sum(wr)
//]

 
LVS REDUCE rnwsti PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnwsti SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rnwsti_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnwsti_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]
LVS REDUCE rnwod PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnwod SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rnwod_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnwod_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

LVS REDUCE rupolym PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rupolym SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rnmg PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnmg SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rpmg PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rpmg SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rupolym_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rupolym_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]
LVS REDUCE rnmg_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnmg_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]
LVS REDUCE rpmg_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rpmg_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]
LVS REDUCE rpodwo PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rpodwo SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rnodwo PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnodwo SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rpodl PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rpodl SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rnodl PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnodl SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rpods PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rpods SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rnods PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rnods SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rm1w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm1w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rm2w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm2w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rm3w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm3w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rm4w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm4w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rm5w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm5w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rm6w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm6w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rm7w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm7w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rm8w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm8w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rm9w PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rm9w SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rmap PARALLEL YES
[ TOLERANCE l 0
  EFFECTIVE w,l
  l = sum(l)/count()
  w = sum(w)
]
LVS REDUCE rmap SERIES PLUS MINUS YES
[ TOLERANCE w 0
  effective w,l
  w = sum(w)/count()
  l = sum(l)
]
LVS REDUCE rpodwo_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rpodwo_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]
LVS REDUCE rnodwo_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnodwo_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]
LVS REDUCE rpodl_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rpodl_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]
LVS REDUCE rnodl_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnodl_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]
LVS REDUCE rpods_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rpods_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]
LVS REDUCE rnods_m PARALLEL YES
[ TOLERANCE lr 0
  EFFECTIVE wr,lr
  lr = sum(lr)/count()
  wr = sum(wr)
]
LVS REDUCE rnods_m SERIES PLUS MINUS YES
[ TOLERANCE wr 0
  effective wr,lr
  wr = sum(wr)/count()
  lr = sum(lr)
]

//================================================================
LAYOUT BASE LAYER ODI POI NW DNW MOMDMY100 

VIRTUAL CONNECT COLON YES

#IFDEF CCI_DECK
LVS PUSH DEVICES SEPARATE PROPERTIES YES
LVS CENTER DEVICE PINS YES
#ENDIF
LVS POWER NAME POWER_NAME 
LVS GROUND NAME GROUND_NAME 
//#############################################
//# MAPPING                                   #
//#############################################
LAYER DNW             1  //  Deep N-Well
LAYER NW              3  //  N-Well
LAYER ODI             6  //  Active area, thin oxide for device, or interconnection
LAYER DOD            300 
LAYER MAP 6 DATATYPE 1 300 //  Dummy OD
LAYER DRAIN          301 
LAYER MAP 6 DATATYPE 3 301 //  For RF MOS drain side using only
LAYER DMY_DINSA      302 
LAYER MAP 6 DATATYPE 33 302 //  dummy layer for RF MOS devices to set dinsaflag 1
LAYER SR_DOD         303 
LAYER MAP 6 DATATYPE 7 303 //  For dummy patterns
LAYER NT_N            11  //   Native NMOS blocked implant
LAYER ZVT            304 
LAYER MAP 11 DATATYPE 200 304 //  zero VT NMOS Dummy layer
LAYER ANVT           305 
LAYER MAP 11 DATATYPE 220 305 //  core native device without LDD
LAYER VTL_N           12  //  CORE Low VT NMOS
LAYER VTL_N25        306 
LAYER MAP 12 DATATYPE 2 306 //  Isolation and dedicated IOPW implant define at LVT NMOS(2.5V)
LAYER VTL_N_18       307 
LAYER MAP 79 DATATYPE 1 307 //  IO 1.8V LVT NMOS
LAYER CHVT_N         308 
LAYER MAP 79 DATATYPE 2 308 //  CRAM HVT NMOS
LAYER VTL_N_IO       309 
LAYER MAP 79 DATATYPE 3 309 //  IO LVT 1.8V ud 1.2V NMOS
LAYER VTL_P           13  //  CORE Low VT PMOS
LAYER VTL_P25        310 
LAYER MAP 13 DATATYPE 2 310 //  Isolation and dedicated IONW implant define at LVT PMOS(2.5V)
LAYER OD33            15  //  Thick Oxide (dual gate oxide) for 3.3V device
LAYER OD_12          311 
LAYER MAP 14 DATATYPE 1 311 //  FOR 1.2V core device 
LAYER OD15           312 
LAYER MAP 21 DATATYPE 0 312 //  FOR 1.5V device
LAYER OD15_18        313 
LAYER MAP 21 DATATYPE 3 313 //  FOR 1.5V device over_drive 1.8V
LAYER OD18            16  //  FOR 1.8V device
LAYER OD18_12        314 
LAYER MAP 16 DATATYPE 1 314 //  FOR 1.8V under_drive 1.2V 
LAYER OD18_15        315 
LAYER MAP 16 DATATYPE 4 315 //  FOR 1.8V under_drive 1.5V
LAYER POI             17  //  Gate poly, poly Si
LAYER CPO            316 
LAYER MAP 17 DATATYPE 11 316 //  Cut poly layer 
LAYER TPO2           317 
LAYER MAP 17 DATATYPE 12 317 //  Cut poly layer for TSMC SRAM team internal use
LAYER DPO            318 
LAYER MAP 17 DATATYPE 1 318 //  Dummy PO
LAYER SR_DPOi        319 
LAYER MAP 17 DATATYPE 7 319 //  Special Rule Dummy PO 
LAYER ILVT           320 
LAYER MAP 17 DATATYPE 51 320 //  for LP process ilvt devices
LAYER OD25           321 
LAYER MAP 18 DATATYPE 0 321 //  Thick Oxide (dual gate oxide) for 2.5V device
LAYER OD25_33        322 
LAYER MAP 18 DATATYPE 3 322 //  2.5V device over_drive 3.3V
LAYER OD25_18        323 
LAYER MAP 18 DATATYPE 4 323 //  2.5V device under_drive 1.8V
LAYER CLDD           324 
LAYER MAP 92 DATATYPE 0 324 // 
LAYER EDRAM_DECAP    325 
LAYER MAP 92 DATATYPE 1 325 // 
LAYER crown          326 
LAYER MAP 102 DATATYPE 0 326 // 
LAYER p3i             103  // 
LAYER p3d1           327 
LAYER MAP 103 DATATYPE 1 327 // 
LAYER OD1T            27  // 
LAYER CAP1TDMY        78  // 
LAYER blc             101  // 
LAYER PP              25  //  P+ S/D Implant
LAYER NP              26  //  N+ S/D Implant
LAYER RPO             29  //  Non silicided area definition
LAYER UDM            328 
LAYER MAP 29 DATATYPE 1 328 //  For UDM devices
LAYER CO              30  //  Contact Window
LAYER TCO            329 
LAYER MAP 30 DATATYPE 17 329 //  Dummy CO for SRAM process    
LAYER M1i             31  //  M1
LAYER M1_marker      330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 
LAYER MAP 31 DATATYPE 180 330
LAYER MAP 31 DATATYPE 190 331
LAYER MAP 31 DATATYPE 191 332
LAYER MAP 31 DATATYPE 200 333
LAYER MAP 31 DATATYPE 201 334
LAYER MAP 31 DATATYPE 202 335
LAYER MAP 31 DATATYPE 203 336
LAYER MAP 31 DATATYPE 204 337
LAYER MAP 31 DATATYPE 205 338
LAYER MAP 31 DATATYPE 206 339
LAYER MAP 31 DATATYPE 207 340
LAYER MAP 31 DATATYPE 208 341
LAYER MAP 31 DATATYPE 209 342
LAYER MAP 31 DATATYPE 210 343
LAYER MAP 31 DATATYPE 211 344
LAYER MAP 31 DATATYPE 212 345
LAYER MAP 31 DATATYPE 213 346
LAYER MAP 31 DATATYPE 214 347
LAYER MAP 31 DATATYPE 215 348
LAYER MAP 31 DATATYPE 216 349
LAYER MAP 31 DATATYPE 217 350
LAYER MAP 31 DATATYPE 218 351
LAYER MAP 31 DATATYPE 219 352
LAYER MAP 31 DATATYPE 220 353
LAYER MAP 31 DATATYPE 221 354
LAYER MAP 31 DATATYPE 222 355
LAYER MAP 31 DATATYPE 223 356
LAYER MAP 31 DATATYPE 224 357
LAYER MAP 31 DATATYPE 225 358
LAYER MAP 31 DATATYPE 229 359
LAYER MAP 31 DATATYPE 230 360
LAYER MAP 31 DATATYPE 231 361 //  Metal-1 marker layer
LAYER DUM1           362 363 
LAYER MAP 31 DATATYPE 1 362
LAYER MAP 31 DATATYPE 7 363 //  Dummy Metal-1
LAYER MB1            364 
LAYER MAP 31 DATATYPE 100 364 //  For backside metal
LAYER DMB1           365 
LAYER MAP 31 DATATYPE 101 365 //  For dummy backside metal
LAYER M2i             32  //  M2
LAYER M2_marker      366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 
LAYER MAP 32 DATATYPE 180 366
LAYER MAP 32 DATATYPE 190 367
LAYER MAP 32 DATATYPE 191 368
LAYER MAP 32 DATATYPE 200 369
LAYER MAP 32 DATATYPE 201 370
LAYER MAP 32 DATATYPE 202 371
LAYER MAP 32 DATATYPE 203 372
LAYER MAP 32 DATATYPE 204 373
LAYER MAP 32 DATATYPE 205 374
LAYER MAP 32 DATATYPE 206 375
LAYER MAP 32 DATATYPE 207 376
LAYER MAP 32 DATATYPE 208 377
LAYER MAP 32 DATATYPE 209 378
LAYER MAP 32 DATATYPE 210 379
LAYER MAP 32 DATATYPE 211 380
LAYER MAP 32 DATATYPE 212 381
LAYER MAP 32 DATATYPE 213 382
LAYER MAP 32 DATATYPE 214 383
LAYER MAP 32 DATATYPE 215 384
LAYER MAP 32 DATATYPE 216 385
LAYER MAP 32 DATATYPE 217 386
LAYER MAP 32 DATATYPE 218 387
LAYER MAP 32 DATATYPE 219 388
LAYER MAP 32 DATATYPE 220 389
LAYER MAP 32 DATATYPE 221 390
LAYER MAP 32 DATATYPE 222 391
LAYER MAP 32 DATATYPE 223 392
LAYER MAP 32 DATATYPE 224 393
LAYER MAP 32 DATATYPE 225 394
LAYER MAP 32 DATATYPE 229 395
LAYER MAP 32 DATATYPE 230 396
LAYER MAP 32 DATATYPE 231 397 //  Metal-2 marker layer
LAYER DUM2           398 399 400 401 402 403 404 405 406 
LAYER MAP 32 DATATYPE 1 398
LAYER MAP 32 DATATYPE 11 399
LAYER MAP 32 DATATYPE 21 400
LAYER MAP 32 DATATYPE 27 401
LAYER MAP 32 DATATYPE 31 402
LAYER MAP 32 DATATYPE 41 403
LAYER MAP 32 DATATYPE 61 404
LAYER MAP 32 DATATYPE 7 405
LAYER MAP 32 DATATYPE 81 406 //  Dummy Metal-2
LAYER M3i             33  //  M3
LAYER M3_marker      407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 
LAYER MAP 33 DATATYPE 180 407
LAYER MAP 33 DATATYPE 190 408
LAYER MAP 33 DATATYPE 191 409
LAYER MAP 33 DATATYPE 200 410
LAYER MAP 33 DATATYPE 201 411
LAYER MAP 33 DATATYPE 202 412
LAYER MAP 33 DATATYPE 203 413
LAYER MAP 33 DATATYPE 204 414
LAYER MAP 33 DATATYPE 205 415
LAYER MAP 33 DATATYPE 206 416
LAYER MAP 33 DATATYPE 207 417
LAYER MAP 33 DATATYPE 208 418
LAYER MAP 33 DATATYPE 209 419
LAYER MAP 33 DATATYPE 210 420
LAYER MAP 33 DATATYPE 211 421
LAYER MAP 33 DATATYPE 212 422
LAYER MAP 33 DATATYPE 213 423
LAYER MAP 33 DATATYPE 214 424
LAYER MAP 33 DATATYPE 215 425
LAYER MAP 33 DATATYPE 216 426
LAYER MAP 33 DATATYPE 217 427
LAYER MAP 33 DATATYPE 218 428
LAYER MAP 33 DATATYPE 219 429
LAYER MAP 33 DATATYPE 220 430
LAYER MAP 33 DATATYPE 221 431
LAYER MAP 33 DATATYPE 222 432
LAYER MAP 33 DATATYPE 223 433
LAYER MAP 33 DATATYPE 224 434
LAYER MAP 33 DATATYPE 225 435
LAYER MAP 33 DATATYPE 229 436
LAYER MAP 33 DATATYPE 230 437
LAYER MAP 33 DATATYPE 231 438 //  Metal-3 marker layer
LAYER DUM3           439 440 441 442 443 444 445 446 447 
LAYER MAP 33 DATATYPE 1 439
LAYER MAP 33 DATATYPE 11 440
LAYER MAP 33 DATATYPE 21 441
LAYER MAP 33 DATATYPE 27 442
LAYER MAP 33 DATATYPE 31 443
LAYER MAP 33 DATATYPE 41 444
LAYER MAP 33 DATATYPE 61 445
LAYER MAP 33 DATATYPE 7 446
LAYER MAP 33 DATATYPE 81 447 //  Dummy Metal-3
LAYER M4i             34  //  M4
LAYER M4_marker      448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 
LAYER MAP 34 DATATYPE 180 448
LAYER MAP 34 DATATYPE 190 449
LAYER MAP 34 DATATYPE 191 450
LAYER MAP 34 DATATYPE 200 451
LAYER MAP 34 DATATYPE 201 452
LAYER MAP 34 DATATYPE 202 453
LAYER MAP 34 DATATYPE 203 454
LAYER MAP 34 DATATYPE 204 455
LAYER MAP 34 DATATYPE 205 456
LAYER MAP 34 DATATYPE 206 457
LAYER MAP 34 DATATYPE 207 458
LAYER MAP 34 DATATYPE 208 459
LAYER MAP 34 DATATYPE 209 460
LAYER MAP 34 DATATYPE 210 461
LAYER MAP 34 DATATYPE 211 462
LAYER MAP 34 DATATYPE 212 463
LAYER MAP 34 DATATYPE 213 464
LAYER MAP 34 DATATYPE 214 465
LAYER MAP 34 DATATYPE 215 466
LAYER MAP 34 DATATYPE 216 467
LAYER MAP 34 DATATYPE 217 468
LAYER MAP 34 DATATYPE 218 469
LAYER MAP 34 DATATYPE 219 470
LAYER MAP 34 DATATYPE 220 471
LAYER MAP 34 DATATYPE 221 472
LAYER MAP 34 DATATYPE 222 473
LAYER MAP 34 DATATYPE 223 474
LAYER MAP 34 DATATYPE 224 475
LAYER MAP 34 DATATYPE 225 476
LAYER MAP 34 DATATYPE 229 477
LAYER MAP 34 DATATYPE 230 478
LAYER MAP 34 DATATYPE 231 479 //  Metal-4 marker layer
LAYER DUM4           480 481 482 483 484 485 486 487 488 
LAYER MAP 34 DATATYPE 1 480
LAYER MAP 34 DATATYPE 11 481
LAYER MAP 34 DATATYPE 21 482
LAYER MAP 34 DATATYPE 27 483
LAYER MAP 34 DATATYPE 31 484
LAYER MAP 34 DATATYPE 41 485
LAYER MAP 34 DATATYPE 61 486
LAYER MAP 34 DATATYPE 7 487
LAYER MAP 34 DATATYPE 81 488 //  Dummy Metal-4
LAYER M5i             35  //  M5
LAYER M5_marker      489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 
LAYER MAP 35 DATATYPE 180 489
LAYER MAP 35 DATATYPE 190 490
LAYER MAP 35 DATATYPE 191 491
LAYER MAP 35 DATATYPE 200 492
LAYER MAP 35 DATATYPE 201 493
LAYER MAP 35 DATATYPE 202 494
LAYER MAP 35 DATATYPE 203 495
LAYER MAP 35 DATATYPE 204 496
LAYER MAP 35 DATATYPE 205 497
LAYER MAP 35 DATATYPE 206 498
LAYER MAP 35 DATATYPE 207 499
LAYER MAP 35 DATATYPE 208 500
LAYER MAP 35 DATATYPE 209 501
LAYER MAP 35 DATATYPE 210 502
LAYER MAP 35 DATATYPE 211 503
LAYER MAP 35 DATATYPE 212 504
LAYER MAP 35 DATATYPE 213 505
LAYER MAP 35 DATATYPE 214 506
LAYER MAP 35 DATATYPE 215 507
LAYER MAP 35 DATATYPE 216 508
LAYER MAP 35 DATATYPE 217 509
LAYER MAP 35 DATATYPE 218 510
LAYER MAP 35 DATATYPE 219 511
LAYER MAP 35 DATATYPE 220 512
LAYER MAP 35 DATATYPE 221 513
LAYER MAP 35 DATATYPE 222 514
LAYER MAP 35 DATATYPE 223 515
LAYER MAP 35 DATATYPE 224 516
LAYER MAP 35 DATATYPE 225 517
LAYER MAP 35 DATATYPE 229 518
LAYER MAP 35 DATATYPE 230 519
LAYER MAP 35 DATATYPE 231 520 //  Metal-5 marker layer
LAYER DUM5           521 522 523 524 525 526 527 528 529 
LAYER MAP 35 DATATYPE 1 521
LAYER MAP 35 DATATYPE 11 522
LAYER MAP 35 DATATYPE 21 523
LAYER MAP 35 DATATYPE 27 524
LAYER MAP 35 DATATYPE 31 525
LAYER MAP 35 DATATYPE 41 526
LAYER MAP 35 DATATYPE 61 527
LAYER MAP 35 DATATYPE 7 528
LAYER MAP 35 DATATYPE 81 529 //  Dummy Metal-5
LAYER M6i             36  //  M6
LAYER M6_marker      530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 
LAYER MAP 36 DATATYPE 180 530
LAYER MAP 36 DATATYPE 190 531
LAYER MAP 36 DATATYPE 191 532
LAYER MAP 36 DATATYPE 200 533
LAYER MAP 36 DATATYPE 201 534
LAYER MAP 36 DATATYPE 202 535
LAYER MAP 36 DATATYPE 203 536
LAYER MAP 36 DATATYPE 204 537
LAYER MAP 36 DATATYPE 205 538
LAYER MAP 36 DATATYPE 206 539
LAYER MAP 36 DATATYPE 207 540
LAYER MAP 36 DATATYPE 208 541
LAYER MAP 36 DATATYPE 209 542
LAYER MAP 36 DATATYPE 210 543
LAYER MAP 36 DATATYPE 211 544
LAYER MAP 36 DATATYPE 212 545
LAYER MAP 36 DATATYPE 213 546
LAYER MAP 36 DATATYPE 214 547
LAYER MAP 36 DATATYPE 215 548
LAYER MAP 36 DATATYPE 216 549
LAYER MAP 36 DATATYPE 217 550
LAYER MAP 36 DATATYPE 218 551
LAYER MAP 36 DATATYPE 219 552
LAYER MAP 36 DATATYPE 220 553
LAYER MAP 36 DATATYPE 221 554
LAYER MAP 36 DATATYPE 222 555
LAYER MAP 36 DATATYPE 223 556
LAYER MAP 36 DATATYPE 224 557
LAYER MAP 36 DATATYPE 225 558
LAYER MAP 36 DATATYPE 229 559
LAYER MAP 36 DATATYPE 230 560
LAYER MAP 36 DATATYPE 231 561 //  Metal-6 marker layer
LAYER DUM6           562 563 564 565 566 567 568 569 570 
LAYER MAP 36 DATATYPE 1 562
LAYER MAP 36 DATATYPE 11 563
LAYER MAP 36 DATATYPE 21 564
LAYER MAP 36 DATATYPE 27 565
LAYER MAP 36 DATATYPE 31 566
LAYER MAP 36 DATATYPE 41 567
LAYER MAP 36 DATATYPE 61 568
LAYER MAP 36 DATATYPE 7 569
LAYER MAP 36 DATATYPE 81 570 //  Dummy Metal-6
LAYER M7i             37  //  M7
LAYER M7_marker      571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 
LAYER MAP 37 DATATYPE 180 571
LAYER MAP 37 DATATYPE 190 572
LAYER MAP 37 DATATYPE 191 573
LAYER MAP 37 DATATYPE 200 574
LAYER MAP 37 DATATYPE 201 575
LAYER MAP 37 DATATYPE 202 576
LAYER MAP 37 DATATYPE 203 577
LAYER MAP 37 DATATYPE 204 578
LAYER MAP 37 DATATYPE 205 579
LAYER MAP 37 DATATYPE 206 580
LAYER MAP 37 DATATYPE 207 581
LAYER MAP 37 DATATYPE 208 582
LAYER MAP 37 DATATYPE 209 583
LAYER MAP 37 DATATYPE 210 584
LAYER MAP 37 DATATYPE 211 585
LAYER MAP 37 DATATYPE 212 586
LAYER MAP 37 DATATYPE 213 587
LAYER MAP 37 DATATYPE 214 588
LAYER MAP 37 DATATYPE 215 589
LAYER MAP 37 DATATYPE 216 590
LAYER MAP 37 DATATYPE 217 591
LAYER MAP 37 DATATYPE 218 592
LAYER MAP 37 DATATYPE 219 593
LAYER MAP 37 DATATYPE 220 594
LAYER MAP 37 DATATYPE 221 595
LAYER MAP 37 DATATYPE 222 596
LAYER MAP 37 DATATYPE 223 597
LAYER MAP 37 DATATYPE 224 598
LAYER MAP 37 DATATYPE 225 599
LAYER MAP 37 DATATYPE 229 600
LAYER MAP 37 DATATYPE 230 601
LAYER MAP 37 DATATYPE 231 602 //  Metal-7 marker layer
LAYER DUM7           603 604 605 606 607 608 609 610 611 
LAYER MAP 37 DATATYPE 1 603
LAYER MAP 37 DATATYPE 11 604
LAYER MAP 37 DATATYPE 21 605
LAYER MAP 37 DATATYPE 27 606
LAYER MAP 37 DATATYPE 31 607
LAYER MAP 37 DATATYPE 41 608
LAYER MAP 37 DATATYPE 61 609
LAYER MAP 37 DATATYPE 7 610
LAYER MAP 37 DATATYPE 81 611 //  Dummy Metal-7
LAYER M8i             38  //  M8
LAYER M8_marker      612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 
LAYER MAP 38 DATATYPE 180 612
LAYER MAP 38 DATATYPE 190 613
LAYER MAP 38 DATATYPE 191 614
LAYER MAP 38 DATATYPE 200 615
LAYER MAP 38 DATATYPE 201 616
LAYER MAP 38 DATATYPE 202 617
LAYER MAP 38 DATATYPE 203 618
LAYER MAP 38 DATATYPE 204 619
LAYER MAP 38 DATATYPE 205 620
LAYER MAP 38 DATATYPE 206 621
LAYER MAP 38 DATATYPE 207 622
LAYER MAP 38 DATATYPE 208 623
LAYER MAP 38 DATATYPE 209 624
LAYER MAP 38 DATATYPE 210 625
LAYER MAP 38 DATATYPE 211 626
LAYER MAP 38 DATATYPE 212 627
LAYER MAP 38 DATATYPE 213 628
LAYER MAP 38 DATATYPE 214 629
LAYER MAP 38 DATATYPE 215 630
LAYER MAP 38 DATATYPE 216 631
LAYER MAP 38 DATATYPE 217 632
LAYER MAP 38 DATATYPE 218 633
LAYER MAP 38 DATATYPE 219 634
LAYER MAP 38 DATATYPE 220 635
LAYER MAP 38 DATATYPE 221 636
LAYER MAP 38 DATATYPE 222 637
LAYER MAP 38 DATATYPE 223 638
LAYER MAP 38 DATATYPE 224 639
LAYER MAP 38 DATATYPE 225 640
LAYER MAP 38 DATATYPE 229 641
LAYER MAP 38 DATATYPE 230 642
LAYER MAP 38 DATATYPE 231 643 //  Metal-8 marker layer
LAYER DUM8           644 645 646 647 648 649 650 651 652 
LAYER MAP 38 DATATYPE 1 644
LAYER MAP 38 DATATYPE 11 645
LAYER MAP 38 DATATYPE 21 646
LAYER MAP 38 DATATYPE 27 647
LAYER MAP 38 DATATYPE 31 648
LAYER MAP 38 DATATYPE 41 649
LAYER MAP 38 DATATYPE 61 650
LAYER MAP 38 DATATYPE 7 651
LAYER MAP 38 DATATYPE 81 652 //  Dummy Metal-8
LAYER M9i             39  //  M9
LAYER M9_marker      653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 
LAYER MAP 39 DATATYPE 180 653
LAYER MAP 39 DATATYPE 190 654
LAYER MAP 39 DATATYPE 191 655
LAYER MAP 39 DATATYPE 200 656
LAYER MAP 39 DATATYPE 201 657
LAYER MAP 39 DATATYPE 202 658
LAYER MAP 39 DATATYPE 203 659
LAYER MAP 39 DATATYPE 204 660
LAYER MAP 39 DATATYPE 205 661
LAYER MAP 39 DATATYPE 206 662
LAYER MAP 39 DATATYPE 207 663
LAYER MAP 39 DATATYPE 208 664
LAYER MAP 39 DATATYPE 209 665
LAYER MAP 39 DATATYPE 210 666
LAYER MAP 39 DATATYPE 211 667
LAYER MAP 39 DATATYPE 212 668
LAYER MAP 39 DATATYPE 213 669
LAYER MAP 39 DATATYPE 214 670
LAYER MAP 39 DATATYPE 215 671
LAYER MAP 39 DATATYPE 216 672
LAYER MAP 39 DATATYPE 217 673
LAYER MAP 39 DATATYPE 218 674
LAYER MAP 39 DATATYPE 219 675
LAYER MAP 39 DATATYPE 220 676
LAYER MAP 39 DATATYPE 221 677
LAYER MAP 39 DATATYPE 222 678
LAYER MAP 39 DATATYPE 223 679
LAYER MAP 39 DATATYPE 224 680
LAYER MAP 39 DATATYPE 225 681
LAYER MAP 39 DATATYPE 229 682
LAYER MAP 39 DATATYPE 230 683
LAYER MAP 39 DATATYPE 231 684 //  Metal-9 marker layer
LAYER DUM9           685 686 687 688 689 690 691 692 693 
LAYER MAP 39 DATATYPE 1 685
LAYER MAP 39 DATATYPE 11 686
LAYER MAP 39 DATATYPE 21 687
LAYER MAP 39 DATATYPE 27 688
LAYER MAP 39 DATATYPE 31 689
LAYER MAP 39 DATATYPE 41 690
LAYER MAP 39 DATATYPE 61 691
LAYER MAP 39 DATATYPE 7 692
LAYER MAP 39 DATATYPE 81 693 //  Dummy Metal-9
LAYER SRM            694 
LAYER MAP 50 DATATYPE 0 694 //  Use "SRM" to cover SRAM cell array to generate VTC_N, VTC_P mask.
LAYER SRMD3          695 
LAYER MAP 50 DATATYPE 3 695 // 
LAYER SRMD4          696 
LAYER MAP 50 DATATYPE 4 696 // 
LAYER SRMD5          697 
LAYER MAP 50 DATATYPE 5 697 //  Identify LOW LEAKAGE SRAM.
LAYER SRMD6          698 
LAYER MAP 50 DATATYPE 6 698 //  Identify ROM device.
LAYER SRMD9          699 
LAYER MAP 50 DATATYPE 9 699 //  Identify GRP device.
LAYER SRMD10         700 
LAYER MAP 50 DATATYPE 10 700 //  Identify SP_HD SRAM. 
LAYER SRMD11         701 
LAYER MAP 50 DATATYPE 11 701 //  Identify SP_HC SRAM.
LAYER SRMD12         702 
LAYER MAP 50 DATATYPE 12 702 //  Identify DP_HD SRAM.
LAYER SRMD13         703 
LAYER MAP 50 DATATYPE 13 703 //  Identify DP_HC SRAM.
LAYER SRMD14i        704 
LAYER MAP 50 DATATYPE 14 704 //  Identify LOW POWER SRAM.
LAYER SRMD15         705 
LAYER MAP 50 DATATYPE 15 705 //  Identify 2P_8T_HC_MUX SRAM.
LAYER SRMD16         706 
LAYER MAP 50 DATATYPE 16 706 //  Identify 2P_10T SRAM.
LAYER SRMD17         707 
LAYER MAP 50 DATATYPE 17 707 //  Identify SP_D243 SRAM.
LAYER SRMD18         708 
LAYER MAP 50 DATATYPE 18 708 //  Identify 2P_8T HC SRAM.
LAYER SRMD19         709 
LAYER MAP 50 DATATYPE 19 709 //  Identify SP_L1 SRAM.
LAYER SRMD20         710 
LAYER MAP 50 DATATYPE 20 710 //  Identify 3P_10T SRAM.
LAYER SRM_ULL        711 
LAYER MAP 50 DATATYPE 28 711 //  Identify ULL SRAM.
LAYER SRMD42         712 
LAYER MAP 50 DATATYPE 42 712 //  Identify 8T SRAM.
LAYER SRMD66         713 
LAYER MAP 50 DATATYPE 66 713 //  Identify ULP SRAM.
LAYER SRMD67         714 
LAYER MAP 50 DATATYPE 67 714 //  Identify ULP SRAM.
LAYER SRMD68         715 
LAYER MAP 50 DATATYPE 68 715 //  Identify IO_LL SRAM.
LAYER SRMD69         716 
LAYER MAP 50 DATATYPE 69 716 //  Identify TGO_LL SRAM.
LAYER SRMD70         717 
LAYER MAP 50 DATATYPE 70 717 //  Identify ULP SRAM.
LAYER SRMD71         718 
LAYER MAP 50 DATATYPE 71 718 //  Identify ULP SRAM.
LAYER VIA1i           51  //  Via12
LAYER VIA2i           52  //  Via23
LAYER VIA3i           53  //  Via34
LAYER VIA4i           54  //  Via45
LAYER VIA5i           55  //  Via56
LAYER VIA6i           56  //  Via67
LAYER VIA7i           57  //  Via78
LAYER VIA8i           58  //  Via89
LAYER VIA1i_VIRT     719 
LAYER MAP 51 DATATYPE 200 719 //  Virtual VIA1 mask OPC reference in ROM region.
LAYER VTH_N           67  //  CORE High VT DEVICE
LAYER VTH_P           68  //  CORE High VT DEVICE
LAYER HVD_N          720 
LAYER MAP 91 DATATYPE 1 720 //  HVNMOS
LAYER HVD_P          721 
LAYER MAP 91 DATATYPE 2 721 //  HVPMOS
LAYER EHVT_N         722 
LAYER MAP 91 DATATYPE 21 722 //  Used for Extra High-Vt diode N+/PW devices
LAYER EHVT_P         723 
LAYER MAP 91 DATATYPE 22 723 //  Used for Extra High-Vt diode P+/NW devices
LAYER DIODMY_L       724 
LAYER MAP 255 DATATYPE 53 724 //  Dummy layer for low leakage diodes.
LAYER AVT            725 
LAYER MAP 207 DATATYPE 10 725 //  Used for Analog Transistor devices.
LAYER VARi            143  //  layer to form Varactor
LAYER VAR10          726 
LAYER MAP 143 DATATYPE 10 726 //  layer to form dmoscap
LAYER VAR11          727 
LAYER MAP 143 DATATYPE 11 727 //  layer to form cmoscap
LAYER VAR14          728 
LAYER MAP 143 DATATYPE 14 728 //  layer to form stack cap moscap
LAYER CI_CAP         729 
LAYER MAP 143 DATATYPE 20 729 //  Well implant define at CI capacitor device
LAYER RH_OD          730 
LAYER MAP 117 DATATYPE 1 730 //  layer to form diffusion resistor
LAYER RH_PO          731 
LAYER MAP 117 DATATYPE 2 731 //  layer to form poly resistor
LAYER ESDIMP         732 
LAYER MAP 189 DATATYPE 0 732 //  Cover ESD dio region
LAYER ROISO_ROM      733 
LAYER MAP 84 DATATYPE 27 733 //  For ROM device to remove OD
LAYER HP_ROM         734 
LAYER MAP 84 DATATYPE 28 734 //  For HP ROM device
LAYER RVi            735 736 737 738 739 740 741 742 
LAYER MAP 85 DATATYPE 0 735
LAYER MAP 85 DATATYPE 1 736
LAYER MAP 85 DATATYPE >=101 <=179 737
LAYER MAP 85 DATATYPE >=181 <=189 738
LAYER MAP 85 DATATYPE >=191 <=199 739
LAYER MAP 85 DATATYPE 201 740
LAYER MAP 85 DATATYPE >=203 <=255 741
LAYER MAP 85 DATATYPE >=3 <=99 742 //  FOR AL RDL using
LAYER WRV            743 
LAYER MAP 85 DATATYPE 2 743 //  special RV layer
LAYER CBD            744 745 746 
LAYER MAP 169 DATATYPE >=0 <=99 744
LAYER MAP 169 DATATYPE >=101 <=179 745
LAYER MAP 169 DATATYPE >=181 <=255 746 //  FOR AL RDL using
LAYER CB             747 748 749 
LAYER MAP 76 DATATYPE >=0 <=99 747
LAYER MAP 76 DATATYPE >=101 <=179 748
LAYER MAP 76 DATATYPE >=181 <=255 749 //  Passivation opening for Bond Pad   
LAYER CB2i           750 751 752 753 
LAYER MAP 86 DATATYPE >=0 <=40 750
LAYER MAP 86 DATATYPE >=101 <=179 751
LAYER MAP 86 DATATYPE >=181 <=255 752
LAYER MAP 86 DATATYPE >=42 <=99 753 //  Passivation-2 opening for Bond Pad	
LAYER APi            754 755 756 757 758 759 760 761 762 763 764 
LAYER MAP 74 DATATYPE 0 754
LAYER MAP 74 DATATYPE 101 755
LAYER MAP 74 DATATYPE >=103 <=179 756
LAYER MAP 74 DATATYPE 12 757
LAYER MAP 74 DATATYPE >=15 <=40 758
LAYER MAP 74 DATATYPE >=181 <=189 759
LAYER MAP 74 DATATYPE >=194 <=199 760
LAYER MAP 74 DATATYPE >=2 <=9 761
LAYER MAP 74 DATATYPE >=204 <=229 762
LAYER MAP 74 DATATYPE >=232 <=255 763
LAYER MAP 74 DATATYPE >=42 <=99 764 //  AL RDL
LAYER APD            765 766 
LAYER MAP 74 DATATYPE 1 765
LAYER MAP 74 DATATYPE 41 766 //  Dummy AL RDL
LAYER UHVT_N         767 
LAYER MAP 93 DATATYPE 0 767 //  CORE ULTRA HIGH VT DEVICE
LAYER UHVT_P         768 
LAYER MAP 94 DATATYPE 0 768 //  CORE ULTRA HIGH VT DEVICE
LAYER VTUL_N         769 
LAYER MAP 151 DATATYPE 0 769 //  CORE ULTRA LOW VT DEVICE
LAYER eVTL_N         770 
LAYER MAP 151 DATATYPE 2 770 //  Extreme CORE Low VT NMOS
LAYER VTUL_P         771 
LAYER MAP 152 DATATYPE 0 771 //  CORE ULTRA LOW VT DEVICE
LAYER eVTL_P         772 
LAYER MAP 152 DATATYPE 2 772 //  Extreme CORE Low VT PMOS
LAYER RODMY           49  //  dummy layer for LVS to exclude OD area
LAYER BJTDMYi         110  //  BJT dummy layer for LVS
LAYER PSUB2           111  //  dummy layer for isolation power domains of PW
LAYER NWDMYi         773 
LAYER MAP 114 DATATYPE 0 773 //  dummy layer to form N-Well resistor
LAYER NWDMY1         774 
LAYER MAP 114 DATATYPE 1 774 //  dummy layer to form N-Well 3 terminals resistor
LAYER RPDMYai        775 
LAYER MAP 115 DATATYPE 0 775 //  dummy layer to form OD/POLY resistor (2-Terminals resistor)
LAYER RPDMYa1        776 
LAYER MAP 115 DATATYPE 1 776 //  dummy layer to form OD/POLY resistor (3-Terminals resistor)
LAYER DIODMYi         119  //  dummy layer to form diode
LAYER ESDHV          777 
LAYER MAP 147 DATATYPE 0 777 // 
LAYER MOMDMY0        778 
LAYER MAP 155 DATATYPE 0 778 //  dummy layer for RTMOM
LAYER MOMDMY1        779 
LAYER MAP 155 DATATYPE 1 779 //  dummy layer for MOM devices M1
LAYER MOMDMY2        780 
LAYER MAP 155 DATATYPE 2 780 //  dummy layer for MOM devices M2
LAYER MOMDMY3        781 
LAYER MAP 155 DATATYPE 3 781 //  dummy layer for MOM devices M3
LAYER MOMDMY4        782 
LAYER MAP 155 DATATYPE 4 782 //  dummy layer for MOM devices M4
LAYER MOMDMY5        783 
LAYER MAP 155 DATATYPE 5 783 //  dummy layer for MOM devices M5
LAYER MOMDMY6        784 
LAYER MAP 155 DATATYPE 6 784 //  dummy layer for MOM devices M6
LAYER MOMDMY7        785 
LAYER MAP 155 DATATYPE 7 785 //  dummy layer for MOM devices M7
LAYER MOMDMY8        786 
LAYER MAP 155 DATATYPE 8 786 //  dummy layer for MOM devices M8
LAYER MOMDMY21       787 
LAYER MAP 155 DATATYPE 21 787 //  dummy layer for dummy OD under MOM devices
LAYER MOMDMY22       788 
LAYER MAP 155 DATATYPE 22 788 //  dummy layer for multi-x-couple MOM
LAYER MOMDMY23       789 
LAYER MAP 155 DATATYPE 23 789 //  dummy layer for multi-x-couple MOM pin1 
LAYER MOMDMY24       790 
LAYER MAP 155 DATATYPE 24 790 //  dummy layer for multi-x-couple MOM pin2
LAYER MOMDMY25       791 
LAYER MAP 155 DATATYPE 25 791 //  dummy layer for multi-x-couple MOM plus1 & plus2 
LAYER MOMDMY27       792 
LAYER MAP 155 DATATYPE 27 792 //  dummy layer for MOM wo shield (2T) 
LAYER MOMDMY31       793 
LAYER MAP 155 DATATYPE 31 793 //  dummy layer for MOM wi NW shield
LAYER MOMDMY32       794 
LAYER MAP 155 DATATYPE 32 794 //  dummy layer for MOM wi PW shield
LAYER MOMDMY33       795 
LAYER MAP 155 DATATYPE 33 795 //  dummy layer for MOM wi NTN shield
LAYER MOMDMY28       796 
LAYER MAP 155 DATATYPE 28 796 //  dummy layer for MOM wi NTN shield - ptap_ring
LAYER MOMDMY100      797 
LAYER MAP 155 DATATYPE 100 797 //  dummy layer for FMOM
LAYER RFDMY          798 
LAYER MAP 161 DATATYPE 0 798 //  For RF Device using only ( some layout using datatype 1 )
LAYER RFDMY5T        799 
LAYER MAP 161 DATATYPE 3 799 //  For RF_5T Device using only
LAYER RFDMY6T        800 
LAYER MAP 161 DATATYPE 4 800 //  For RF_6T Device using only
LAYER OD_HG          801 
LAYER MAP 161 DATATYPE 11 801 //  For horizontal gate
LAYER RMDMY1         802 
LAYER MAP 116 DATATYPE 1 802 //  dummy layer to form M1 resistor
LAYER RMDMY2         803 
LAYER MAP 116 DATATYPE 2 803 //  dummy layer to form M2 resistor
LAYER RMDMY3         804 
LAYER MAP 116 DATATYPE 3 804 //  dummy layer to form M3 resistor
LAYER RMDMY4         805 
LAYER MAP 116 DATATYPE 4 805 //  dummy layer to form M4 resistor
LAYER RMDMY5         806 
LAYER MAP 116 DATATYPE 5 806 //  dummy layer to form M5 resistor
LAYER RMDMY6         807 
LAYER MAP 116 DATATYPE 6 807 //  dummy layer to form M6 resistor
LAYER RMDMY7         808 
LAYER MAP 116 DATATYPE 7 808 //  dummy layer to form M7 resistor
LAYER RMDMY8         809 
LAYER MAP 116 DATATYPE 8 809 //  dummy layer to form M8 resistor
LAYER RMDMY9         810 
LAYER MAP 116 DATATYPE 9 810 //  dummy layer to form M9 resistor
LAYER RMDMYAP        811 
LAYER MAP 116 DATATYPE 16 811 //  dummy layer to form AP resistor
LAYER SRAMDMY        812 
LAYER MAP 186 DATATYPE 0 812 //  SRAMDMY
LAYER SRAMPSGT       813 
LAYER MAP 186 DATATYPE 1 813 //  FOR SRAM NMOS passgate
LAYER SRAMCVSS       814 
LAYER MAP 186 DATATYPE 3 814 //  FOR CVSS SRAM
LAYER SRAMDMY6i      815 
LAYER MAP 186 DATATYPE 6 815 //  FOR WORD LINE DECORDER
LAYER INDDMYi        816 
LAYER MAP 144 DATATYPE 0 816 //  For RF Inductor devices
LAYER IND_RAD        817 
LAYER MAP 144 DATATYPE 30 817 //  For RF Inductor devices radious
LAYER IND_GDIS       818 
LAYER MAP 144 DATATYPE 31 818 //  For RF Inductor devices guardring distance
LAYER IND_NR         819 
LAYER MAP 144 DATATYPE 32 819 //  For RF Inductor devices nr 
LAYER IND_MP         820 
LAYER MAP 144 DATATYPE 33 820 //  For RF Inductor devices mimus pin 
LAYER IND_D4         821 
LAYER MAP 144 DATATYPE 34 821 //  For RF Inductor devices CTAP pin
LAYER IND_W          822 
LAYER MAP 144 DATATYPE 35 822 //  For RF Inductor devices width 
LAYER IND_S          823 
LAYER MAP 144 DATATYPE 36 823 //  For RF Inductor devices space 
LAYER IND_CTX        824 
LAYER MAP 144 DATATYPE 38 824 //  For RF Inductor devices ctx 
LAYER IND_CTW        825 
LAYER MAP 144 DATATYPE 39 825 //  For RF Inductor devices ctapw 
LAYER IND_PSW        826 
LAYER MAP 144 DATATYPE 40 826 //  For RF Inductor devices passw 
LAYER ctm            827 
LAYER MAP 77 DATATYPE 0 827 //  For MIM device top plate
LAYER cbm            828 
LAYER MAP 88 DATATYPE 0 828 //  For MIM device bottom plate
LAYER CTM_O          829 
LAYER MAP 77 DATATYPE 1 829 //  CTM open area in non-rectangular MIM region for HD MIM use.
LAYER CBM_O          830 
LAYER MAP 88 DATATYPE 1 830 //  CBM open area in non-rectangular MIM region for HD MIM use.
LAYER CTMDMY_1       831 
LAYER MAP 148 DATATYPE 1 831 //   dummy layer to form decap MiM 
LAYER CTMDMY_2       832 
LAYER MAP 148 DATATYPE 2 832 //   dummy layer to form decap MiM 
LAYER CTMDMY_3       833 
LAYER MAP 148 DATATYPE 3 833 //   dummy layer to form decap MiM 
LAYER CTMDMY_4       834 
LAYER MAP 148 DATATYPE 4 834 //   dummy layer to form decap MiM 
LAYER CTMDMY_5       835 
LAYER MAP 148 DATATYPE 5 835 //   dummy layer to form decap MiM 
LAYER CTMDMY_6       836 
LAYER MAP 148 DATATYPE 6 836 //   dummy layer to form decap MiM 
LAYER CTMDMY_7       837 
LAYER MAP 148 DATATYPE 7 837 //   dummy layer to form decap MiM 
LAYER CTMDMY_8       838 
LAYER MAP 148 DATATYPE 8 838 //   dummy layer to form decap MiM 
LAYER CTMDMY_9       839 
LAYER MAP 148 DATATYPE 9 839 //   dummy layer to form decap MiM 
LAYER CTMDMY_10      840 
LAYER MAP 148 DATATYPE 10 840 //   dummy layer to form decap MiM 
LAYER PROBEM1        841 
LAYER MAP 75 DATATYPE 1 841 //  M1 probe
LAYER PROBEM2        842 
LAYER MAP 75 DATATYPE 2 842 //  M2 probe
LAYER PROBEM3        843 
LAYER MAP 75 DATATYPE 3 843 //  M3 probe
LAYER PROBEM4        844 
LAYER MAP 75 DATATYPE 4 844 //  M4 probe
LAYER PROBEM5        845 
LAYER MAP 75 DATATYPE 5 845 //  M5 probe
LAYER PROBEM6        846 
LAYER MAP 75 DATATYPE 6 846 //  M6 probe
LAYER PROBEM7        847 
LAYER MAP 75 DATATYPE 7 847 //  M7 probe
LAYER PROBEAP        848 
LAYER MAP 75 DATATYPE 16 848 //  AP probe
LAYER DCO_LPP        849 
LAYER MAP 90 DATATYPE 1 849 //  For LP+ devices
LAYER OD5V           850 
LAYER MAP 154 DATATYPE 69 850 //  ESF3 5V device active area.
LAYER OD_50F         851 
LAYER MAP 154 DATATYPE 162 851 //  MONOS 5V device region
LAYER POFUSE         852 
LAYER MAP 156 DATATYPE 0 852 //  poly fuse thin part recognization
LAYER NILD           853 
LAYER MAP 183 DATATYPE 6 853 //  NILD CESL drawning layer
LAYER TCDDMY         854 
LAYER MAP 165 DATATYPE 1 854 //  Dummy layer to cover CPU pattern for TCD purpose  
LAYER ICOVL          855 
LAYER MAP 165 DATATYPE 3 855 //  Dummy layer for In Chip Overlay monoter pattern  
LAYER TCDDMY_H       856 
LAYER MAP 165 DATATYPE 4 856 //  Dummy layer for asymmetric Horizonal dummy pattern  
LAYER TCDDMY_V       857 
LAYER MAP 165 DATATYPE 5 857 //  Dummy layer for asymmetric Vertical dummy pattern
LAYER LVSDMYi        858 
LAYER MAP 208 DATATYPE 1 858 //  Dummy layer for compact model devices
LAYER LVSDMY2        859 
LAYER MAP 208 DATATYPE 2 859 //  Dummy layer for multi-finger devices
LAYER TN2            860 
LAYER MAP 208 DATATYPE 3 860 //  Dummy layer for sp devices
LAYER SR_ESD         861 
LAYER MAP 121 DATATYPE 0 861 //  Used for ESD related device 
LAYER NWLVT          862 
LAYER MAP 167 DATATYPE 1 862 //  Used for NW LVT device
LAYER HIA_DUMMY      863 
LAYER MAP 168 DATATYPE 0 863 //  Used for ESD diode
LAYER PMETAL         864 
LAYER MAP 205 DATATYPE 6 864 //  Used for N/P pattern process.
LAYER GB1i           865 
LAYER MAP 254 DATATYPE 1 865 //  Used for sizing up POI(17;0) 1nm    (after shrink)
LAYER GB1_5i         866 
LAYER MAP 254 DATATYPE 7 866 //  Used for sizing up POI(17;0) 1.5nm  (after shrink)
LAYER GB_D2i         867 
LAYER MAP 254 DATATYPE 102 867 //  Used for sizing down POI(17;0) 2nm  (after shrink)
LAYER SPS1i          868 
LAYER MAP 254 DATATYPE 201 868 //  Used for sizing down POI(17;0) 2nm  (after shrink)
LAYER SPS2i          869 
LAYER MAP 254 DATATYPE 202 869 //  Used for sizing down POI(17;0) 2nm  (after shrink)
LAYER GATED          870 
LAYER MAP 255 DATATYPE 3 870 //   GATED layer for define gated-diode region, it must cover whole active region 
LAYER GATED3T        871 
LAYER MAP 255 DATATYPE 10 871 //   For 3T GDIO device usage, it must cover whole active region
LAYER GATED50        872 
LAYER MAP 255 DATATYPE 50 872 //   For 2T n-type GDIO device usage, it must cover whole active region
LAYER GATED51        873 
LAYER MAP 255 DATATYPE 51 873 //   For 3T p-type GDIO device usage, it must cover whole active region
LAYER UBM            874 
LAYER MAP 170 DATATYPE 0 874 //  UBM layer
LAYER CU_PPI         875 
LAYER MAP 74 DATATYPE 10 875 //  CU_PPI layer between UBM and AP
LAYER PM1            876 
LAYER MAP 5 DATATYPE 1 876 //  via layer between CU_PPI and AP
LAYER PM2            877 
LAYER MAP 5 DATATYPE 2 877 //  via layer between UBM and CU_PPI
LAYER PM0            878 
LAYER MAP 5 DATATYPE 10 878 //  via layer between AP and PM1
LAYER IND_TEXT       879
LAYER MAP 144 TEXTTYPE 37 879
TEXT LAYER 126 ATTACH 126 AP
PORT LAYER TEXT 126
TEXT LAYER 131 ATTACH 131 M1
PORT LAYER TEXT 131
TEXT LAYER 132 ATTACH 132 M2
PORT LAYER TEXT 132
TEXT LAYER 133 ATTACH 133 M3
PORT LAYER TEXT 133
TEXT LAYER 134 ATTACH 134 M4
PORT LAYER TEXT 134
TEXT LAYER 135 ATTACH 135 M5
PORT LAYER TEXT 135
TEXT LAYER 136 ATTACH 136 M6
PORT LAYER TEXT 136
TEXT LAYER 137 ATTACH 137 M7
PORT LAYER TEXT 137
TEXT LAYER 138 ATTACH 138 M8
PORT LAYER TEXT 138
TEXT LAYER 139 ATTACH 139 M9
PORT LAYER TEXT 139
TEXT LAYER 149 ATTACH 149 n_poly
PORT LAYER TEXT 149
TEXT LAYER 149 ATTACH 149 p_poly
PORT LAYER TEXT 149
LAYER TAP_text       880
LAYER MAP 127 TEXTTYPE 74 880
TEXT LAYER 880 ATTACH 880 AP
LAYER TM1_text       881
LAYER MAP 127 TEXTTYPE 31 881
TEXT LAYER 881 ATTACH 881 M1
LAYER TM2_text       882
LAYER MAP 127 TEXTTYPE 32 882
TEXT LAYER 882 ATTACH 882 M2
LAYER TM3_text       883
LAYER MAP 127 TEXTTYPE 33 883
TEXT LAYER 883 ATTACH 883 M3
LAYER TM4_text       884
LAYER MAP 127 TEXTTYPE 34 884
TEXT LAYER 884 ATTACH 884 M4
LAYER TM5_text       885
LAYER MAP 127 TEXTTYPE 35 885
TEXT LAYER 885 ATTACH 885 M5
LAYER TM6_text       886
LAYER MAP 127 TEXTTYPE 36 886
TEXT LAYER 886 ATTACH 886 M6
LAYER TM7_text       887
LAYER MAP 127 TEXTTYPE 37 887
TEXT LAYER 887 ATTACH 887 M7
LAYER TM8_text       888
LAYER MAP 127 TEXTTYPE 38 888
TEXT LAYER 888 ATTACH 888 M8
LAYER TM9_text       889
LAYER MAP 127 TEXTTYPE 39 889
TEXT LAYER 889 ATTACH 889 M9
LAYER Tpoly_text     890 
LAYER MAP 127 TEXTTYPE 17 890
TEXT LAYER 890 ATTACH 890 n_poly
TEXT LAYER 890 ATTACH 890 p_poly
//#############################################
//# LOGIC OPERATION POOL                      #
//#############################################

//Form BULK layer
DRC:1 = EXTENT
BULK  = SIZE DRC:1 BY 0.005

//* Define device -- nmos nch_mac
poly_a = POI OR SR_DPOi 

#IFNDEF CCI_DECK
  poly = copy poly_cci
#ENDIF

GB1 = COPY GB1i 
PO_GB1a = poly_a AND GB1 
#IFDEF HIGH_RESOLUTION
	PO_GB1b = SIZE PO_GB1a BY 0.0011
#ELSE
	PO_GB1b = SIZE PO_GB1a BY 0.001
#ENDIF
POI_bias1 = poly_a OR PO_GB1b 
GB1_5 = COPY GB1_5i 
PO_GB1_5a = POI_bias1 AND GB1_5 
#IFDEF HPC_PLUS_PROCESS
    #IFDEF HIGH_RESOLUTION
	    PO_GB1_5b = SIZE PO_GB1_5a BY 0.0011
    #ELSE
	    PO_GB1_5b = SIZE PO_GB1_5a BY 0.001
    #ENDIF
#ELSE
  #IFDEF ULP_PROCESS
    #IFDEF HIGH_RESOLUTION
	    PO_GB1_5b = SIZE PO_GB1_5a BY 0.0011
    #ELSE
	    PO_GB1_5b = SIZE PO_GB1_5a BY 0.001
    #ENDIF
  #ELSE
    #IFDEF HIGH_RESOLUTION
	    PO_GB1_5b = SIZE PO_GB1_5a BY 0.0017
    #ELSE
	    PO_GB1_5b = SIZE PO_GB1_5a BY 0.002
    #ENDIF
  #ENDIF
#ENDIF
POI_bias2 = POI_bias1 OR PO_GB1_5b 
SRAMDMY6 = COPY SRAMDMY6i 
PO_WLDa = POI_bias2 NOT SRAMDMY6 
#IFDEF HIGH_RESOLUTION
	PO_WLDb = SIZE PO_WLDa BY 0.0022
#ELSE
	PO_WLDb = SIZE PO_WLDa BY 0.002
#ENDIF
PO_WLDc = POI_bias2 AND SRAMDMY6 
PO_WLDd = PO_WLDb OR PO_WLDc 
#IFDEF HIGH_RESOLUTION
	POI_bias3 = SIZE PO_WLDd BY -0.0022
#ELSE
	POI_bias3 = SIZE PO_WLDd BY -0.002
#ENDIF
SPS1 = COPY SPS1i 
GB_D2_1 = GB_D2i OR SPS1 
SPS2 = COPY SPS2i 
GB_D2 = GB_D2_1 OR SPS2 
PO_GB_D2a = POI_bias3 NOT GB_D2 
#IFDEF HIGH_RESOLUTION
	PO_GB_D2b = SIZE PO_GB_D2a BY 0.0022
#ELSE
	PO_GB_D2b = SIZE PO_GB_D2a BY 0.002
#ENDIF
PO_GB_D2c = POI_bias3 AND GB_D2 
PO_GB_D2d = PO_GB_D2b OR PO_GB_D2c 
#IFDEF HIGH_RESOLUTION
	POI_CD = SIZE PO_GB_D2d BY -0.0022
#ELSE
	POI_CD = SIZE PO_GB_D2d BY -0.002
#ENDIF
POy = POI_CD OR DPO 
POx1 = POy NOT CPO 
POx = POx1 NOT TPO2 
SR_DPO_cut = SR_DPOi NOT CPO 
SR_DPO = POx INTERACT SR_DPO_cut 
PO = POx NOT SR_DPO 
rpolywo0 = PO AND RH_PO 
rpolywo1 = COPY rpolywo0 
rpolywo2 = rpolywo1 AND RPO 
rpolywo3 = rpolywo2 INTERACT POI 
RPDMYi = RPDMYai NOT SR_DOD 
RPDMY1 = RPDMYa1 NOT SR_DOD 
RPDMY = RPDMYi OR RPDMY1 
ODz = ODI OR DOD 
OD = ODz OR SR_DOD 
RODMY_srm1 = SRM OR SRMD9 
RODMY_srm2 = RODMY_srm1 OR SRMD14i 
RODMY_srm3 = RODMY_srm2 OR SRMD15 
RODMY_srm4 = RODMY_srm3 OR SRMD16 
RODMY_srm5 = RODMY_srm4 OR SRMD18 
RODMY_srm6 = RODMY_srm5 OR SRMD20 
RODMY_srm7 = RODMY_srm6 OR SRMD3 
RODMY_srm8 = RODMY_srm7 OR SRMD4 
RODMY_srm9 = RODMY_srm8 OR SRMD68 
RODMY_srm10 = RODMY_srm9 OR SRMD66 
RODMY_srm11 = RODMY_srm10 OR SRMD67 
RODMY_srm12 = RODMY_srm11 OR SRMD69 
RODMY_srm13 = RODMY_srm12 OR SRMD70 
RODMY_srm14 = RODMY_srm13 OR SRMD71 
RODMY_srm15 = RODMY_srm14 OR SRAMDMY 
RODMY_srm = RODMY AND RODMY_srm15 
diffa1 = OD NOT RODMY_srm 
ROISO_ROM_eff = ROISO_ROM AND SRMD6 
diffa = diffa1 NOT ROISO_ROM_eff 
diff = diffa INTERACT CO 
rp1 = RPDMY NOT INTERACT diff 
p1rdum = rp1 INTERACT PO  //  poly1 resistor dummy
rpolywo = rpolywo3 INTERACT p1rdum 
poly1 = PO NOT rpolywo 
rpoly1 = rpolywo1 AND p1rdum 
rpoly = rpoly1 NOT INTERACT RPO 
poly3a = poly1 NOT rpoly 
poly21 = poly3a OR SR_DPO 
poly_rf1 = poly21 INTERACT CO 
poly_rf2 = poly_rf1 INTERACT DRAIN 
poly_rf_hv1 = poly_rf1 INTERACT HVD_N 
poly_rf_hv2 = poly_rf_hv1 AND RFDMY 
poly_rf = poly_rf2 OR poly_rf_hv2 
poly_1 = poly21 NOT poly_rf 
HVD_NP = HVD_N OR HVD_P 
HVD_NP_not_poly = HVD_NP NOT poly_1 
poly_hv_dpo = poly_1 INTERACT HVD_NP_not_poly == 2
poly_2 = poly_1 NOT poly_hv_dpo 
metal_interface_edge = PMETAL INSIDE EDGE poly_1 
metal_interface_1 = EXPAND EDGE metal_interface_edge INSIDE BY 0.002
metal_interface_2 = EXPAND EDGE metal_interface_edge OUTSIDE BY 0.002
metal_interface = metal_interface_1 OR metal_interface_2 
poly_cci = poly_2 NOT metal_interface 
realpo1 = poly_cci NOT SR_DPO 
realpo2 = realpo1 OR poly_rf 
dumpo1 = poly_cci INSIDE diff 
dumpo2 = dumpo1 NOT INTERACT CO 
realpo = realpo2 NOT dumpo2 
rodwo0 = diff AND RH_OD 
rodwo1 = COPY rodwo0 
rodwo2 = rodwo1 AND RPO 
rodwo3 = rodwo2 INTERACT ODI 
drdum = RPDMY INTERACT diff  //  diff resistor dummy
rodwo = rodwo3 INTERACT drdum 
mdiff1 = diff NOT rodwo 
rod1 = rodwo1 AND drdum 
rod = rod1 NOT INTERACT RPO 
mdiff = mdiff1 NOT rod 
gate1 = realpo AND mdiff 
SRM_all = SRM OR SRMD68 
gate_a1 = gate1 NOT SRM_all 
gate_b = gate_a1 NOT GATED 
LVSDMYa = SIZE LVSDMYi BY 0.005 
LVSDMY = LVSDMYi NOT LVSDMYa 
gate_mac = gate_b NOT LVSDMY 
gate_no_mac = gate_b AND LVSDMY 
gate_a = gate_mac OR gate_no_mac 
gate = gate_a NOT RFDMY 
NWDMY = NWDMYi OR NWDMY1 
nxwell1 = NW NOT NWDMY 
nxwell = nxwell1 OR NWLVT  //  define N_well region
gatennw = gate NOT nxwell  //  gate not inside nwell ( nmos gate )
tngate_1 = gatennw AND NP 
udm_rpo = RPO AND UDM 
tngate0 = tngate_1 NOT INTERACT udm_rpo 
tngate1 = COPY tngate0 
tngate2 = tngate1 NOT OD25 
tngate31 = tngate2 NOT OD_50F 
tngate3 = tngate31 NOT OD33 
tngate41 = tngate3 NOT OD18 
tngate4 = tngate41 NOT OD5V 
tngate5 = tngate4 NOT OD_12 
tngate6 = tngate5 NOT NT_N 
ngate1 = tngate6 NOT VTL_N 
ngate2 = ngate1 NOT VTH_N 
ngate3a = ngate2 NOT VTUL_N 
ngate3b = ngate3a NOT eVTL_N 
ngate3c = ngate3b NOT CHVT_N 
ngate3 = ngate3c NOT UHVT_N 
ngate4 = ngate3 NOT OD1T 
ngate5 = ngate4 NOT ILVT 
Empty1 = SIZE ODI BY 0.005 
Empty = ODI NOT Empty1 
DCO = COPY Empty 
ngate6 = ngate5 NOT DCO 
srm_rp1 = SRMD9 OR SRMD14i 
srm_rp2 = srm_rp1 OR SRMD15 
srm_rp3 = srm_rp2 OR SRMD18 
srm_rp = srm_rp3 NOT VTL_N  //  nch_rpsr
ngate7a = ngate6 NOT srm_rp 
srm_rpd1 = SRMD16 OR SRMD20 
srm_rpd2 = srm_rpd1 OR SRMD67 
srm_rpd3 = srm_rpd2 OR SRMD70 
srm_rpd = srm_rpd3 OR SRMD71 
ngate7b = ngate7a NOT srm_rpd 
ngate7 = ngate7b NOT OD15 
ngate8 = ngate7 NOT SR_ESD 
ngate9 = COPY ngate8 
ngate10 = COPY ngate9 
POSall = COPY Empty 
ngate11 = ngate10 NOT POSall 
ngate12a = ngate11 NOT OD_HG 
ngate12 = ngate12a NOT OD15 
ngate13 = ngate12 NOT HP_ROM 
ngate14 = ngate13 NOT TN2 
ngate15 = ngate14 NOT EHVT_N 
ngate_mac = ngate15 NOT AVT  //   CORE NMOS MAC

//***** Define connectivity/via layer -- psub ****
ppsub1 = BULK NOT NW 
ppsub = ppsub1 NOT NWLVT  //  define total p_sub region
psub2s = SIZE PSUB2 BY 0.01 
psubband = psub2s NOT PSUB2  //   psub separator band (doughnut).
psub = ppsub NOT psubband 

//* Define device -- pmos pch_mac
gatenw1 = gate AND nxwell  //  gate inside nxwell ( NW & NWLVT )	
gatenw = gatenw1 NOT NWLVT  //  gate inside nwell ( pmos gate )
pgate_imp = PP AND PMETAL 
tpgate0 = gatenw AND pgate_imp 
tpgate1 = tpgate0 NOT INTERACT udm_rpo 
tpgate21 = tpgate1 NOT OD25 
tpgate2 = tpgate21 NOT OD5V 
tpgate31 = tpgate2 NOT OD_50F 
tpgate3 = tpgate31 NOT OD33 
tpgate4 = tpgate3 NOT OD18 
tpgate5 = tpgate4 NOT OD_12 
tpgate6 = COPY tpgate5 
pgate1 = tpgate6 NOT VTL_P 
pgate2 = pgate1 NOT VTH_P 
pgate3a = pgate2 NOT VTUL_P 
pgate3b = pgate3a NOT eVTL_P 
pgate3c = pgate3b NOT UHVT_P 
pgate3d = pgate3c NOT EHVT_P 
pgate3 = pgate3d NOT AVT 
pgate4 = pgate3 NOT ILVT 
pgate5 = pgate4 NOT OD1T 
pgate6 = pgate5 NOT DCO 
pgate7 = COPY pgate6 
pgate8 = COPY pgate7 
pgate9 = pgate8 NOT POSall 
pgate10a = pgate9 NOT OD_HG 
pgate10 = pgate10a NOT OD15 
pgate_mac = pgate10 NOT TN2  //  CORE PMOS MAC

//* Define device -- nmos nch_hg_mac
ngate_hg_org = ngate11 AND OD_HG 
ngate_hg_mac = ngate_hg_org NOT LVSDMY  //  CORE horizontal NMOS MAC

//* Define device -- pmos pch_hg_mac
pgate_hg_org = pgate9 AND OD_HG 
pgate_hg_mac = pgate_hg_org NOT LVSDMY  //  CORE horizontal PMOS MAC

//* Define device -- nmos nch_lvt_mac
nlvgate_org1a = tngate6 AND VTL_N  //  CORE LOW_VT NMOS in LOGIC
srm_lvtrp = srm_rp3 AND VTL_N  //  nch_lvtrpsr
nlvgate_org1 = nlvgate_org1a NOT srm_lvtrp 
nlvgate_org2 = nlvgate_org1 NOT DCO 
nlvgate_org3 = nlvgate_org2 NOT POSall 
nlvgate_org = nlvgate_org3 NOT OD_HG 
nlvgate_mac = COPY nlvgate_org  //  CORE LOW_VT NMOS MAC

//* Define device -- nmos nch_na_mac
nlgate1 = tngate5 AND NT_N 
nlgate2 = nlgate1 NOT VTL_N 
nlgate3 = nlgate2 NOT VTH_N 
nlgate4 = nlgate3 NOT VTUL_N 
nlgate5 = nlgate4 NOT DNW 
nlgate6 = nlgate5 NOT ILVT 
nlgate7a = nlgate6 NOT DCO 
nlgate7 = nlgate7a NOT OD15 
nlgate8 = nlgate7 NOT ZVT 
nlgate9 = nlgate8 NOT ANVT 
nlgate_mac = nlgate9 NOT LVSDMY  //  CORE Native Devies MAC

//* Define device -- nmos nch_hia_mac
ngate_hia_org = ngate7 AND SR_ESD 
ngate_hia_mac = ngate_hia_org NOT LVSDMY  //  CORE ESD NMOS MAC

//* Define device -- nmos nch_hia25_mac
ngate_25a = tngate1 AND OD25 
ngate_25b = ngate_25a NOT NT_N 
ngate_hia25_org = ngate_25b AND SR_ESD 
ngate_hia25_mac = ngate_hia25_org NOT LVSDMY  //  2.5v ESD NMOS MAC

//* Define device -- nmos nch_25ud18_mac
ngate_25c = ngate_25b NOT SR_ESD 
ngate_25_org = ngate_25c NOT VTL_N 
ngate_25ud1 = ngate_25_org AND OD25_18 
ngate_25ud_mac = ngate_25ud1 NOT LVSDMY  //  2.5v NMOS under_drive 1.8v MAC

//* Define device -- nmos nch_25od33_mac
ngate_25od1 = ngate_25_org AND OD25_33 
ngate_25od_mac = ngate_25od1 NOT LVSDMY  //  2.5v NMOS over_drive 3.3v MAC

//* Define device -- nmos nch_25_mac
ngate_25z = ngate_25_org NOT ngate_25ud1 
ngate_25y = ngate_25z NOT ngate_25od1 
ngate_25_mac = ngate_25y NOT LVSDMY  //  2.5v NMOS MAC

//* Define device -- nmos nch_na25_mac
ngate_25na1 = ngate_25a AND NT_N 
ngate_25na2 = ngate_25na1 NOT VTL_N 
ngate_25na_org = ngate_25na2 NOT DNW 
ngate_25naud1 = ngate_25na_org AND OD25_18 
ngate_25naz = ngate_25na_org NOT ngate_25naud1 
ngate_25naod1 = ngate_25na_org AND OD25_33 
ngate_25nay = ngate_25naz NOT ngate_25naod1 
ngate_25na_mac = ngate_25nay NOT LVSDMY  //  2.5v Native NMOS MAC

//* Define device -- nmos nch_hvt_mac
nhvgate1a = tngate6 AND VTH_N 
nhvgate1 = COPY nhvgate1a 
nhvgate2 = nhvgate1 NOT DCO 
nhvgate3 = nhvgate2 NOT POSall 
nhvgate_org = nhvgate3 NOT OD_HG 
nhvgate_mac1 = nhvgate_org NOT HP_ROM 
nhvgate_mac = nhvgate_mac1 NOT srm_rp  //  CORE HIGH_VT NMOS MAC

//* Define device -- nmos nch_ulvt_mac
tngate7 = tngate6 NOT OD1T 
nuvgate_org1 = tngate7 AND VTUL_N 
nuvgate_org = nuvgate_org1 NOT OD_HG 
nuvgate_mac = nuvgate_org NOT LVSDMY  //  ULTRA LOW_VT NMOS MAC

//* Define device -- pmos pch_svt_sp_mac
pgate_svt_sp_mac = pgate10 AND TN2  //  CORE SP PMOS MAC

//* Define device -- nmos nch_svt_sp_mac
ngate_svt_sp_mac = ngate13 AND TN2  //  CORE SP NMOS MAC

//* Define device -- nmos nch_mlvt_mac
nilvtgate_org = ngate3 AND ILVT 
nilvtgate_mac = nilvtgate_org NOT LVSDMY  //  LP NMOS MLVT device MAC

//* Define device -- nmos nch_hia18_mac
ngate_18a = tngate1 AND OD18 
ngate_18b = ngate_18a NOT NT_N 
ngate_18c = ngate_18b NOT VTL_N_18 
ngate_18d = ngate_18c NOT VTL_N 
ngate_18e = ngate_18d NOT OD18_15 
ngate_18f = ngate_18e NOT OD18_12 
ngate_hia18_org = ngate_18f AND SR_ESD 
ngate_hia18_mac = ngate_hia18_org NOT LVSDMY  //  1.8v ESD NMOS MAC

//* Define device -- nmos nch_15_mac
ngate_15a = tngate1 AND OD15 
ngate_15b = ngate_15a NOT OD15_18 
ngate_15c = ngate_15b NOT SR_ESD 
ngate_15_org = ngate_15c NOT NT_N 
ngate_15_mac = ngate_15_org NOT LVSDMY 

//* Define device -- nmos nch_15od18_mac
ngate_15od18_org = ngate_15a AND OD15_18 
ngate_15od18_mac = ngate_15od18_org NOT LVSDMY 

//* Define device -- nmos nch_na15_mac
ngate_15na_org = ngate_15c AND NT_N 
ngate_15na_mac = ngate_15na_org NOT LVSDMY 

//* Define device -- nmos nch_33_mac
ngate_33a = tngate1 AND OD33 
ngate_33b = ngate_33a NOT NT_N 
ngate_33c = COPY ngate_33b 
ngate_33_org = ngate_33c NOT VTL_N 
ngate_33_mac = ngate_33_org NOT LVSDMY  //  3.3v NMOS MAC

//* Define device -- nmos nch_na25ud18_mac
ngate_25naud_mac = ngate_25naud1 NOT LVSDMY  //  2.5v Native NMOS under_drive 1.8v MAC

//* Define device -- nmos nch_na25od33_mac
ngate_25naod_mac = ngate_25naod1 NOT LVSDMY  //  2.5v Native NMOS over_drive 3.3v MAC

//* Define device -- nmos nch_na18ud15_mac
ngate_18na1 = ngate_18a AND NT_N 
ngate_18na2 = ngate_18na1 NOT VTL_N_18 
ngate_18na3 = ngate_18na2 NOT VTL_N 
ngate_18na4 = ngate_18na3 NOT DNW 
ngate_18naud15_org = ngate_18na4 AND OD18_15 
ngate_18naud15_mac = ngate_18naud15_org NOT LVSDMY 

//* Define device -- nmos nch_na33_mac
ngate_33na1 = ngate_33a AND NT_N 
ngate_33na2 = ngate_33na1 NOT VTL_N 
ngate_33na_org = ngate_33na2 NOT DNW 
ngate_33na_mac = ngate_33na_org NOT LVSDMY  //  3.3v Native NMOS MAC

//* Define device -- nmos nch_io_lvt_mac
ngate_io_lvt1 = ngate_18a INTERACT NT_N 
ngate_io_lvt2 = ngate_io_lvt1 AND VTL_N_18 
ngate_io_lvt3 = ngate_io_lvt2 NOT VTL_N 
ngate_io_lvt_org = ngate_io_lvt3 NOT DNW 
ngate_io_lvt_mac = ngate_io_lvt_org NOT LVSDMY  //  IO 1.8v low-Vt (like native)  

//* Define device -- nmos nch_elvt_mac
nelvgate_org1a = tngate6 AND eVTL_N  //  Extreme CORE LOW_VT NMOS in LOGIC
nelvgate_org1 = nelvgate_org1a NOT srm_lvtrp 
nelvgate_org2 = nelvgate_org1 NOT DCO 
nelvgate_org3 = nelvgate_org2 NOT POSall 
nelvgate_org = nelvgate_org3 NOT OD_HG 
nelvgate_mac = COPY nelvgate_org  //  Extreme CORE LOW_VT NMOS MAC

//* Define device -- nmos nch_zvt_mac
nzvgate_mac1 = nlgate7 NOT ANVT 
nzvgate_mac = nzvgate_mac1 AND ZVT  //  CORE zero-VT Devies MAC

//* Define device -- nmos nch_18_mac
ngate_18_org1 = ngate_18f NOT SR_ESD 
ngate_18_org = ngate_18_org1 NOT INTERACT HVD_N 
ngate_18_mac = ngate_18_org NOT LVSDMY  //  1.8v NMOS MAC

//* Define device -- nmos nch_18ud12_mac
ngate_18ud12_org1 = ngate_18d AND OD18_12 
ngate_18ud12_org = ngate_18ud12_org1 NOT VTL_N_IO 
ngate_18ud12_mac = ngate_18ud12_org NOT LVSDMY  //  1.8v NMOS under drive 1.5v MAC

//* Define device -- nmos nch_18ud15_mac
ngate_18ud15_org = ngate_18d AND OD18_15 
ngate_18ud15_mac = ngate_18ud15_org NOT LVSDMY  //  1.8v NMOS under drive 1.5v MAC

//* Define device -- nmos nch_na18_mac
ngate_18na_org = ngate_18na4 NOT OD18_15 
ngate_18na_mac = ngate_18na_org NOT LVSDMY  //  1.8v Native NMOS MAC

//* Define device -- nmos nch_hguhvt_mac
nuhvgate_org1 = tngate6 AND UHVT_N 
nuhvgate_hg_org = nuhvgate_org1 AND OD_HG 
nuhvgate_hg_mac = nuhvgate_hg_org NOT LVSDMY  //  HG ULTRA HVT NMOS MAC

//* Define device -- pmos pch_hguhvt_mac
puhvgate_org1 = tpgate6 AND UHVT_P 
puhvgate_hg_org = puhvgate_org1 AND OD_HG 
puhvgate_hg_mac = puhvgate_hg_org NOT LVSDMY  //  HG ULTRA HIGH VT PMOS MAC

//* Define device -- nmos nch_qrpsr
ngate_rpsr1 = ngate6 AND srm_rp 
ngate_qrpsr1 = ngate_rpsr1 AND SRMD9 
SRMD14 = COPY SRMD14i 
ngate_qrpsr2 = ngate_qrpsr1 NOT SRMD14 
ngate_qrpsr = ngate_qrpsr2 NOT SRMD4  //   SRAM Standard 2P_8T ULP read port

//* Define device -- nmos nchpg_sr
gate_sr = gate1 NOT NWLVT 
gate_s1 = gate_sr AND SRM_all 
gatennw_s = gate_s1 NOT nxwell  //  gate not inside nwell
ngate_s0 = gatennw_s AND NP 
ngate_s1 = COPY ngate_s0 
ngate_s2 = ngate_s1 NOT OD25 
ngate_s3 = ngate_s2 NOT OD33 
ngate_s4 = ngate_s3 NOT OD18 
ngate_s5 = ngate_s4 NOT VTL_N 
ngate_s6 = ngate_s5 NOT VTUL_N 
ngate_s7 = ngate_s6 NOT VTH_N 
ngate_s8 = ngate_s7 NOT DCO 
srm_sp1 = SRMD10 OR SRMD11 
srm_sp2 = srm_sp1 OR SRMD9 
srm_sp3 = srm_sp2 OR SRMD15 
srm_sp4 = srm_sp3 OR SRMD16 
srm_sp5 = srm_sp4 OR SRMD17 
srm_sp6 = srm_sp5 OR SRMD18 
srm_sp7 = srm_sp6 OR SRMD19 
srm_sp81 = srm_sp7 OR SRMD20 
srm_sp82 = srm_sp81 OR SRMD66 
srm_sp83 = srm_sp82 OR SRMD67 
srm_sp84 = srm_sp83 OR SRMD70 
srm_sp8 = srm_sp84 OR SRMD71 
srm_sp9 = srm_sp8 NOT SRMD14 
srm_sp10 = srm_sp9 NOT SRMD5 
srm_sp11 = srm_sp10 NOT SRMD42 
srm_sp12 = srm_sp11 NOT SRM_ULL 
srm_dp = SRMD12 OR SRMD13  //  nchpg_dpsr, nchpd_dpsr, pchpu_dpsr 
srm_sp = srm_sp12 NOT srm_dp  //  nchpg_sr, nchpd_sr, pchpu_sr
ngate_s = ngate_s8 AND srm_sp  //  SRAM sp 
ngate_spg = ngate_s AND SRAMPSGT  //  SRAM NMOS passgate sp hd

//* Define device -- nmos nchpd_sr
ngate_spd = ngate_s NOT SRAMPSGT  //  SRAM NMOS pulldown sp hd

//* Define device -- nmos nchpg_dpsr
ngate_sdp1 = ngate_s8 AND srm_dp 
ngate_sdp2 = ngate_sdp1 NOT SRMD5 
ngate_sdp = ngate_sdp2 NOT SRM_ULL  //   SRAM dp
ngate_sdppg1 = ngate_sdp AND SRAMPSGT 
ngate_sdppg = ngate_sdppg1 NOT SRMD14  //   SRAM NMOS passgate dp hd

//* Define device -- nmos nchpd_dpsr
ngate_sdppd1 = ngate_sdp NOT SRAMPSGT 
ngate_sdppd = ngate_sdppd1 NOT SRMD14  //   SRAM NMOS pulldown dp hd

//* Define device -- nmos nch_rpsr
ngate_rpsr2 = ngate_rpsr1 NOT SRMD9 
ngate_rpsr31 = ngate_rpsr2 NOT SRMD5 
ngate_rpsr3 = ngate_rpsr31 NOT SRM_ULL 
ngate_rpsr4 = ngate_rpsr3 NOT SRMD14 
ngate_rpsr5 = ngate_rpsr4 NOT SRMD4 
ngate_rpsr6 = ngate_rpsr5 NOT SRMD42 
ngate_rpsr = ngate_rpsr6 NOT VTH_N  //  SRAM 2P_8T read port

//* Define device -- nmos nch_lvtrpsr
ngate_lvtrpsr1 = nlvgate_org1a AND srm_lvtrp 
ngate_lvtrpsr2 = ngate_lvtrpsr1 NOT SRMD14 
ngate_lvtrpsr = COPY ngate_lvtrpsr2  //   SRAM 2P 8T LVT read port 

//* Define device -- nmos nchpg_hvtsr
ngate_hvs = ngate_s6 AND VTH_N 
ngate_hvspg = ngate_hvs AND SRAMPSGT  //  SRAM High VT NMOS passgate

//* Define device -- nmos nchpd_hvtsr
ngate_hvspd = ngate_hvs NOT SRAMPSGT  //  SRAM High VT NMOS pulldown

//* Define device -- nmos nchrpd_sr
ngate_rpdsr = ngate7a AND srm_rpd  //  SRAM 2P_10T/3P_10T read port

//* Define device -- nmos nchpg_iosr_mac
ngate_sio1 = ngate_s1 AND OD18 
ngate_sio2 = ngate_sio1 AND OD18_12 
ngate_sio = ngate_sio2 AND SRMD68 
ngate_siopg = ngate_sio AND SRAMPSGT 

//* Define device -- nmos nchpd_iosr_mac
ngate_siopd = ngate_sio NOT SRAMPSGT 

//* Define device -- pmos pchpu_iosr_mac
gatenw_s = gate_s1 AND nxwell  //  gate inside nwell
pgate_s0 = gatenw_s AND PP 
pgate_s1 = pgate_s0 NOT NILD 
pgate_sio1 = pgate_s1 AND OD18 
pgate_sio2 = pgate_sio1 AND OD18_12 
pgate_sio = pgate_sio2 AND SRMD68 

//* Define device -- nmos nchpg_tgosr
ngate_stgo1 = ngate_s1 AND OD_12 
ngate_stgo = ngate_stgo1 AND SRMD69 
ngate_stgopg = ngate_stgo AND SRAMPSGT 

//* Define device -- nmos nchpd_tgosr
ngate_stgopd = ngate_stgo NOT SRAMPSGT 

//* Define device -- pmos pchpu_tgosr
pgate_stgo1 = pgate_s1 AND OD_12 
pgate_stgo = pgate_stgo1 AND SRMD69 

//* Define device -- nmos nch_rom
ngate_rom1 = nhvgate_org AND HP_ROM 
ngate_rom = ngate_rom1 NOT SRMD6  //  nch_rom for HP process

//* Define device -- nmos nchpg_hlsr
srm_lp_sp1 = srm_sp7 AND SRMD14 
srm_lp_sp2 = srm_lp_sp1 NOT SRMD5 
srm_lp_sp = srm_lp_sp2 NOT SRM_ULL  //  LP
ngate_lpsr = ngate_s8 AND srm_lp_sp 
ngate_pg_lpsr = ngate_lpsr AND SRAMPSGT 

//* Define device -- nmos nchpd_hlsr
ngate_pd_lpsr = ngate_lpsr NOT SRAMPSGT 

//* Define device -- nmos nch_hlrpsr
ngate_lprpsr1 = ngate_rpsr2 NOT SRMD5 
ngate_lprpsr2 = ngate_lprpsr1 NOT SRM_ULL 
ngate_lprpsr = ngate_lprpsr2 AND SRMD14 

//* Define device -- nmos nch_hlqrpsr
ngate_lpqrpsr1 = tngate6 AND srm_rp3 
ngate_lpqrpsr2 = ngate_lpqrpsr1 AND SRMD9 
ngate_lpqrpsr3 = ngate_lpqrpsr2 NOT SRMD5 
ngate_lpqrpsr4 = ngate_lpqrpsr3 NOT SRM_ULL 
ngate_lpqrpsr5 = ngate_lpqrpsr4 AND SRMD14 
ngate_lpqrpsr = ngate_lpqrpsr5 NOT SRMD4 

//* Define device -- nmos nch_hlsvtrpsr
ngate_hlsvtqrpsr1 = ngate_lpqrpsr4 AND SRMD4 
ngate_hlsvtqrpsr = ngate_hlsvtqrpsr1 NOT SRMD14 

//* Define device -- nmos nchpg_llsr
srm_ll_sp1 = srm_sp7 AND SRMD5 
srm_ll_sp2 = srm_ll_sp1 NOT SRMD14 
srm_ll_sp = srm_ll_sp2 NOT SRM_ULL  //  LL
ngate_llsr = ngate_s8 AND srm_ll_sp 
ngate_pg_llsr = ngate_llsr AND SRAMPSGT 

//* Define device -- nmos nchpd_llsr
ngate_pd_llsr = ngate_llsr NOT SRAMPSGT 

//* Define device -- nmos nchpg_ullsr
srm_ull_sp1 = srm_sp7 AND SRM_ULL 
srm_ull_sp2 = srm_ull_sp1 NOT SRMD14 
srm_ull_sp = srm_ull_sp2 NOT SRMD5  //  ULL
ngate_ullsr = ngate_s8 AND srm_ull_sp 
ngate_pg_ullsr = ngate_ullsr AND SRAMPSGT 

//* Define device -- nmos nchpd_ullsr
ngate_pd_ullsr = ngate_ullsr NOT SRAMPSGT 

//* Define device -- nmos nchpg_hltsr
srm_hlt_sp = srm_sp10 AND SRMD42  //  TCAM
ngate_hltsr = ngate_s8 AND srm_hlt_sp 
ngate_pg_hltsr = ngate_hltsr AND SRAMPSGT 

//* Define device -- nmos nchpd_hltsr
ngate_pd_hltsr = ngate_hltsr NOT SRAMPSGT 

//* Define device -- nmos nch_llrpsr
ngate_llrpsr1 = ngate_rpsr2 AND SRMD5 
ngate_llrpsr2 = ngate_llrpsr1 NOT SRMD14 
ngate_llrpsr3 = ngate_llrpsr2 NOT SRM_ULL 
ngate_llrpsr = ngate_llrpsr3 NOT SRMD4 

//* Define device -- nmos nch_ullrpsr
ngate_ullrpsr1 = ngate_rpsr2 AND SRM_ULL 
ngate_ullrpsr2 = ngate_ullrpsr1 NOT SRMD14 
ngate_ullrpsr3 = ngate_ullrpsr2 NOT SRMD5 
ngate_ullrpsr = ngate_ullrpsr3 NOT SRMD4 

//* Define device -- nmos nch_hltrpsr
ngate_hltrpsr = ngate_rpsr5 AND SRMD42 

//* Define device -- nmos nchpg_lldpsr
ngate_lldpsr1 = ngate_sdp1 AND SRMD5 
ngate_lldpsr2 = ngate_lldpsr1 NOT SRM_ULL 
ngate_lldpsr = ngate_lldpsr2 NOT SRMD14 
ngate_pg_lldpsr = ngate_lldpsr AND SRAMPSGT 

//* Define device -- nmos nchpd_lldpsr
ngate_pd_lldpsr = ngate_lldpsr NOT SRAMPSGT 

//* Define device -- nmos nchpg_ulldpsr
ngate_ulldpsr1 = ngate_sdp1 AND SRM_ULL 
ngate_ulldpsr2 = ngate_ulldpsr1 NOT SRMD5 
ngate_ulldpsr = ngate_ulldpsr2 NOT SRMD14 
ngate_pg_ulldpsr = ngate_ulldpsr AND SRAMPSGT 

//* Define device -- nmos nchpd_ulldpsr
ngate_pd_ulldpsr = ngate_ulldpsr NOT SRAMPSGT 

//* Define device -- nmos nchpg_hldpsr
ngate_lpdpsr1 = ngate_sdp1 AND SRMD14 
ngate_lpdpsr2 = ngate_lpdpsr1 NOT SRMD5 
ngate_lpdpsr = ngate_lpdpsr2 NOT SRM_ULL 
ngate_pg_lpdpsr = ngate_lpdpsr AND SRAMPSGT 

//* Define device -- nmos nchpd_hldpsr
ngate_pd_lpdpsr = ngate_lpdpsr NOT SRAMPSGT 

//* Define device -- nmos nch_svtrpsr
ngate_svtrpsr1 = ngate_rpsr4 AND SRMD4 
ngate_svtrpsr = ngate_svtrpsr1 NOT VTH_N  //  SRAM 2P_8T SVT read port

//* Define device -- nmos nch_hvtrpsr
ngate_hvtrpsr1 = nhvgate_org NOT HP_ROM 
ngate_hvtrpsr2 = ngate_hvtrpsr1 AND srm_rp 
ngate_hvtrpsr3 = ngate_hvtrpsr2 AND SRMD4 
ngate_hvtrpsr4 = ngate_hvtrpsr3 NOT SRMD5 
ngate_hvtrpsr = ngate_hvtrpsr4 NOT SRM_ULL  //  SRAM 2P_8T HVT read port

//* Define device -- nmos nch_svtllrpsr
ngate_svtllrpsr1 = ngate_rpsr2 AND SRMD5 
ngate_svtllrpsr2 = ngate_svtllrpsr1 AND SRMD4 
ngate_svtllrpsr3 = ngate_svtllrpsr2 NOT SRMD14 
ngate_svtllrpsr4 = ngate_svtllrpsr3 NOT SRM_ULL 
ngate_svtllrpsr = ngate_svtllrpsr4 NOT VTH_N  //  SRAM 2P_8T LL SVT read port

//* Define device -- nmos nch_hvtllrpsr
ngate_hvtllrpsr1 = ngate_hvtrpsr3 AND SRMD5 
ngate_hvtllrpsr = ngate_hvtllrpsr1 NOT SRM_ULL  //  SRAM 2P_8T LL HVT read port

//* Define device -- pmos pchpu_hlsr
pgate_s2 = pgate_s1 NOT OD25 
pgate_s3 = pgate_s2 NOT OD33 
pgate_s4 = pgate_s3 NOT OD18 
pgate_s5 = pgate_s4 NOT VTL_P 
pgate_s6 = pgate_s5 NOT VTUL_P 
pgate_s7 = pgate_s6 NOT VTH_P 
pgate_s8 = pgate_s7 NOT DCO 
pgate_pu_lpsr = pgate_s8 AND srm_lp_sp 

//* Define device -- pmos pchpu_llsr
pgate_pu_llsr = pgate_s8 AND srm_ll_sp 

//* Define device -- pmos pchpu_ullsr
pgate_pu_ullsr = pgate_s8 AND srm_ull_sp 

//* Define device -- pmos pchpu_hltsr
pgate_pu_hltsr = pgate_s8 AND srm_hlt_sp 

//* Define device -- pmos pchpu_lldpsr
pgate_sdp1 = pgate_s8 AND srm_dp 
pgate_pu_lldpsr1 = pgate_sdp1 AND SRMD5 
pgate_pu_lldpsr2 = pgate_pu_lldpsr1 NOT SRM_ULL 
pgate_pu_lldpsr = pgate_pu_lldpsr2 NOT SRMD14 

//* Define device -- pmos pchpu_ulldpsr
pgate_pu_ulldpsr1 = pgate_sdp1 AND SRM_ULL 
pgate_pu_ulldpsr2 = pgate_pu_ulldpsr1 NOT SRMD5 
pgate_pu_ulldpsr = pgate_pu_ulldpsr2 NOT SRMD14 

//* Define device -- pmos pchpu_hldpsr
pgate_pu_lpdpsr1 = pgate_sdp1 AND SRMD14 
pgate_pu_lpdpsr2 = pgate_pu_lpdpsr1 NOT SRMD5 
pgate_pu_lpdpsr = pgate_pu_lpdpsr2 NOT SRM_ULL 

//* Define device -- pmos pchpu_2psr
pgate_s9 = pgate_s8 AND srm_sp  //  SRAM sp 
#IFDEF HPL_PROCESS
SRMD15_2psr = COPY SRMD15
#ELSE
SRMD15_2psr = SRMD15 NOT ( SIZE SRMD15 BY 0.005 )
#ENDIF
pgate_s_2psr = pgate_s9 AND SRMD15_2psr 

//* Define device -- nmos nch_hia15_mac
ngate_hia15_org = ngate_15b AND SR_ESD 
ngate_hia15_mac = ngate_hia15_org NOT LVSDMY 

//* Define device -- pmos pchpu_sr
pgate_s = pgate_s9 NOT SRMD15_2psr 

//* Define device -- pmos pchpu_dpsr
pgate_sdp2 = pgate_sdp1 NOT SRMD5 
pgate_sdp3 = pgate_sdp2 NOT SRMD14 
pgate_sdp = pgate_sdp3 NOT SRM_ULL  //   SRAM dp

//* Define device -- pmos pchpu_hvtsr
pgate_hvs = pgate_s6 AND VTH_P  //  SRAM High VT PMOS

//* Define device -- pmos pch_lvt_mac
plvgate_org1 = tpgate6 AND VTL_P 
plvgate_org2 = plvgate_org1 NOT DCO 
plvgate_org3 = plvgate_org2 NOT POSall 
plvgate_org = plvgate_org3 NOT OD_HG 
plvgate_mac = COPY plvgate_org  //  CORE LOW_VT PMOS MAC

//* Define device -- pmos pch_25ud18_mac
pgate_25a0 = tpgate1 AND OD25 
pgate_25a = COPY pgate_25a0 
pgate_25b = pgate_25a NOT VTL_P 
pgate_25_org = COPY pgate_25b 
pgate_25ud1 = pgate_25_org AND OD25_18 
pgate_25ud_mac = pgate_25ud1 NOT LVSDMY  //  2.5v PMOS under_drive 1.8v MAC

//* Define device -- pmos pch_25od33_mac
pgate_25od1 = pgate_25_org AND OD25_33 
pgate_25od_mac = pgate_25od1 NOT LVSDMY  //  2.5v PMOS over_drive 3.3v MAC

//* Define device -- pmos pch_25_mac
pgate_25z = pgate_25_org NOT pgate_25ud1 
pgate_25y = pgate_25z NOT pgate_25od1 
pgate_25y1 = pgate_25y NOT VTL_P25 
pgate_25_mac = pgate_25y1 NOT LVSDMY  //  2.5v PMOS MAC

//* Define device -- pmos pch_ulvt_mac
tpgate7 = tpgate6 NOT OD1T 
puvgate_org1 = tpgate7 AND VTUL_P 
puvgate_org = puvgate_org1 NOT OD_HG 
puvgate_mac = puvgate_org NOT LVSDMY  //  ULTRA LOW_VT PMOS MAC

//* Define device -- pmos pch_elvt_mac
pelvgate_org1 = tpgate6 AND eVTL_P 
pelvgate_org2 = pelvgate_org1 NOT DCO 
pelvgate_org3 = pelvgate_org2 NOT POSall 
pelvgate_org = pelvgate_org3 NOT OD_HG 
pelvgate_mac = COPY pelvgate_org  //  Extreme CORE LOW_VT PMOS MAC

//* Define device -- pmos pch_mlvt_mac
pilvtgate_org = pgate3 AND ILVT 
pilvtgate_mac = pilvtgate_org NOT LVSDMY  //  LP PMOS MLVT device MAC

//* Define device -- pmos pch_hvt_mac
phvgate1a = tpgate6 AND VTH_P 
phvgate1 = COPY phvgate1a 
phvgate2 = phvgate1 NOT DCO 
phvgate3 = phvgate2 NOT POSall 
phvgate_org = phvgate3 NOT OD_HG 
phvgate_mac = phvgate_org NOT LVSDMY  //  CORE HIGH_VT PMOS MAC

//* Define device -- pmos pch_15_mac
pgate_15a = tpgate1 AND OD15 
pgate_15_org = pgate_15a NOT OD15_18 
pgate_15_mac = pgate_15_org NOT LVSDMY 

//* Define device -- pmos pch_15od18_mac
pgate_15od18_org = pgate_15a AND OD15_18 
pgate_15od18_mac = pgate_15od18_org NOT LVSDMY 

//* Define device -- pmos pch_33_mac
pgate_33a0 = tpgate1 AND OD33 
pgate_33a = COPY pgate_33a0 
pgate_33_org = pgate_33a NOT VTL_P 
pgate_33_mac = pgate_33_org NOT LVSDMY  //  3.3v PMOS MAC

//* Define device -- pmos pch_18_mac
pgate_18a0 = tpgate1 AND OD18 
pgate_18a = COPY pgate_18a0 
pgate_18b = pgate_18a NOT VTL_P 
pgate_18c = pgate_18b NOT OD18_15 
pgate_18d = COPY pgate_18c 
pgate_18_org = pgate_18d NOT OD18_12 
pgate_18_mac_1 = pgate_18_org NOT LVSDMY 
pgate_18_mac = pgate_18_mac_1 NOT INTERACT HVD_P  //  1.8v PMOS MAC

//* Define device -- pmos pch_18ud12_mac
pgate_18ud12_org = pgate_18b AND OD18_12 
pgate_18ud12_mac = pgate_18ud12_org NOT LVSDMY  //  1.8v PMOS under-drive 1.2v MAC 

//* Define device -- pmos pch_18ud15_mac
pgate_18ud15_org = pgate_18b AND OD18_15 
pgate_18ud15_mac = pgate_18ud15_org NOT LVSDMY  //  1.8v PMOS under-drive 1.5v MAC

//* Define device -- nmos nch_chvt_mac
nchvgate1 = tngate6 AND CHVT_N 
nchvgate_mac = nchvgate1 NOT LVSDMY  //  CRAM HVT NMOS MAC 

//* Define device -- nmos nch_avt_mac
tngate6_c1 = tngate6 NOT OD18_15 
tngate6_c2 = tngate6_c1 NOT OD25_18 
tngate6_c = tngate6_c2 NOT OD25_33 
navtgate_org1 = tngate6_c AND AVT 
navtgate_mac = navtgate_org1 NOT OD_HG  //  Analog transistor NMOS MAC

//* Define device -- pmos pch_alvt_mac
gatenwlvt = gatenw1 AND NWLVT  //  gate inside NWLVT ( alvt pmos gate )
alvtpgate0 = gatenwlvt AND pgate_imp 
alvtpgate1 = COPY alvtpgate0 
alvtpgate2 = alvtpgate1 NOT OD_12 
alvtpgate3 = alvtpgate2 NOT OD18 
alvtpgate4 = alvtpgate3 NOT OD25 
alvtpgate5 = alvtpgate4 NOT OD33 
alvtpgate6 = alvtpgate5 NOT OD5V 
alvtpgate_org = alvtpgate6 NOT OD_50F 
alvtpgate_mac = alvtpgate_org NOT LVSDMY  //  CORE ALO-VT PMOS MAC

//* Define device -- nmos nch_edc_mac
ngate_1ta = tngate5 AND OD1T 
ngate_1tb = ngate_1ta NOT VTL_N 
ngate_1tc = ngate_1tb NOT VTH_N 
ngate_1td = ngate_1tc NOT CAP1TDMY 
ngate_edc_mac = ngate_1td AND CLDD  //   eDRAM nch_edc_mac device

//* Define device -- nmos nch_lvt18ud12_mac
ngate_lvt18ud12_mac = ngate_18ud12_org1 AND VTL_N_IO 

//* Define device -- nmos nch_uhvt_mac
nuhvgate_org = nuhvgate_org1 NOT OD_HG 
nuhvgate_mac = nuhvgate_org NOT LVSDMY  //  ULTRA HVT NMOS MAC

//* Define device -- pmos pch_uhvt_mac
puhvgate_org = puhvgate_org1 NOT OD_HG 
puhvgate_mac = puhvgate_org NOT LVSDMY  //  ULTRA HIGH VT PMOS MAC

//* Define device -- nmos nch_ehvt_mac
nehvgate_org1 = tngate6_c AND EHVT_N 
nehvgate_mac = nehvgate_org1 NOT OD_HG  //  Extra High-Vt NMOS MAC

//* Define device -- pmos pch_ehvt_mac
tpgate6_c1 = tpgate6 NOT OD18_15 
tpgate6_c2 = tpgate6_c1 NOT OD25_18 
tpgate6_c = tpgate6_c2 NOT OD25_33 
pehvgate_org1 = tpgate6_c AND EHVT_P 
pehvgate_mac = pehvgate_org1 NOT OD_HG  //  Extra High-Vt PMOS MAC

//* Define device -- lddn nch_udm_mac
ngate_udm1 = tngate_1 INTERACT udm_rpo 
ngate_udm2 = ngate_udm1 AND UDM 
ngate_udm_mac1 = ngate_udm2 NOT OD18 
ngate_udm_mac = ngate_udm_mac1 NOT OD25 

//***** Define connectivity/via layer -- s_tndiff_udm ****
nthin2 = mdiff AND NP 
nthin1 = nthin2 NOT SR_DPO 
ydio_a0 = ESDIMP AND OD 
ydio_a = COPY ydio_a0 
ydio_b = ydio_a AND NP 
ydio = ydio_b INTERACT RPO 
nthin = nthin1 NOT ydio  //  define N+ thin oxide
tndiffa1 = nthin NOT gate1 
tndiffa = tndiffa1 NOT SR_DPO 
diffb = diffa NOT diff 
ndiffb = diffb AND NP 
tndiff1 = tndiffa OR ndiffb 
nplug1 = tndiff1 AND nxwell 
pthin2 = mdiff AND PP  //  define P+ thin oxide
pthin = pthin2 NOT SR_DPO 
tpdiffa1 = pthin NOT gate1 
tpdiffa = tpdiffa1 NOT SR_DPO  //  define P+ diffusion region
pdiffb = diffb NOT ndiffb 
tpdiff1 = tpdiffa OR pdiffb 
plug_sel1 = tndiff1 OR tpdiff1 
tioda = diff NOT tpdiff1 
tiodb = tioda NOT tndiff1 
tiod1 = tiodb NOT POx 
tiod2 = tiod1 NOT RPO 
tiod3 = tiod2 NOT RPDMY 
tiod = tiod3 NOT NWDMY  //  RPO, RPDMY, NWDMY cut ti-od
plug_sel2 = plug_sel1 OR tiod 
plug_sel = plug_sel2 INTERACT CO  //  plug select layers
nplug2 = nplug1 AND plug_sel 
nplug_dmy = nplug1 NOT nplug2 
tndiff_dmy1 = tndiff1 INTERACT nplug_dmy 
vargt0 = gatenw AND NP 
vargt1 = COPY vargt0 
VAR = VARi NOT SR_DOD 
VAR_noRF = VAR NOT INTERACT RFDMY 
vargt21 = vargt1 AND VAR_noRF 
VAR11_RF1 = VARi AND VAR11 
VAR11_RF2 = VAR11_RF1 AND RFDMY 
VAR11_RF = VAR11_RF2 INTERACT gate_a 
var11_nw_rf_1 = nxwell INTERACT VAR11_RF 
vargt_all1 = vargt21 OR var11_nw_rf_1 
VAR10_RF1 = VARi AND VAR10 
VAR10_RF2 = VAR10_RF1 AND RFDMY 
VAR10_RF = VAR10_RF2 INTERACT gate_a 
var10_nw_rf_1 = nxwell INTERACT VAR10_RF 
vargt_all2 = vargt_all1 OR var10_nw_rf_1 
npolycap25_1 = tngate1 AND CI_CAP 
vargt_all = vargt_all2 OR npolycap25_1 
tndiff_dmy = tndiff_dmy1 NOT INTERACT vargt_all 
tndiff_all = tndiff1 NOT tndiff_dmy 

#IFNDEF CCI_DECK
  tndiff = COPY tndiff_all
#ENDIF


s_tndiff_udm1 = tndiff_all NOT udm_rpo 
s_tndiff_udm = s_tndiff_udm1 INTERACT ngate_udm2  //  ngate_udm2 should cover all UDM NMOS

//* Define device -- lddn nch_udm18_mac
ngate_udm18a = ngate_udm2 AND OD18 
ngate_udm18_mac1 = ngate_udm18a NOT OD18_15 
ngate_udm18_mac = ngate_udm18_mac1 NOT OD18_12 

//* Define device -- lddn nch_udm18ud15_mac
ngate_udm18ud15_mac = ngate_udm18a AND OD18_15 

//* Define device -- lddp pch_udm_mac
pgate_udm1 = tpgate0 INTERACT udm_rpo 
pgate_udm2 = pgate_udm1 AND UDM 
pgate_udm_mac1 = pgate_udm2 NOT OD18 
pgate_udm_mac = pgate_udm_mac1 NOT OD25 

//***** Define connectivity/via layer -- s_tpdiff_udm ****
pplug1 = tpdiff1 AND psub 
pplug2a = pplug1 AND plug_sel 
tcddmy_1 = ICOVL OR TCDDMY_H 
tcddmy_all = tcddmy_1 OR TCDDMY_V 
pplug2 = pplug2a NOT tcddmy_all 
pplug_dmy1 = pplug1 NOT pplug2 
pplug_dmy = pplug_dmy1 NOT INTERACT psubband 
tpdiff_dmy1 = tpdiff1 INTERACT pplug_dmy 
vargt1_p = gatennw AND pgate_imp 
vargt2_p = vargt1_p AND VAR_noRF 
VAR_RF1 = VAR AND RFDMY 
VAR_RF = VAR_RF1 INTERACT gate_a 
var_pw_rf1a = VAR_RF NOT nxwell 
var_pw_rf1b = var_pw_rf1a AND pgate_imp 
vargt_p_all = vargt2_p OR var_pw_rf1b 
tpdiff_dmy = tpdiff_dmy1 NOT INTERACT vargt_p_all 
tpdiff_all = tpdiff1 NOT tpdiff_dmy 

#IFNDEF CCI_DECK
  tpdiff = COPY tpdiff_all
#ENDIF


s_tpdiff_udm1 = tpdiff_all NOT udm_rpo 
s_tpdiff_udm = s_tpdiff_udm1 INTERACT pgate_udm2  //  pgate_udm2 should cover all UDM PMOS

//* Define device -- lddp pch_udm18_mac
pgate_udm18a = pgate_udm2 AND OD18 
pgate_udm18_mac1 = pgate_udm18a NOT OD18_15 
pgate_udm18_mac = pgate_udm18_mac1 NOT OD18_12 

//* Define device -- lddp pch_udm18ud15_mac
pgate_udm18ud15_mac = pgate_udm18a AND OD18_15 

//* Define device -- lddn nch_hv18_mac
ngate_hv18_mac_1 = ngate_18_org1 INTERACT HVD_N 
nthin2_hv_d = nthin2 AND HVD_N 
ngate_hv18_mac_2 = ngate_hv18_mac_1 INTERACT nthin2_hv_d 
nthin2_hv_s1 = nthin2 NOT ngate_hv18_mac_2 
nthin2_hv_s = nthin2_hv_s1 NOT nthin2_hv_d 
ngate_hv18_mac = ngate_hv18_mac_2 TOUCH nthin2_hv_s  //  HV NMOS

//***** Define connectivity/via layer -- s_tndiff_hv ****
s_tndiff_hv = nthin2_hv_s TOUCH ngate_hv18_mac 

//* Define device -- lddp pch_hv18_mac
pgate_hv18_mac_1 = pgate_18_mac_1 INTERACT HVD_P 
pgate_hv18_mac_1a = pgate_hv18_mac_1 AND DNW 
pthin2_hv_d = pthin2 AND HVD_P 
pgate_hv18_mac_2 = pgate_hv18_mac_1a INTERACT pthin2_hv_d 
pthin2_hv_s1 = pthin2 NOT pgate_hv18_mac_2 
pthin2_hv_s = pthin2_hv_s1 NOT pthin2_hv_d 
pgate_hv18_mac = pgate_hv18_mac_2 TOUCH pthin2_hv_s  //  HV PMOS

//***** Define connectivity/via layer -- s_tpdiff_hv ****
s_tpdiff_hv = pthin2_hv_s TOUCH pgate_hv18_mac 

//* Define device -- diode pdio
DIODMY = DIODMYi NOT SR_DOD 
pdio0 = tpdiff_all AND DIODMY 
pdio1 = COPY pdio0 
pdio2a = pdio1 AND nxwell 
pdio2a1 = pdio2a NOT NWLVT 
pdio2a2 = pdio2a1 NOT OD5V 
pdio2 = pdio2a2 NOT OD_50F 
pdio3 = pdio2 NOT OD25 
pdio4 = pdio3 NOT OD33 
pdio5a = pdio4 NOT OD18 
pdio5b = pdio5a NOT OD_12 
pdio5 = pdio5b NOT OD15 
pdio8 = pdio5 NOT VTL_P 
pdio9 = pdio8 NOT eVTL_P 
cpdio1 = pdio9 NOT VTH_P 
cpdio21 = cpdio1 NOT ILVT 
cpdio22 = cpdio21 NOT UHVT_P 
cpdio23 = cpdio22 NOT EHVT_P 
cpdio24 = cpdio23 NOT DIODMY_L 
cpdio25 = cpdio24 NOT AVT 
cpdio2a = cpdio25 NOT VTUL_P 
cpdio2 = cpdio2a NOT HIA_DUMMY 
cpdio3 = cpdio2 NOT DCO 
cpdio6 = cpdio3 NOT OD1T 
cpdio = cpdio6 NOT OD_HG  //  CORE P+/NW DIODE

//* Define device -- diode ndio
ndio0 = tndiff_all AND DIODMY 
ndio1 = COPY ndio0 
ndio2 = ndio1 AND psub 
ndio30 = ndio2 NOT OD5V 
ndio31 = ndio30 NOT OD_50F 
ndio3 = ndio31 NOT OD25 
ndio4 = ndio3 NOT OD33 
ndio5a = ndio4 NOT OD18 
ndio5b = ndio5a NOT OD_12 
ndio5 = ndio5b NOT OD15 
ndio6 = ndio5 NOT NT_N 
ndio9 = ndio6 NOT VTL_N 
ndio10 = ndio9 NOT eVTL_N 
cndio1 = ndio10 NOT VTH_N 
cndio21 = cndio1 NOT ILVT 
cndio22 = cndio21 NOT DIODMY_L 
cndio23 = cndio22 NOT CHVT_N 
cndio24 = cndio23 NOT UHVT_N 
cndio25 = cndio24 NOT EHVT_N 
cndio26 = cndio25 NOT VTUL_N 
cndio2 = cndio26 NOT AVT 
cndio3a = cndio2 NOT DCO 
cndio3 = cndio3a NOT HIA_DUMMY 
cndio6 = cndio3 NOT OD1T 
cndio = cndio6 NOT OD_HG  //  CORE N+/PW DIODE

//* Define device -- diode ndio_hg
ndiohg = cndio6 AND OD_HG  //  CORE horizontal N+/PW DIODE

//* Define device -- diode pdio_hg
pdiohg = cpdio6 AND OD_HG  //  CORE horizontal P+/NW DIODE

//* Define device -- diode nwdio
DIONW = DIODMY OUTSIDE tpdiff_all 
nwdio0 = nxwell AND DIONW 
cnwdio = nwdio0 NOT DIODMY_L  //  CORE NW/PW diode

//* Define device -- diode ndio_lvt
ndiol1 = ndio6 AND VTL_N 
ndiol2 = ndiol1 NOT DIODMY_L 
ndiol3 = ndiol2 NOT DCO 
ndiol = ndiol3 NOT OD_HG  //  CORE N+/PW LOW_VT DIODE

//* Define device -- diode pdio_lvt
pdiol1 = pdio5 AND VTL_P 
pdiol2 = pdiol1 NOT DIODMY_L 
pdiol3 = pdiol2 NOT DCO 
pdiol = pdiol3 NOT OD_HG  //  CORE P+/NW LOW_VT DIODE

//* Define device -- diode pdio_25
ipdio_25_org1 = pdio2 AND OD25 
ipdio_25_org2 = ipdio_25_org1 NOT OD18 
ipdio_25_org3 = ipdio_25_org2 NOT OD15 
ipdio_25_org4 = ipdio_25_org3 NOT OD33 
ipdio_25_org5 = ipdio_25_org4 NOT OD_12 
ipdio_25_org6 = ipdio_25_org5 NOT OD_HG 
ipdio_25_org = ipdio_25_org6 NOT DIODMY_L 
ipdio_25z = ipdio_25_org NOT OD25_18 
ipdio_25z1 = ipdio_25z NOT OD25_33 
ipdio_25 = ipdio_25z1 NOT HIA_DUMMY  //  2.5v P+/NW DIODE

//* Define device -- diode ndio_25
ndio_25a1 = ndio31 AND OD25 
ndio_25a2 = ndio_25a1 NOT OD33 
ndio_25a3 = ndio_25a2 NOT OD18 
ndio_25a4 = ndio_25a3 NOT OD15 
ndio_25a5 = ndio_25a4 NOT OD_12 
ndio_25a6 = ndio_25a5 NOT OD_HG 
ndio_25a7 = ndio_25a6 NOT OD5V 
ndio_25a = ndio_25a7 NOT DIODMY_L 
indio_25_org = ndio_25a NOT NT_N 
indio_25z = indio_25_org NOT OD25_18 
indio_25z1 = indio_25z NOT OD25_33 
indio_25 = indio_25z1 NOT HIA_DUMMY  //  2.5v N+/PW DIODE

//* Define device -- diode pdio_25ud18
ipdio_25ud = ipdio_25_org AND OD25_18  //  2.5v P+/NW DIODE under_drive 1.8v

//* Define device -- diode ndio_25ud18
indio_25ud = indio_25_org AND OD25_18  //  2.5v N+/PW DIODE under_drive 1.8v

//* Define device -- diode pdio_25od33
ipdio_25od = ipdio_25_org AND OD25_33  //  2.5v P+/NW DIODE over_drive 3.3v

//* Define device -- diode ndio_25od33
indio_25od = indio_25z AND OD25_33  //  2.5v N+/PW DIODE under_drive 3.3v

//* Define device -- diode ndio_na25
ndio_25na1 = ndio_25a AND NT_N 
ndio_25na2 = ndio_25na1 NOT OD25_33 
ndio_25na = ndio_25na2 NOT OD25_18  //  2.5v N+/PW native diode

//* Define device -- diode ndio_na
nndio1 = ndio5 AND NT_N 
nndio2 = nndio1 NOT DIODMY_L 
nndio3 = nndio2 NOT OD_HG 
cndion1 = nndio3 NOT VTH_N 
cndion2 = cndion1 NOT DCO 
cndion4 = cndion2 NOT VTL_N 
cndion5 = cndion4 NOT ZVT 
cndion6 = cndion5 NOT ANVT 
cndion7 = cndion6 NOT UHVT_N 
cndion8 = cndion7 NOT EHVT_N 
cndion9 = cndion8 NOT VTUL_N 
cndion = cndion9 NOT eVTL_N 

//***** Define connectivity/via layer -- ydio_t ****
ydio_t = COPY ydio 

//* Define device -- diode pdio_hvt
pdio6 = pdio5 NOT DCO 
pdioh1 = pdio6 AND VTH_P 
pdioh2 = pdioh1 NOT DIODMY_L 
pdioh = pdioh2 NOT OD_HG  //  CORE P+/NW HIGH_VT DIODE

//* Define device -- diode ndio_hvt
ndio7 = ndio6 NOT DCO 
ndioh1 = ndio7 AND VTH_N 
ndioh2 = ndioh1 NOT DIODMY_L 
ndioh = ndioh2 NOT OD_HG  //  CORE N+/PW HIGH_VT DIODE

//* Define device -- diode pdio_18ll
ipdio_18_org1 = pdio4 AND OD18 
ipdio_18_org2 = ipdio_18_org1 NOT OD15 
ipdio_18_org3 = ipdio_18_org2 NOT OD_12 
ipdio_18_org4 = ipdio_18_org3 NOT OD_HG 
pdio18ll1 = ipdio_18_org4 AND DIODMY_L 
pdio18ll2 = pdio18ll1 NOT VTH_P 
pdio18ll3 = pdio18ll2 NOT VTL_P 
pdio18ll4 = pdio18ll3 NOT UHVT_P 
pdio18ll5 = pdio18ll4 NOT VTUL_P 
pdio18ll6 = pdio18ll5 NOT EHVT_P 
pdio18ll = pdio18ll6 NOT eVTL_P  //  1.8v P+/NW Low Leakage Transistor DIODE

//* Define device -- diode ndio_18ll
ndio_18a1 = ndio4 AND OD18 
ndio_18a2 = ndio_18a1 NOT OD15 
ndio_18a3 = ndio_18a2 NOT OD_12 
ndio_18a4 = ndio_18a3 NOT VTL_N_18 
ndio_18a5 = ndio_18a4 NOT OD_HG 
ndio18ll1 = ndio_18a5 AND DIODMY_L 
ndio18ll2 = ndio18ll1 NOT NT_N 
ndio18ll3 = ndio18ll2 NOT VTH_N 
ndio18ll4 = ndio18ll3 NOT VTL_N 
ndio18ll5 = ndio18ll4 NOT UHVT_N 
ndio18ll6 = ndio18ll5 NOT VTUL_N 
ndio18ll7 = ndio18ll6 NOT EHVT_N 
ndio18ll = ndio18ll7 NOT eVTL_N  //  1.8v low leakage N+/PW diode

//* Define device -- diode pdio_ulvt
cpdio51 = cpdio25 AND VTUL_P 
cpdio5 = cpdio51 NOT OD_HG 
epdio_sa = cpdio5 NOT OD1T  //  CORE Ultra-Low VT P+/NW DIODE

//* Define device -- diode ndio_ulvt
cndio51 = cndio25 AND VTUL_N 
cndio5 = cndio51 NOT OD_HG 
endio_sa = cndio5 NOT OD1T  //  CORE Ultra-Low VT N+/PW DIODE

//* Define device -- diode ndio_elvt
ndioelvt1 = ndio9 AND eVTL_N 
ndioelvt2 = ndioelvt1 NOT DIODMY_L 
ndioelvt3 = ndioelvt2 NOT DCO 
ndioelvt = ndioelvt3 NOT OD_HG  //  CORE Extreme LOW_VT N+/PW DIODE

//* Define device -- diode pdio_elvt
pdio5c = pdio5 NOT VTL_P 
pdioelvt1 = pdio5c AND eVTL_P 
pdioelvt2 = pdioelvt1 NOT DIODMY_L 
pdioelvt3 = pdioelvt2 NOT DCO 
pdioelvt = pdioelvt3 NOT OD_HG  //  Extreme CORE P+/NW LOW_VT DIODE

//* Define device -- diode pdio_mlvt
pdioilvt1 = cpdio1 AND ILVT 
pdioilvt2 = pdioilvt1 NOT DIODMY_L 
pdioilvt = pdioilvt2 NOT OD_HG  //  CORE MLVT P+/NW DIODE

//* Define device -- diode ndio_mlvt
cndioilvt1 = cndio1 AND ILVT  //  CORE LP N+/PW MLVT DIODE
cndioilvt2 = cndioilvt1 NOT DIODMY_L 
cndioilvt = cndioilvt2 NOT OD_HG 

//* Define device -- diode pdio_15
ipdio_15_org1 = pdio5b AND OD15 
ipdio_15_org2 = ipdio_15_org1 NOT OD_HG 
ipdio_15_org = ipdio_15_org2 NOT DIODMY_L 
ipdio_15 = ipdio_15_org NOT OD15_18  //  1.5v P+/NW DIODE 

//* Define device -- diode ndio_15
indio_15a1 = ndio5b AND OD15 
indio_15a2 = indio_15a1 NOT OD_HG 
indio_15a = indio_15a2 NOT DIODMY_L 
indio_15b = indio_15a NOT OD15_18 
indio_15 = indio_15b NOT NT_N  //  1.5v N+/PW diode

//* Define device -- diode pdio_15od18
ipdio_15od = ipdio_15_org AND OD15_18  //  1.5v P+/NW over_drive 1.8v DIODE

//* Define device -- diode ndio_15od18
indio_15od = indio_15a AND OD15_18  //  1.5v N+/PW native diode over_drive 1.8v

//* Define device -- diode pdio_18
ipdio_18_org = ipdio_18_org4 NOT DIODMY_L 
ipdio_18b = ipdio_18_org NOT OD18_15 
ipdio_18 = ipdio_18b NOT OD18_12  //  1.8v P+/NW DIODE

//* Define device -- diode ndio_18
ndio_18a = ndio_18a5 NOT DIODMY_L 
indio_18a = ndio_18a NOT NT_N 
indio_18b = indio_18a NOT OD18_15 
indio_18 = indio_18b NOT OD18_12  //  1.8v N+/PW diode

//* Define device -- diode ndio_18ud12
indio_18ud12a = indio_18b AND OD18_12 
indio_18ud12 = indio_18ud12a NOT VTL_N_IO  //  1.8v N+/PW diode under drive 1.2v

//* Define device -- diode pdio_18ud12
ipdio_18ud12 = ipdio_18_org AND OD18_12  //  1.8v P+/NW DIODE under drive 1.2v

//* Define device -- diode ndio_18ud15
indio_18ud15 = indio_18a AND OD18_15  //  1.8v N+/PW diode under drive 1.5v

//* Define device -- diode pdio_18ud15
ipdio_18ud15 = ipdio_18_org AND OD18_15  //  1.8v P+/NW DIODE under drive 1.5v

//* Define device -- diode ndio_na18
ndio_18na1 = ndio_18a AND NT_N 
ndio_18na = ndio_18na1 NOT OD18_15  //  1.8v N+/PW native diode

//* Define device -- diode pdio_33
ipdio_33_org1 = pdio3 AND OD33 
ipdio_33_org2 = ipdio_33_org1 NOT OD18 
ipdio_33_org3 = ipdio_33_org2 NOT OD15 
ipdio_33_org4 = ipdio_33_org3 NOT OD_12 
ipdio_33_org = ipdio_33_org4 NOT OD_HG 
ipdio_33 = ipdio_33_org NOT DIODMY_L  //  3.3v P+/NW DIODE

//* Define device -- diode ndio_33
ndio_33a1 = ndio3 AND OD33 
ndio_33a2 = ndio_33a1 NOT OD18 
ndio_33a3 = ndio_33a2 NOT OD15 
ndio_33a4 = ndio_33a3 NOT OD_12 
ndio_33a5 = ndio_33a4 NOT OD_HG 
ndio_33a = ndio_33a5 NOT DIODMY_L 
indio_33 = ndio_33a NOT NT_N  //  3.3v N+/PW diode

//* Define device -- diode ndio_zvt
cndio_zvt1 = cndion4 AND ZVT 
cndio_zvt = cndio_zvt1 NOT ANVT 

//* Define device -- diode ndio_na15
ndio_15na = indio_15b AND NT_N  //  1.5v N+/PW native diode

//* Define device -- diode ndio_na18ud15
ndio_18ud15na = ndio_18na1 AND OD18_15  //  1.8v N+/PW native diode under drive 1.5v

//* Define device -- diode ndio_na25od33
ndio_25od33na = ndio_25na1 AND OD25_33  //  2.5v N+/PW native diode over_drive 3.3v

//* Define device -- diode ndio_na33
ndio_33na = ndio_33a AND NT_N  //  3.3v N+/PW native diode

//* Define device -- diode ndio_io_lvt
ndio_io_lvt1 = ndio_18a3 AND VTL_N_18 
ndio_io_lvt2 = ndio_io_lvt1 NOT OD_HG 
ndio_io_lvt3 = ndio_io_lvt2 NOT DIODMY_L 
ndio_io_lvt = ndio_io_lvt3 INTERACT NT_N 

//* Define device -- diode ndio_avt
ndio8 = ndio7 NOT VTH_N 
ndio8a = ndio8 NOT CHVT_N 
ndio8b = ndio8a NOT UHVT_N 
ndio8c = ndio8b NOT EHVT_N 
ndioav1 = ndio8c AND AVT 
ndioav2 = ndioav1 NOT DIODMY_L 
ndioav = ndioav2 NOT OD_HG  //  CORE Analog Transistor N+/PW DIODE

//* Define device -- diode pdio_hguhvt
pdio6a = pdio6 NOT VTH_P 
pdiouh1 = pdio6a AND UHVT_P 
pdiouh2 = pdiouh1 NOT DIODMY_L 
pdiohguhvt = pdiouh2 AND OD_HG  //  CORE HORIZONTAL P+/NW ULTRA HIGH_VT DIODE

//* Define device -- diode ndio_hguhvt
ndiouh1 = ndio8a AND UHVT_N 
ndiouh2 = ndiouh1 NOT DIODMY_L 
ndiohguhvt = ndiouh2 AND OD_HG  //  CORE HORIZONTAL N+/PW ULTRA HIGH_VT DIODE

//* Define device -- diode ndio_lvt18ud12
indio_lvt18ud12 = indio_18ud12a AND VTL_N_IO  //  1.8v N+/PW LVT diode under drive 1.2v

//* Define device -- diode ndio_ll
ndioll1 = ndio7 AND DIODMY_L 
ndioll = ndioll1 NOT OD_HG  //   CORE N+/PW Low Leakage DIODE

//* Define device -- diode pdio_ll
pdioll1 = pdio6 AND DIODMY_L 
pdioll = pdioll1 NOT OD_HG  //  CORE P+/NW Low Leakage Transistor DIODE 

//* Define device -- diode pdio_25ll
pdio25ll1 = ipdio_25_org6 AND DIODMY_L 
pdio25ll2 = pdio25ll1 NOT VTH_P 
pdio25ll3 = pdio25ll2 NOT VTL_P 
pdio25ll4 = pdio25ll3 NOT UHVT_P 
pdio25ll5 = pdio25ll4 NOT VTUL_P 
pdio25ll6 = pdio25ll5 NOT EHVT_P 
pdio25ll = pdio25ll6 NOT eVTL_P  //  2.5v P+/NW Low Leakage Transistor DIODE

//* Define device -- diode ndio_25ll
ndio25ll1 = ndio_25a7 AND DIODMY_L 
ndio25ll2 = ndio25ll1 NOT NT_N 
ndio25ll3 = ndio25ll2 NOT VTH_N 
ndio25ll4 = ndio25ll3 NOT VTL_N 
ndio25ll5 = ndio25ll4 NOT UHVT_N 
ndio25ll6 = ndio25ll5 NOT VTUL_N 
ndio25ll7 = ndio25ll6 NOT EHVT_N 
ndio25ll = ndio25ll7 NOT eVTL_N  //  2.5v low leakage N+/PW diode

//* Define device -- diode pdio_uhvt
pdiouh = pdiouh2 NOT OD_HG  //  CORE P+/NW Ultra HIGH_VT DIODE

//* Define device -- diode ndio_uhvt
ndiouh = ndiouh2 NOT OD_HG  //  CORE N+/PW ULTRA HIGH_VT DIODE

//* Define device -- diode pdio_ehvt
pdio6b = pdio6a NOT UHVT_P 
pdioeh1 = pdio6b AND EHVT_P 
pdioeh2 = pdioeh1 NOT DIODMY_L 
pdioeh = pdioeh2 NOT OD_HG  //  CORE P+/NW Extreme HIGH_VT DIODE

//* Define device -- diode ndio_ehvt
ndioeh1 = ndio8b AND EHVT_N 
ndioeh2 = ndioeh1 NOT DIODMY_L 
ndioeh = ndioeh2 NOT OD_HG  //  CORE N+/PW Extreme High-Vt DIODE

//* Define device -- bjt pnp10
BJTDMY = BJTDMYi NOT SR_DOD 
ttdiff1 = tpdiff_all AND BJTDMY 
ttdiff = COPY ttdiff1 
nbase1k = nxwell NOT INTERACT DNW 
nbase11 = nbase1k AND BJTDMY 
nbase1 = COPY nbase11 
cnbase1 = nbase1 NOT OD25  //  define CORE BJT[PV] base terminal
cemit1a = ttdiff AND cnbase1 
cemit1 = cemit1a INTERACT RPO  //  define CORE BJT[PV] emitter
cemit10_org = AREA cemit1  > 99.999  < 100.001 
cemit10 = cemit10_org AND LVSDMYi 

//***** Define connectivity/via layer -- coll1 ****
collsur = psub TOUCH nbase1 
coll1a = collsur OR nbase1  //  define both BJTs collector
npnrg = DNW AND BJTDMY  //  define NPN region
nndiff1 = tndiff_all AND npnrg 
nndiff = COPY nndiff1 
pbase1 = psub AND npnrg 
cpbase11 = pbase1 NOT OD25 
cpbase1 = cpbase11 NOT OD_50F 
cnemit1a = nndiff AND cpbase1 
cnemit1 = cnemit1a INTERACT RPO  //  define CORE BJT[NV] emitter
collsura = collsur TOUCH cnemit1 
ipbase1 = pbase1 AND OD25  //  define I/O  BJT[N1] base terminal
inemit1 = nndiff AND ipbase1  //  define I/O  BJT[N1] emitter
collsurb = collsur TOUCH inemit1 
collsurall = collsura OR collsurb 
coll1b = coll1a NOT collsurall 
coll1 = coll1b NOT cemit1  //   define pnp collector

//* Define device -- bjt pnp5
cemit5_org = AREA cemit1  > 24.999  < 25.001 
cemit5 = cemit5_org AND LVSDMYi 

//* Define device -- bjt pnp2
cemit2_org = AREA cemit1  > 3.999  < 4.001 
cemit2 = cemit2_org AND LVSDMYi 

//* Define device -- bjt pnp1d6
cemit1d6_org = AREA cemit1  > 2.559  < 2.561 
cemit1d6 = cemit1d6_org AND LVSDMYi 

//* Define device -- bjt npn10
cnemit10_org = AREA cnemit1  > 99.999  < 100.001 
cnemit10 = cnemit10_org AND LVSDMYi 

//***** Define connectivity/via layer -- ncoll1 ****
ncollrg = nxwell AND npnrg 
ncolls = ncollrg TOUCH pbase1 
ncoll1 = ncolls OR pbase1  //  define both BJTs collector

//* Define device -- bjt npn5
cnemit5_org = AREA cnemit1  > 24.999  < 25.001 
cnemit5 = cnemit5_org AND LVSDMYi 

//* Define device -- bjt npn2
cnemit2_org = AREA cnemit1  > 3.999  < 4.001 
cnemit2 = cnemit2_org AND LVSDMYi 

//* Define device -- bjt npn1d6
cnemit1d6_org = AREA cnemit1  > 2.559  < 2.561 
cnemit1d6 = cnemit1d6_org AND LVSDMYi 

//* Define device -- bjt pnp10_mis
cemit10_mac = cemit10_org NOT LVSDMYi 

//* Define device -- bjt pnp5_mis
cemit5_mac = cemit5_org NOT LVSDMYi 

//* Define device -- bjt pnp2_mis
cemit2_mac = cemit2_org NOT LVSDMYi 

//* Define device -- bjt pnp1d6_mis
cemit1d6_mac = cemit1d6_org NOT LVSDMYi 

//* Define device -- bjt npn10_mis
cnemit10_mac = cnemit10_org NOT LVSDMYi 

//* Define device -- bjt npn5_mis
cnemit5_mac = cnemit5_org NOT LVSDMYi 

//* Define device -- bjt npn2_mis
cnemit2_mac = cnemit2_org NOT LVSDMYi 

//* Define device -- bjt npn1d6_mis
cnemit1d6_mac = cnemit1d6_org NOT LVSDMYi 

//* Define device -- c cm
p3 = p3i NOT p3d1 
mim_r1 = crown AND p3 
mim_r2 = mim_r1 AND OD 
mim_r3 = mim_r2 NOT INTERACT RPO 
mim_r = mim_r3 INTERACT blc 

//* Define device -- c cm_decap
mim_r4 = crown AND p3 
mim_r5 = mim_r4 AND PO 
mim_r5a = mim_r5 AND CLDD 
mim_r5b = mim_r5a AND EDRAM_DECAP 
mim_r6 = mim_r5b INTERACT NP 
mim_r_decap = mim_r6 INTERACT blc 

//* Define device -- xdev nmoscap
vargt2a = vargt21 NOT OD_12 
vargt2b = vargt2a NOT VAR10 
vargt2 = vargt2b NOT VAR11 
vargt3 = vargt2 NOT OD18 
vargt4 = vargt3 NOT OD25 
vargt5 = vargt4 NOT DCO 
vargt7 = vargt5 NOT OD33 
vargt8 = vargt7 NOT OD15 
vargt9 = vargt8 NOT OD_50F 
vargt = vargt9 NOT OD1T  //  Varactor on thin oxide

//* Define device -- xdev pmoscap
vargt4_p = vargt2_p NOT OD_12 
vargt5_p = vargt4_p NOT OD15 
vargt6_p = vargt5_p NOT OD18 
vargt7_p = vargt6_p NOT OD25 
vargt_p = vargt7_p NOT OD_50F 

//* Define device -- xdev nmoscap_25
vargt_25 = vargt2 AND OD25  //  Varactor on 2.5v thick oxide

//* Define device -- xdev pmoscap_25
vargt_25_p = vargt6_p AND OD25  //  PMOS Varactor on 2.5v oxide

//* Define device -- xdev nmoscap_edc
vargt_edc = vargt9 AND OD1T  //  eDRAM Varactor on thin oxide

//* Define device -- xdev nmoscap_15
vargt_15 = vargt7 AND OD15  //  Varactor on 1.5v oxide

//* Define device -- xdev nmoscap_33
vargt_33 = vargt2 AND OD33  //  Varactor on 3.3v thick oxide

//* Define device -- xdev nmoscap_18
vargt_18 = vargt2 AND OD18 

//* Define device -- xdev pmoscap_18
vargt_18_p = vargt5_p AND OD18  //  PMOS Varactor on 1.8v oxide

//* Define device -- xdev dmoscap_rf
var10_nw_rf_2a = var10_nw_rf_1 NOT INTERACT OD18 
var10_nw_rf_2 = var10_nw_rf_2a NOT INTERACT OD25 
var10_dvar = var10_nw_rf_2 AND DNW 

//***** Define connectivity/via layer -- n_poly3 ****
poly3b = poly3a AND RFDMY 
poly3c = poly3b NOT DPO 
poly3 = poly3c AND VAR  //  RF VARACTOR PLUS pin ( exclude SR_DPO )
p_poly3 = poly3 AND PP 
n_poly3 = poly3 NOT p_poly3 

//* Define device -- xdev dmoscap_rf25_nw
gate_a_rf = gate_a AND RFDMY 
var10gt_rf = gate_a_rf AND VAR10_RF 

//* Define device -- xdev dmoscap_rf_nw
var10_nw = var10_nw_rf_2 NOT DNW 

//* Define device -- xdev dmoscap_rf18
var10_nw_rf18_1 = var10_nw_rf_1 INTERACT OD18 
var10_rf18 = var10_nw_rf18_1 AND DNW 

//* Define device -- xdev dmoscap_rf18_nw
var10_nw_rf18 = var10_nw_rf18_1 NOT DNW 

//* Define device -- xdev dmoscap_rf25
var10_nw_rf25_1 = var10_nw_rf_1 INTERACT OD25 
var10_rf25 = var10_nw_rf25_1 AND DNW 
var10_nw_rf25 = var10_nw_rf25_1 NOT DNW 

//* Define device -- xdev cmoscap_rf
var11_nw_rf_2 = var11_nw_rf_1 INTERACT POI 
var11_nw_rf_3 = var11_nw_rf_2 NOT INTERACT OD18 
var11_nw_rf_4 = var11_nw_rf_3 NOT INTERACT OD25 
var11_cvar = var11_nw_rf_4 AND DNW 

//* Define device -- xdev cmoscap_rf25_nw
var11gt_rf = gate_a_rf AND VAR11_RF 

//* Define device -- xdev cmoscap_rf_nw
var11_nw = var11_nw_rf_4 NOT DNW 

//* Define device -- xdev cmoscap_rf18
var11_nw_rf18_1 = var11_nw_rf_2 INTERACT OD18 
var11_rf18 = var11_nw_rf18_1 AND DNW 

//* Define device -- xdev cmoscap_rf18_nw
var11_nw_rf18 = var11_nw_rf18_1 NOT DNW 

//* Define device -- xdev cmoscap_rf25
var11_nw_rf25_1 = var11_nw_rf_2 INTERACT OD25 
var11_rf25 = var11_nw_rf25_1 AND DNW 
var11_nw_rf25 = var11_nw_rf25_1 NOT DNW 

//* Define device -- xdev pcmoscap_rf
od_rfvar1 = OD AND VAR_RF 
XJ_RF = VAR_RF1 NOT VAR_RF 
od_rfvar2 = OD AND XJ_RF 
od_rfvar3 = od_rfvar1 OR od_rfvar2 
od_rfvar4 = od_rfvar3 INTERACT ODI 
od_rfvar5 = od_rfvar3 NOT od_rfvar4 
od_rfvar = SIZE od_rfvar5 BY 0.005 
var_pw_rf1c = var_pw_rf1b NOT od_rfvar 
cvar_pw_rf1 = var_pw_rf1c NOT OD18 
cvar_pw_rf2 = cvar_pw_rf1 NOT OD25 
cvar_pw_rf3 = cvar_pw_rf2 AND DNW 
cvar_pw_rf = cvar_pw_rf3 AND VAR11 

//* Define device -- xdev pmoscap_rf
pvargt_rf1 = gate_a_rf AND VAR_RF 
OD2a = OD25 OR OD25_18 
OD2b = OD2a OR OD25_33 
OD2c = OD2b OR OD15 
OD2d = OD2c OR OD18 
OD2_mos1 = OD2d OR OD33 
OD2_mos = OD2_mos1 OR OD_50F 
pvargt_rf = pvargt_rf1 NOT OD2_mos 

//* Define device -- xdev pcmoscap_rf18
cvar_pw_rf181 = var_pw_rf1c AND OD18 
cvar_pw_rf182 = cvar_pw_rf181 NOT OD25 
cvar_pw_rf183 = cvar_pw_rf182 AND DNW 
cvar_pw_rf18 = cvar_pw_rf183 AND VAR11 

//* Define device -- xdev pmoscap_rf18
pvargt_rf18 = pvargt_rf1 AND OD18 

//* Define device -- xdev pcmoscap_rf25
cvar_pw_rf251 = cvar_pw_rf1 AND OD25 
cvar_pw_rf252 = cvar_pw_rf251 AND DNW 
cvar_pw_rf25 = cvar_pw_rf252 AND VAR11 
pvargt_rf25 = pvargt_rf1 AND OD25 

//* Define device -- xdev ndio_hia_rf
hia_ndio0 = tndiff_all AND HIA_DUMMY 
hia_ndio1 = hia_ndio0 AND DIODMY 
hia_ndio2 = hia_ndio1 NOT DIODMY_L 
hia_ndio3 = hia_ndio2 AND psub 
hia_ndio4 = hia_ndio3 AND SR_ESD 
hia_ndio5 = hia_ndio4 NOT OD15 
hia_ndio6 = hia_ndio5 NOT OD18 
hia_ndio7 = hia_ndio6 NOT OD25 
hia_ndio8 = hia_ndio7 NOT OD33 
hia_ndio9 = hia_ndio8 NOT OD_12 
hia_ndio10 = hia_ndio9 NOT NT_N 
hia_ndio11 = hia_ndio10 NOT VTL_N 
hia_ndio12 = hia_ndio11 NOT VTH_N 
hia_ndio13 = hia_ndio12 NOT VTUL_N 
hia_ndio14 = hia_ndio13 NOT CHVT_N 
hia_ndio15 = hia_ndio14 NOT UHVT_N 
hia_ndio_rf = hia_ndio15 AND RFDMY 
hia_ndio_rf_r = HIA_DUMMY INTERACT hia_ndio_rf  //    Define RF HIA Diode N+/PW Region 

//* Define device -- xdev pdio_hia_rf
hia_pdio0 = tpdiff_all AND HIA_DUMMY 
hia_pdio1 = hia_pdio0 AND DIODMY 
hia_pdio2 = hia_pdio1 NOT DIODMY_L 
hia_pdio3 = hia_pdio2 AND nxwell 
hia_pdio4 = hia_pdio3 AND SR_ESD 
hia_pdio5 = hia_pdio4 NOT OD15 
hia_pdio6 = hia_pdio5 NOT OD18 
hia_pdio7 = hia_pdio6 NOT OD25 
hia_pdio8 = hia_pdio7 NOT OD33 
hia_pdio9 = hia_pdio8 NOT OD_12 
hia_pdio10 = hia_pdio9 NOT VTL_P 
hia_pdio11 = hia_pdio10 NOT VTH_P 
hia_pdio12 = hia_pdio11 NOT VTUL_P 
hia_pdio13 = hia_pdio12 NOT UHVT_P 
hia_pdio14 = hia_pdio13 NOT OD1T 
hia_pdio_rf = hia_pdio14 AND RFDMY 
hia_pdio_rf_r = HIA_DUMMY INTERACT hia_pdio_rf  //    Define RF HIA Diode P+/NW Region

//***** Define connectivity/via layer -- RFDMY_HIA_bulk ****
RFDMY_HIA_bulk1 = nxwell AND HIA_DUMMY 
RFDMY_HIA_bulk2 = RFDMY_HIA_bulk1 INSIDE RFDMY 
RFDMY_HIA_bulk = RFDMY INTERACT RFDMY_HIA_bulk2 

//* Define device -- xdev nmos_rf_nw
gate_rfb = gate_a_rf AND poly_rf 
gate_rf = gate_rfb NOT VAR 
gate_rfnnw = gate_rf NOT nxwell  //  gate_rf not inside nwell
ngate_rf1 = gate_rfnnw AND NP 
ngate_rf2 = ngate_rf1 NOT NT_N 
OD_thk = OD33 OR OD25 
OD2_a = OD_thk OR OD18 
OD2 = OD2_a OR OD15 
ngate_rf3 = ngate_rf2 NOT OD2 
ngate_rfa = ngate_rf3 NOT VTH_N 
ngate_rfb = ngate_rfa NOT VTL_N 
ngate_rfc = ngate_rfb NOT ILVT 
ngate_rf = ngate_rfc NOT VTUL_N  //  CORE RF nmos
ngate_nthin1 = nthin INTERACT ngate_rf 
ngate_nthin2 = ngate_nthin1 NOT RFDMY6T 
ngate_nthin3 = ngate_nthin2 NOT RFDMY5T 
ngate_nthin = ngate_nthin3 NOT INTERACT HVD_N  //  nmos_rf_nw

//***** Define connectivity/via layer -- d_tndiff ****
d_tndiff1 = tndiff_all AND DRAIN 
d_tndiff = d_tndiff1 NOT INTERACT HVD_N 

//***** Define connectivity/via layer -- n_poly_rf ****
p_poly_rf = poly_rf AND PP 
n_poly_rf = poly_rf NOT p_poly_rf 

//***** Define connectivity/via layer -- s_tndiff ****
s_tndiff1 = tndiff_all NOT DRAIN 
s_tndiff2 = s_tndiff1 NOT INTERACT HVD_N 
s_tndiff = s_tndiff2 INTERACT gate_rf 

//* Define device -- xdev nmos_rf_ulvt_6t
tndiff_rf1 = d_tndiff OR s_tndiff 
nthin2_rfhv1 = nthin2 AND HVD_N 
nthin2_rfhv = nthin2_rfhv1 AND RFDMY 
tndiff_hv1 = tndiff_all AND HVD_N 
tndiff_hv2 = tndiff_hv1 NOT DRAIN 
tndiff_hv3 = tndiff_hv2 AND RFDMY 
ngate_rfhv1 = ngate_rf2 NOT ZVT 
ngate_rfhv2 = ngate_rfhv1 NOT VTL_N 
ngate_rfhv3 = ngate_rfhv2 NOT OD25 
ngate_rfhv4 = ngate_rfhv3 AND OD18 
ngate_rfhv18 = ngate_rfhv4 INTERACT HVD_N 
tndiff_hv4 = tndiff_hv3 TOUCH ngate_rfhv18 
d_tndiff_rfhv = nthin2_rfhv OR tndiff_hv4 
tndiff_rf = tndiff_rf1 OR d_tndiff_rfhv 

//* Define device -- xdev nmos_rf_18_nw
ngate_rfio1 = ngate_rf2 AND OD2 
ngate_rfio2 = ngate_rfio1 NOT VTH_N 
ngate_rfio3 = ngate_rfio2 NOT VTL_N 
ngate_rfio4 = ngate_rfio3 NOT ILVT 
ngate_rfio5 = ngate_rfio4 NOT VTUL_N 
ngate_rf_18a = ngate_rfio5 AND OD18 
ngate_rf_18 = ngate_rf_18a NOT OD18_15  //  RF 1.8V nmos
ngate_nthin_181 = nthin INTERACT ngate_rf_18 
ngate_nthin_182 = ngate_nthin_181 NOT RFDMY6T 
ngate_nthin_183 = ngate_nthin_182 NOT RFDMY5T 
ngate_nthin_18 = ngate_nthin_183 NOT INTERACT HVD_N  //   nmos_rf_18_nw

//* Define device -- xdev nmos_rf_18ud15_nw
ngate_rf_18ud = ngate_rf_18a AND OD18_15  //  RF 1.8V nmos under_drive 1.5v
ngate_nthin_18ud1 = nthin INTERACT ngate_rf_18ud 
ngate_nthin_18ud2 = ngate_nthin_18ud1 NOT RFDMY6T 
ngate_nthin_18ud = ngate_nthin_18ud2 NOT RFDMY5T  //   nmos_rf_18ud15_nw

//* Define device -- xdev nmos_rf_25_nw
ngate_rf_25a = ngate_rfio5 AND OD25 
ngate_rf_25b = ngate_rf_25a NOT OD25_33 
ngate_rf_25 = ngate_rf_25b NOT OD25_18 
ngate_nthin_251 = nthin INTERACT ngate_rf_25 
ngate_nthin_252 = ngate_nthin_251 NOT RFDMY6T 
ngate_nthin_253 = ngate_nthin_252 NOT RFDMY5T 
ngate_nthin_25 = ngate_nthin_253 NOT INTERACT DNW  //   nmos_rf_25_nw

//* Define device -- xdev nmos_rf_25ud18_nw
ngate_rf_25ud = ngate_rf_25a AND OD25_18  //  RF 2.5v nmos over_drive 1.8v
ngate_nthin_25ud1 = nthin INTERACT ngate_rf_25ud 
ngate_nthin_25ud2 = ngate_nthin_25ud1 NOT RFDMY6T 
ngate_nthin_25ud3 = ngate_nthin_25ud2 NOT RFDMY6T 
ngate_nthin_25ud = ngate_nthin_25ud3 NOT INTERACT DNW  //   nmos_rf_25ud18_nw

//* Define device -- xdev nmos_rf_25od33_nw
ngate_rf_25od = ngate_rf_25a AND OD25_33  //  RF 2.5v nmos over_drive 3.3v
ngate_nthin_25od1 = nthin INTERACT ngate_rf_25od 
ngate_nthin_25od2 = ngate_nthin_25od1 NOT RFDMY6T 
ngate_nthin_25od3 = ngate_nthin_25od2 NOT RFDMY5T 
ngate_nthin_25od = ngate_nthin_25od3 NOT INTERACT DNW  //   nmos_rf_25od33_nw

//* Define device -- xdev nmos_rf_hvt_nw
ngate_rfhv = ngate_rf3 AND VTH_N  //  CORE RF HVT nmos
ngate_nthin_hv1 = nthin INTERACT ngate_rfhv 
ngate_nthin_hv2 = ngate_nthin_hv1 NOT RFDMY6T 
ngate_nthin_hv = ngate_nthin_hv2 NOT RFDMY5T  //   nmos_rf_hvt_nw

//* Define device -- xdev nmos_rf_ulvt_nw
ngate_rfulv = ngate_rfc AND VTUL_N  //  CORE RF ULVT nmos
ngate_nthin_ulv1 = nthin INTERACT ngate_rfulv 
ngate_nthin_ulv2 = ngate_nthin_ulv1 NOT RFDMY6T 
ngate_nthin_ulv = ngate_nthin_ulv2 NOT RFDMY5T  //   nmos_rf_ulvt_nw

//* Define device -- xdev nmos_rf_lvt_nw
ngate_rflv = ngate_rfa AND VTL_N  //  CORE RF LVT nmos
ngate_nthin_lv1 = nthin INTERACT ngate_rflv 
ngate_nthin_lv2 = ngate_nthin_lv1 NOT RFDMY6T 
ngate_nthin_lv = ngate_nthin_lv2 NOT RFDMY5T  //   nmos_rf_lvt_nw

//* Define device -- xdev pmos_rf_18ud15_nw
gate_rfnw = gate_rf AND nxwell  //  gate_rf inside nwell
pgate_rf1 = gate_rfnw AND PP 
pgate_rf2 = pgate_rf1 NOT NT_N 
pgate_rfio1 = pgate_rf2 AND OD2 
pgate_rfio2 = pgate_rfio1 NOT VTH_P 
pgate_rfio3 = pgate_rfio2 NOT VTL_P 
pgate_rfio4 = pgate_rfio3 NOT ILVT 
pgate_rfio5 = pgate_rfio4 NOT VTUL_P 
pgate_rf_18a = pgate_rfio5 AND OD18 
pgate_rf_18ud = pgate_rf_18a AND OD18_15  //  RF 1.8v pmos gate under_drive 1.5v
pgate_pthin_18ud1 = pthin INTERACT pgate_rf_18ud 
pgate_pthin_18udnw = pgate_pthin_18ud1 NOT RFDMY5T  //  pmos_rf_18ud15_nw

//***** Define connectivity/via layer -- d_tpdiff ****
d_tpdiff = tpdiff_all AND DRAIN 

//***** Define connectivity/via layer -- s_tpdiff ****
s_tpdiff1 = tpdiff_all NOT DRAIN 
s_tpdiff = s_tpdiff1 INTERACT gate_rf 

//* Define device -- xdev pmos_rf_lvt_nw_5t
tpdiff_rf = d_tpdiff OR s_tpdiff 

//* Define device -- xdev pmos_rf_18_nw
pgate_rf_18 = pgate_rf_18a NOT OD18_15  //  RF 1.8V pmos gate 
pgate_pthin_181 = pthin INTERACT pgate_rf_18 
pgate_pthin_18nw = pgate_pthin_181 NOT RFDMY5T  //  pmos_rf_18_nw

//* Define device -- xdev pmos_rf_25_nw
pgate_rf_25a = pgate_rfio5 AND OD25 
pgate_rf_25b = pgate_rf_25a NOT OD25_33 
pgate_rf_25 = pgate_rf_25b NOT OD25_18  //  RF 2.5v pmos gate
pgate_pthin_251 = pthin INTERACT pgate_rf_25 
pgate_pthin_25nw1 = pgate_pthin_251 OUTSIDE DNW 
pgate_pthin_25nw = pgate_pthin_25nw1 NOT RFDMY5T  //   pmos_rf_25_nw

//* Define device -- xdev pmos_rf_25ud18_nw
pgate_rf_25ud = pgate_rf_25a AND OD25_18  //  RF 2.5v pmos gate over_drive 1.8v
pgate_pthin_25ud1 = pthin INTERACT pgate_rf_25ud 
pgate_pthin_25udnw1 = pgate_pthin_25ud1 OUTSIDE DNW 
pgate_pthin_25udnw = pgate_pthin_25udnw1 NOT RFDMY5T  //  pmos_rf_25_nw under_drive 1.8v

//* Define device -- xdev pmos_rf_25od33_nw
pgate_rf_25od = pgate_rf_25a AND OD25_33  //  RF 2.5v pmos gate over_drive 3.3v
pgate_pthin_25od1 = pthin INTERACT pgate_rf_25od 
pgate_pthin_25odnw1 = pgate_pthin_25od1 OUTSIDE DNW 
pgate_pthin_25odnw = pgate_pthin_25odnw1 NOT RFDMY5T  //  pmos_rf_25_nw over_drive 3.3v

//* Define device -- xdev pmos_rf_hvt_nw
pgate_rf3 = pgate_rf2 NOT OD2 
pgate_rfhv = pgate_rf3 AND VTH_P  //  CORE RF HVT pmos gatg
pgate_pthin_hv1 = pthin INTERACT pgate_rfhv 
pgate_pthin_hvnw = pgate_pthin_hv1 NOT RFDMY5T  //  pmos_rf_hvt_nw

//* Define device -- xdev pmos_rf_ulvt_nw
pgate_rfa = pgate_rf3 NOT VTH_P 
pgate_rfb = pgate_rfa NOT VTL_P 
pgate_rfc = pgate_rfb NOT ILVT 
pgate_rfulv = pgate_rfc AND VTUL_P  //  CORE RF ULVT pmos gate
pgate_pthin_ulv1 = pthin INTERACT pgate_rfulv 
pgate_pthin_ulvnw = pgate_pthin_ulv1 NOT RFDMY5T  //  pmos_rf_ulvt_nw

//* Define device -- xdev pmos_rf_lvt_nw
pgate_rflv = pgate_rfa AND VTL_P  //  CORE RF LVT pmos gate
pgate_pthin_lv1 = pthin INTERACT pgate_rflv 
pgate_pthin_lvnw = pgate_pthin_lv1 NOT RFDMY5T  //  pmos_rf_lvt_nw

//* Define device -- xdev pmos_rf_nw
pgate_rf = pgate_rfc NOT VTUL_P  //  CORE RF pmos gate
pgate_pthin1 = pthin INTERACT pgate_rf 
pgate_pthin_nw = pgate_pthin1 NOT RFDMY5T  //  pmos_rf_nw

//* Define device -- xdev nmos_rf_5t
ngate_nthin_5t1 = ngate_nthin1 NOT RFDMY6T 
ngate_nthin_5t = ngate_nthin_5t1 AND RFDMY5T  //  nmos_rf_5t

//* Define device -- xdev nmos_rf_18_5t
ngate_nthin_18_5t1 = ngate_nthin_181 NOT RFDMY6T 
ngate_nthin_18_5t = ngate_nthin_18_5t1 AND RFDMY5T  //   nmos_rf_18_5t

//* Define device -- xdev nmos_rf_18ud15_5t
ngate_nthin_18ud_5t1 = ngate_nthin_18ud1 NOT RFDMY6T 
ngate_nthin_18ud_5t = ngate_nthin_18ud_5t1 AND RFDMY5T  //   nmos_rf_18ud15_5t

//* Define device -- xdev nmos_rf_lvt_5t
ngate_nthin_lv_5t1 = ngate_nthin_lv1 NOT RFDMY6T 
ngate_nthin_lv_5t = ngate_nthin_lv_5t1 AND RFDMY5T  //   nmos_rf_lvt_5t

//* Define device -- xdev nmos_rf_25_5t
ngate_nthin_25_5t1 = ngate_nthin_251 NOT RFDMY6T 
ngate_nthin_25_5t = ngate_nthin_25_5t1 AND RFDMY5T  //   nmos_rf_25_5t

//* Define device -- xdev nmos_rf_25ud18_5t
ngate_nthin_25ud_5t1 = ngate_nthin_25ud1 NOT RFDMY6T 
ngate_nthin_25ud_5t = ngate_nthin_25ud_5t1 AND RFDMY5T  //   nmos_rf_25ud18_5t

//* Define device -- xdev nmos_rf_25od33_5t
ngate_nthin_25od_5t1 = ngate_nthin_25od1 NOT RFDMY6T 
ngate_nthin_25od_5t = ngate_nthin_25od_5t1 AND RFDMY5T  //   nmos_rf_25od33_5t

//* Define device -- xdev nmos_rf_hvt_5t
ngate_nthin_hv_5t1 = ngate_nthin_hv1 NOT RFDMY6T 
ngate_nthin_hv_5t = ngate_nthin_hv_5t1 AND RFDMY5T  //   nmos_rf_hvt_5t

//* Define device -- xdev nmos_rf_ulvt_5t
ngate_nthin_ulv_5t1 = ngate_nthin_ulv1 NOT RFDMY6T 
ngate_nthin_ulv_5t = ngate_nthin_ulv_5t1 AND RFDMY5T  //   nmos_rf_ulvt_5t

//* Define device -- xdev pmos_rf_5t
pgate_pthin2 = pgate_pthin1 INSIDE DNW 
pgate_pthin_5t = pgate_pthin2 AND RFDMY5T  //  pmos_rf_5t

//***** Define connectivity/via layer -- rfdmy56 ****
rfdmy56 = RFDMY5T OR RFDMY6T 

//* Define device -- xdev pmos_rf_nw_5t
pgate_pthin_nw1 = pgate_pthin1 OUTSIDE DNW 
pgate_pthin_nw_5t = pgate_pthin_nw1 AND RFDMY5T  //  pmos_rf_nw_5t

//* Define device -- xdev pmos_rf_18_5t
pgate_pthin_182 = pgate_pthin_181 INSIDE DNW 
pgate_pthin_18_5t = pgate_pthin_182 AND RFDMY5T  //  pmos_rf_18_5t

//* Define device -- xdev pmos_rf_18_nw_5t
pgate_pthin_18nw1 = pgate_pthin_181 OUTSIDE DNW 
pgate_pthin_18nw_5t = pgate_pthin_18nw1 AND RFDMY5T  //  pmos_rf_18_nw_5t

//* Define device -- xdev pmos_rf_18ud15_5t
pgate_pthin_18ud2 = pgate_pthin_18ud1 INSIDE DNW 
pgate_pthin_18ud_5t = pgate_pthin_18ud2 AND RFDMY5T  //  pmos_rf_18ud15_5t 

//* Define device -- xdev pmos_rf_18ud15_nw_5t
pgate_pthin_18udnw1 = pgate_pthin_18ud1 OUTSIDE DNW 
pgate_pthin_18udnw_5t = pgate_pthin_18udnw1 AND RFDMY5T  //  pmos_rf_18_nw_5t

//* Define device -- xdev pmos_rf_25_5t
pgate_pthin_252 = pgate_pthin_251 INSIDE DNW 
pgate_pthin_25_5t = pgate_pthin_252 AND RFDMY5T  //   pmos_rf_25_5t

//* Define device -- xdev pmos_rf_25_nw_5t
pgate_pthin_25nw_5t = pgate_pthin_25nw1 AND RFDMY5T  //   pmos_rf_25_nw_5t

//* Define device -- xdev pmos_rf_25ud18_5t
pgate_pthin_25ud2 = pgate_pthin_25ud1 INSIDE DNW 
pgate_pthin_25ud_5t = pgate_pthin_25ud2 AND RFDMY5T  //  pmos_rf_25 under_drive 1.8v(5-Terminals)

//* Define device -- xdev pmos_rf_25ud18_nw_5t
pgate_pthin_25udnw_5t = pgate_pthin_25udnw1 AND RFDMY5T  //  pmos_rf_25_nw under_drive 1.8v(5-Terminals)

//* Define device -- xdev pmos_rf_25od33_5t
pgate_pthin_25od2 = pgate_pthin_25od1 INSIDE DNW 
pgate_pthin_25od_5t = pgate_pthin_25od2 AND RFDMY5T  //  pmos_rf_25 over_drive 3.3v(5-Terminals)

//* Define device -- xdev pmos_rf_25od33_nw_5t
pgate_pthin_25odnw_5t = pgate_pthin_25odnw1 AND RFDMY5T  //  pmos_rf_25_nw over_drive 3.3v(5-Terminals)

//* Define device -- xdev pmos_rf_hvt_5t
pgate_pthin_hv2 = pgate_pthin_hv1 INSIDE DNW 
pgate_pthin_hv_5t = pgate_pthin_hv2 AND RFDMY5T  //  pmos_rf_hvt_5t

//* Define device -- xdev pmos_rf_hvt_nw_5t
pgate_pthin_hvnw1 = pgate_pthin_hv1 OUTSIDE DNW 
pgate_pthin_hvnw_5t = pgate_pthin_hvnw1 AND RFDMY5T  //  pmos_rf_hvt_nw_5t

//* Define device -- xdev pmos_rf_ulvt_5t
pgate_pthin_ulv2 = pgate_pthin_ulv1 INSIDE DNW 
pgate_pthin_ulv_5t = pgate_pthin_ulv2 AND RFDMY5T  //  pmos_rf_ulvt_5t

//* Define device -- xdev pmos_rf_ulvt_nw_5t
pgate_pthin_ulvnw1 = pgate_pthin_ulv1 OUTSIDE DNW 
pgate_pthin_ulvnw_5t = pgate_pthin_ulvnw1 AND RFDMY5T  //  pmos_rf_ulvt_nw_5t

//* Define device -- xdev pmos_rf_lvt_5t
pgate_pthin_lv2 = pgate_pthin_lv1 INSIDE DNW 
pgate_pthin_lv_5t = pgate_pthin_lv2 AND RFDMY5T  //  pmos_rf_lvt_5t
pgate_pthin_lvnw1 = pgate_pthin_lv1 OUTSIDE DNW 
pgate_pthin_lvnw_5t = pgate_pthin_lvnw1 AND RFDMY5T  //  pmos_rf_lvt_nw_5t

//* Define device -- xdev nmos_rf_6t
ngate_nthin_6t1 = ngate_nthin1 NOT RFDMY5T 
ngate_nthin_6t = ngate_nthin_6t1 AND RFDMY6T  //  nmos_rf_6t

//* Define device -- xdev nmos_rf_18_6t
ngate_nthin_18_6t1 = ngate_nthin_181 NOT RFDMY5T 
ngate_nthin_18_6t = ngate_nthin_18_6t1 AND RFDMY6T  //   nmos_rf_18_6t

//* Define device -- xdev nmos_rf_18ud15_6t
ngate_nthin_18ud_6t1 = ngate_nthin_18ud1 NOT RFDMY5T 
ngate_nthin_18ud_6t = ngate_nthin_18ud_6t1 AND RFDMY6T  //   nmos_rf_18ud15_6t

//* Define device -- xdev nmos_rf_lvt_6t
ngate_nthin_lv_6t1 = ngate_nthin_lv1 NOT RFDMY5T 
ngate_nthin_lv_6t = ngate_nthin_lv_6t1 AND RFDMY6T  //  nmos_rf_lvt_6t

//* Define device -- xdev nmos_rf_25_6t
ngate_nthin_25_6t1 = ngate_nthin_251 NOT RFDMY5T 
ngate_nthin_25_6t = ngate_nthin_25_6t1 AND RFDMY6T  //   nmos_rf_25_6t

//* Define device -- xdev nmos_rf_25ud18_6t
ngate_nthin_25ud_6t1 = ngate_nthin_25ud1 NOT RFDMY5T 
ngate_nthin_25ud_6t = ngate_nthin_25ud_6t1 AND RFDMY6T  //   nmos_rf_25ud18_6t

//* Define device -- xdev nmos_rf_25od33_6t
ngate_nthin_25od_6t1 = ngate_nthin_25od1 NOT RFDMY5T 
ngate_nthin_25od_6t = ngate_nthin_25od_6t1 AND RFDMY6T  //   nmos_rf_25od33_6t

//* Define device -- xdev nmos_rf_hvt_6t
ngate_nthin_hv_6t1 = ngate_nthin_hv1 NOT RFDMY5T 
ngate_nthin_hv_6t = ngate_nthin_hv_6t1 AND RFDMY6T  //  nmos_rf_hvt_6t
ngate_nthin_ulv_6t1 = ngate_nthin_ulv1 NOT RFDMY5T 
ngate_nthin_ulv_6t = ngate_nthin_ulv_6t1 AND RFDMY6T  //  nmos_rf_ulvt_6t
var_pw_rf1d = var_pw_rf1c NOT VAR10 
var_pw_rf1 = var_pw_rf1d NOT VAR11 
var_pw_rf2 = var_pw_rf1 NOT OD18 
var_pw_rf3 = var_pw_rf2 NOT OD25 
var_pw_rf = var_pw_rf3 AND DNW 
var_pw_rf18a = var_pw_rf1 AND OD18 
var_pw_rf18 = var_pw_rf18a AND DNW 

//* Define device -- xdev rnwsti
trwell_0 = NWDMY AND NW  //  N-well resistor layer
trwell = COPY trwell_0  //  N-well resistor layer
drpo = diff AND RPO 
nwsti_r1 = trwell NOT drpo  //  NWDMY*NW-RPO-diff --> nwsti
nwsti_r = nwsti_r1 INTERACT NWDMYi  //  NWDMY*NW --> nwsti

//* Define device -- xdev rnwsti_m
nwsti_mr = nwsti_r1 INTERACT NWDMY1  //  NWDMY*NW --> nwsti (3-Terminals)

//* Define device -- xdev rnwod
nwod_r1 = trwell AND drpo 
nwod_r = nwod_r1 INTERACT NWDMYi  //  NWDMY*NW*RPO*diff --> nwod (2-Terminals)

//* Define device -- xdev rnwod_m
nwod_mr = nwod_r1 INTERACT NWDMY1  //  NWDMY*NW*RPO*diff --> nwod (3-Terminals)

//* Define device -- xdev rupolym
rupolym_r1 = rpolywo AND PP 
rupolym_r2 = rupolym_r1 AND PMETAL  //  high R resistor
RPDMYi_noRF = RPDMYi NOT INTERACT RFDMY 
rupolym_r = rupolym_r2 INTERACT RPDMYi_noRF  //   high R resistor w/o silicide (2-Terminals) 

//***** Define connectivity/via layer -- p_poly ****
p_poly_1 = poly_cci AND PP 
p_poly_cci = p_poly_1 NOT metal_interface 

#IFNDEF CCI_DECK
  p_poly = copy p_poly_cci
#ENDIF


//* Define device -- xdev rupolym_m
RPDMY1_noRF = RPDMY1 NOT INTERACT RFDMY 
rupolym_d = rupolym_r2 INTERACT RPDMY1_noRF  //   high R resistor w/o silicide (3-Terminals)  
rupolym_dp = rupolym_d AND psub 
rupolym_dn = rupolym_d AND nxwell 

//* Define device -- xdev rupolym_rf
rupolym_rfr = rupolym_r2 AND RFDMY  //   RF high R resistor w/o silicide (3-Terminals)

//* Define device -- xdev rnmg
rnmg_r1 = rpoly AND NP 
rnmg_r = rnmg_r1 INTERACT RPDMYi  //  N+ metal gate resistor (2-Terminals)

//***** Define connectivity/via layer -- n_poly ****
n_poly_1 = poly_cci NOT p_poly_cci 
n_poly_cci = n_poly_1 NOT metal_interface 

#IFNDEF CCI_DECK
  n_poly = copy n_poly_cci
#ENDIF


//* Define device -- xdev rnmg_m
rnmg_d = rnmg_r1 INTERACT RPDMY1  //  N+ metal gate resistor (3-Terminals)
rnmg_dp = rnmg_d AND psub 
rnmg_dn = rnmg_d AND nxwell 

//* Define device -- xdev rpmg
rpmg_r1 = rpoly AND PP 
rpmg_r2 = rpmg_r1 INTERACT PMETAL 
rpmg_r = rpmg_r2 INTERACT RPDMYi  //  P+ metal gate resistor (2-Terminals)

//* Define device -- xdev rpmg_m
rpmg_d = rpmg_r2 INTERACT RPDMY1  //  P+ metal gate resisotr (3-Terminals)
rpmg_dp = rpmg_d AND psub 
rpmg_dn = rpmg_d AND nxwell 

//* Define device -- xdev rpodwo
rpodwo_r1 = rodwo AND PP 
rpodwo_r = rpodwo_r1 INTERACT RPDMYi  //  P+OD resistor w/o silicide (2-Terminals)

//* Define device -- xdev rnodwo
rnodwo_r1 = rodwo AND NP 
rnodwo_r = rnodwo_r1 INTERACT RPDMYi  //  N+OD resistor w/o silicide (2-Terminals)

//* Define device -- xdev rpodl
rpod = rod AND PP  //  P+OD resistor w/i silicide
rpod_edge = rpod INSIDE EDGE diff 
l_rpod = LENGTH rpod_edge  >= 2  < 99999999 
rpodl_r1 = rpod WITH EDGE l_rpod 
rpodl_r = rpodl_r1 INTERACT RPDMYi  //  P+OD resistor w/i silicide >= 2 (2-Terminals)

//* Define device -- xdev rnodl
rnod = rod AND NP  //  ALL N+OD resistor w/i silicide
rnod_edge = rnod INSIDE EDGE diff 
l_rnod = LENGTH rnod_edge  >= 2  < 99999999 
rnodl_r1 = rnod WITH EDGE l_rnod 
rnodl_r = rnodl_r1 INTERACT RPDMYi  //  N+OD resistor w/i silicide >= 2  (2-Terminals)

//* Define device -- xdev rpods
rpods_r1 = rpod NOT rpodl_r1 
rpods_r = rpods_r1 INTERACT RPDMYi  //  P+OD resistor w/i silicide < 2 (2-Terminals)

//* Define device -- xdev rnods
rnods_r1 = rnod NOT rnodl_r1 
rnods_r = rnods_r1 INTERACT RPDMYi  //  N+OD resistor w/i silicide < 2  (2-Terminals)

//* Define device -- xdev rm1w
metal1i = M1i OR DUM1  // ALL metal pattern
M1X = metal1i OR CO 
mt1resa = M1X AND RMDMY1  //  M1 resistor
mt1res = mt1resa INTERACT M1i 

//***** Define connectivity/via layer -- M1 ****
metal1a = M1X NOT mt1res 
M1 = COPY metal1a 

//* Define device -- xdev rm2w
metal2i = M2i OR DUM2  // ALL metal pattern
mt2resa = metal2i AND RMDMY2  //  M2 resistor
mt2res = mt2resa INTERACT M2i  //  M2 resistor

//***** Define connectivity/via layer -- M2 ****
metal2a = metal2i NOT mt2res 
M2 = COPY metal2a 

//* Define device -- xdev rm3w
metal3i = M3i OR DUM3  // ALL metal pattern
sym_ct_rl_ind1 = INDDMYi WITH TEXT "spiral_sym_ct_rl" IND_TEXT 
sym_ct_rl_ind = SIZE sym_ct_rl_ind1 BY 15  //  enlarge inddmy to cover entire rl_ind device 
INDDMY = INDDMYi OR sym_ct_rl_ind 
M3Y = metal3i NOT INDDMY 
mt3resa = M3Y AND RMDMY3  //  M3 resistor
mt3res = mt3resa INTERACT M3i  //  M3 resistor

//***** Define connectivity/via layer -- M3 ****
metal3a = M3Y NOT mt3res 
M3 = COPY metal3a 

//* Define device -- xdev rm4w
metal4i = M4i OR DUM4  // ALL metal pattern
M4Y = metal4i NOT INDDMY 
mt4resa = M4Y AND RMDMY4  //  M4 resistor
mt4res = mt4resa INTERACT M4i  //  M4 resistor

//***** Define connectivity/via layer -- M4 ****
metal4a = M4Y NOT mt4res 
M4 = COPY metal4a 

//* Define device -- xdev rm5w
metal5i = M5i OR DUM5  // ALL metal pattern
M5Y = metal5i NOT INDDMY 
mt5resa = M5Y AND RMDMY5  //  M5 resistor
mt5res = mt5resa INTERACT M5i  //  M5 resistor

//***** Define connectivity/via layer -- M5 ****
metal5a = M5Y NOT mt5res 
M5 = COPY metal5a 

//* Define device -- xdev rm6w
metal6i = M6i OR DUM6  // ALL metal pattern
M6Y = metal6i NOT INDDMY 
mt6resa = M6Y AND RMDMY6  //  M6 resistor
mt6res = mt6resa INTERACT M6i  //  M6 resistor

//***** Define connectivity/via layer -- M6 ****
metal6a = M6Y NOT mt6res 
M6 = COPY metal6a 

//* Define device -- xdev rm7w
metal7i = M7i OR DUM7  // ALL metal pattern
M7Y = metal7i NOT INDDMY 
mt7resa = M7Y AND RMDMY7  //  M7 resistor
mt7res = mt7resa INTERACT M7i  //  M7 resistor

//***** Define connectivity/via layer -- M7 ****
metal7a = M7Y NOT mt7res 
M7 = COPY metal7a 

//* Define device -- xdev rm8w
metal8i = M8i OR DUM8  // ALL metal pattern
M8Y = metal8i NOT INDDMY 
mt8resa = M8Y AND RMDMY8  //  M8 resistor
mt8res = mt8resa INTERACT M8i  //  M8 resistor

//***** Define connectivity/via layer -- M8 ****
metal8a = M8Y NOT mt8res 
M8 = COPY metal8a 

//* Define device -- xdev rm9w
metal9i = M9i OR DUM9  // ALL metal pattern
M9Y = metal9i NOT INDDMY 
mt9resa = M9Y AND RMDMY9  //  M9 resistor
mt9res = mt9resa INTERACT M9i  //  M9 resistor

//***** Define connectivity/via layer -- M9 ****
M9 = M9Y NOT mt9res  //  M9 interconnect

//* Define device -- xdev rmap
APX = APi OR APD 
APY = APX NOT INDDMY 
mtAPresa = APY AND RMDMYAP 
mtAPresb = APY NOT RMDMYAP 
mtAPres = mtAPresa INTERACT mtAPresb == 2 //  AP resistor

//***** Define connectivity/via layer -- AP ****
AP = APY NOT mtAPres  //  AP interconnect

//* Define device -- xdev rpodwo_m
rpodwo_mr = rpodwo_r1 INTERACT RPDMY1  //  P+OD resistor w/o silicide (3-Terminals)

//* Define device -- xdev rnodwo_m
rnodwo_mr = rnodwo_r1 INTERACT RPDMY1  //  N+OD resistor w/o silicide (3-Terminals)

//* Define device -- xdev rpodl_m
rpodl_mr = rpodl_r1 INTERACT RPDMY1  //  P+OD resistor w/i silicide >= 2 (3-Terminals)

//* Define device -- xdev rnodl_m
rnodl_mr = rnodl_r1 INTERACT RPDMY1  //  N+OD resistor w/i silicide >= 2  (3-Terminals)

//* Define device -- xdev rpods_m
rpods_mr = rpods_r1 INTERACT RPDMY1  //  P+OD resistor w/i silicide < 2 (3-Terminals)

//* Define device -- xdev rnods_m
rnods_mr = rnods_r1 INTERACT RPDMY1  //  N+OD resistor w/i silicide < 2  (3-Terminals)

//* Define device -- xdev dnwpsub
dnwdio_b = nxwell INTERACT DNW 
dnwdio_a = nxwell INSIDE DNW 
dnwdio_k = dnwdio_b NOT dnwdio_a 
dnwdio1 = DNW INTERACT dnwdio_k 
pmos_rf5t = RFDMY5T INTERACT pgate_rf1 
dnwdio2 = dnwdio1 NOT pmos_rf5t 
dnwdio3 = dnwdio2 NOT RFDMY6T 
dnwdio = dnwdio3 NOT INTERACT VAR_RF 

//***** Define connectivity/via layer -- psub_term ****
psub_term_a = psub2s NOT PSUB2 
psub_term_b = BULK NOT psub_term_a 
psub_term_c = BULK AND DNW 
psub_term_d = BULK NOT psub_term_c 
psub_term_e = psub_term_b AND psub_term_d 
psub_term = psub_term_e INTERACT DNW 

//* Define device -- xdev pwdnw
rwdio1 = DNW NOT nxwell 
rwdio2 = rwdio1 NOT BJTDMY 
rwdio3 = rwdio2 NOT rfdmy56 
rwdio = rwdio3 NOT INTERACT VAR_RF 

//* Define device -- xdev pnwdio
pnwdio1 = nxwell OUTSIDE cnwdio 
pnwdio2 = pnwdio1 NOT DNW 
rwel = psub INSIDE DNW 
pnwdio3 = pnwdio1 INSIDE rwel 
pnwdio4 = pnwdio2 OR pnwdio3 
pnwdio_r1 = pnwdio4 TOUCH psub == 1
pnwdio_r2 = pnwdio_r1 NOT pmos_rf5t 
pnwdio_r3 = pnwdio_r2 NOT RFDMY6T 
pnwdio_r4 = pnwdio_r3 NOT VAR_RF 
pnwdio_r = pnwdio_r4 NOT hia_pdio_rf_r 

//* Define device -- xdev pdio_hia_mac
hia_pdio = hia_pdio14 NOT RFDMY 
hia_pdio_r = HIA_DUMMY INTERACT hia_pdio  //  CORE P+/NW ESD DIODE

//* Define device -- xdev ndio_hia_mac
hia_ndio16 = hia_ndio15 NOT OD1T 
hia_ndio = hia_ndio16 NOT RFDMY 
hia_ndio_r = HIA_DUMMY INTERACT hia_ndio  //  CORE N+/PW ESD DIODE

//* Define device -- xdev mimcap_sin
mim_top = ctm AND cbm 

//***** Define connectivity/via layer -- PROBEM1_T ****
PROBEM1_T1 = SIZE PROBEM1 BY 0.005 
PROBEM1_T = PROBEM1_T1 NOT PROBEM1 

//***** Define connectivity/via layer -- PROBEM2_T ****
PROBEM2_T1 = SIZE PROBEM2 BY 0.005 
PROBEM2_T = PROBEM2_T1 NOT PROBEM2 

//***** Define connectivity/via layer -- PROBEM3_T ****
PROBEM3_T1 = SIZE PROBEM3 BY 0.005 
PROBEM3_T = PROBEM3_T1 NOT PROBEM3 

//***** Define connectivity/via layer -- PROBEM4_T ****
PROBEM4_T1 = SIZE PROBEM4 BY 0.005 
PROBEM4_T = PROBEM4_T1 NOT PROBEM4 

//***** Define connectivity/via layer -- PROBEM5_T ****
PROBEM5_T1 = SIZE PROBEM5 BY 0.005 
PROBEM5_T = PROBEM5_T1 NOT PROBEM5 

//***** Define connectivity/via layer -- PROBEM6_T ****
PROBEM6_T1 = SIZE PROBEM6 BY 0.005 
PROBEM6_T = PROBEM6_T1 NOT PROBEM6 

//***** Define connectivity/via layer -- PROBEM7_T ****
PROBEM7_T1 = SIZE PROBEM7 BY 0.005 
PROBEM7_T = PROBEM7_T1 NOT PROBEM7 

//* Define device -- xdev spiral_sym_ct_lc
sym_ct_lc_ind = INDDMYi WITH TEXT "spiral_sym_ct_lc" IND_TEXT 

//***** Define connectivity/via layer -- indm9p ****
indm9a = SIZE INDDMY BY 0.005 
indm9 = indm9a AND M9Y 
indm9p1 = indm9 NOT IND_MP 
indm9p2 = indm9p1 NOT INTERACT IND_MP 
indm9p3 = indm9p2 NOT IND_D4 
indm9p = indm9p3 INTERACT M9i 

//***** Define connectivity/via layer -- indm9m ****
indm9m = indm9 AND IND_MP 

//***** Define connectivity/via layer -- indm10c ****
indm10c = APY AND IND_D4 

//* Define device -- xdev spiral_sym
sym_ind = INDDMYi WITH TEXT "spiral_sym" IND_TEXT 

//* Define device -- xdev spiral_std_mu_z
std_mu_z_ind = INDDMYi WITH TEXT "spiral_std_mu_z" IND_TEXT 

//* Define device -- xdev spiral_sym_mu_z
sym_mu_z_ind = INDDMYi WITH TEXT "spiral_sym_mu_z" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mu_z_a
sym_ct_mu_z_a_ind = INDDMYi WITH TEXT "spiral_sym_ct_mu_z_a" IND_TEXT 

//* Define device -- xdev spiral_std_mu_z_dm
std_mu_z_ind_dm = INDDMYi WITH TEXT "spiral_std_mu_z_dm" IND_TEXT 

//* Define device -- xdev spiral_sym_mu_z_dm
sym_mu_z_ind_dm = INDDMYi WITH TEXT "spiral_sym_mu_z_dm" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mu_z_a28_dm
sym_ct_mu_z_a28_ind_dm = INDDMYi WITH TEXT "spiral_sym_ct_mu_z_a28_dm" IND_TEXT 

//* Define device -- xdev spiral_std_mu_a28_dm
std_mu_a28_ind_dm = INDDMYi WITH TEXT "spiral_std_mu_a28_dm" IND_TEXT 

//* Define device -- xdev spiral_sym_ct_mu_a28_a28_dm
sym_ct_mu_a28_a28_ind_dm = INDDMYi WITH TEXT "spiral_sym_ct_mu_a28_a28_dm" IND_TEXT 

//* Define device -- xdev spiral_sym_mu_a28_dm
sym_mu_a28_ind_dm = INDDMYi WITH TEXT "spiral_sym_mu_a28_dm" IND_TEXT 

//* Define device -- xdev moscap_rf
var_nw_rf1 = nxwell AND VAR_RF 
var_nw_rf2 = var_nw_rf1 NOT od_rfvar 
var_nw_rf3 = var_nw_rf2 NOT VAR10 
var_nw_rf = var_nw_rf3 NOT VAR11 
var_nwy_rf = var_nw_rf NOT OD_12 
var_nw1_rf = var_nwy_rf NOT OD18 
var_nw2_rf1 = var_nw1_rf NOT OD25 
var_nw2_rf = var_nw2_rf1 NOT OD15 
var_nw3_rf1 = var_nw2_rf NOT OD33 
var_nw3_rf2 = var_nw3_rf1 NOT INTERACT VTH_P 
var_nw3_rf2a = var_nw3_rf2 AND DNW 
var_nw3_rf = var_nw3_rf2a NOT INTERACT VAR14 

//* Define device -- xdev moscap_rf_nw
vargt2_rf = gate_a_rf AND VAR_RF 
vargt_rf1 = vargt2_rf NOT OD2_mos 
vargt_rf = vargt_rf1 NOT VTH_P  //  RF Varactor on thin oxide
var_nw3_rf_nw = var_nw3_rf2 NOT DNW 

//* Define device -- xdev moscap_rf15_nw
var_nw_rf15a = var_nw_rf AND OD15 
var_nw_rf15_nw = var_nw_rf15a NOT DNW 
vargt_rf15 = vargt2_rf AND OD15  //  RF Varactor on 1.5v thick oxide

//* Define device -- xdev moscap_rf18
var_nw_rf18a = var_nw_rf AND OD18 
var_nw_rf18b = var_nw_rf18a AND DNW 
var_nw_rf18 = var_nw_rf18b NOT INTERACT VAR14 

//* Define device -- xdev moscap_rf18_nw
vargt_rf18 = vargt2_rf AND OD18  //  RF Varactor on 1.8v thick oxide
var_nw_rf18_nw = var_nw_rf18a NOT DNW 

//* Define device -- xdev moscap_rf25
var_nw_rf25a = var_nw_rf AND OD25 
var_nw_rf25 = var_nw_rf25a AND DNW 

//* Define device -- xdev moscap_rf25_nw
vargt_rf25 = vargt2_rf AND OD25  //  RF Varactor on 2.5v thick oxide
var_nw_rf25_nw = var_nw_rf25a NOT DNW 

//* Define device -- xdev ndio_gated_mac
mdiff_gdio1 = mdiff AND GATED 
mdiff_gdio = mdiff_gdio1 AND OD18 
gate_gd1 = gate_a1 AND GATED 
gate_gd2 = gate_gd1 INTERACT PP 
gate_gd3 = gate_gd2 INTERACT NP 
gate_gd = gate_gd3 NOT RFDMY 
gate_gdio = gate_gd AND OD18 
ngate_gdio18 = gate_gdio NOT NW 
ndiff_gdio = mdiff_gdio INTERACT ngate_gdio18 

//* Define device -- xdev pdio_gated_mac_3t
npdiff_gdio = mdiff_gdio NOT gate_gd3 

//* Define device -- xdev pdio_gated_mac
pgate_gdio18a = gate_gdio AND NW 
pgate_gdio18 = pgate_gdio18a AND PMETAL 
pgate_gdio18_2t = pgate_gdio18 NOT GATED3T 
pdiff_gdio2 = mdiff_gdio INTERACT pgate_gdio18_2t 
pgate_gdio18_3t = pgate_gdio18 AND GATED3T 
pdiff_gdio3 = mdiff_gdio INTERACT pgate_gdio18_3t 
nw_pgdio = NW INTERACT pgate_gdio18_3t 

//* Define ERC or other layers
ngate_nthin_sob_rf1 = nthin2 NOT ydio 
ngate_nthin_sob_rf = ngate_nthin_sob_rf1 INTERACT ngate_rf1 

//***** Define connectivity/via layer -- polyCont ****
polyCont = CO INTERACT POx 

//***** Define connectivity/via layer -- mom8p2 ****
mom8p21 = M8 AND MOMDMY24 
mom8p2 = mom8p21 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- PROBEM6_B ****
PROBEM6_B = PROBEM6_T AND BULK 

//***** Define connectivity/via layer -- RFDMY_HIA_psub ****
RFDMY_HIA_psub = RFDMY_HIA_bulk NOT nxwell  //    HIA BULK for pdio_hia_rf

//***** Define connectivity/via layer -- mom3p1 ****
mom3p11 = M3 AND MOMDMY23 
mom3p1 = mom3p11 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- PROBEM5_B ****
PROBEM5_B = PROBEM5_T AND BULK 

//***** Define connectivity/via layer -- mom8m1 ****
mom8p11 = M8 AND MOMDMY23 
mom8m1 = mom8p11 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- hia_rf_pplug ****
hia_rf_pplug1 = tpdiff_all AND RFDMY_HIA_bulk 
hia_rf_pplug2 = hia_rf_pplug1 INTERACT CO 
odCont1 = CO INTERACT OD 
p3Cont = CO INTERACT p3 
odCont = odCont1 NOT p3Cont 
tndiffco = tndiff_all INTERACT odCont 
hia_rf_pplug3 = hia_rf_pplug1 INTERACT tndiffco 
hia_rf_pplug4 = hia_rf_pplug2 OR hia_rf_pplug3 
hia_rf_pplug = hia_rf_pplug4 NOT nxwell 

//***** Define connectivity/via layer -- PROBEM2_B ****
PROBEM2_B = PROBEM2_T AND BULK 

//***** Define connectivity/via layer -- d_tndiff_udm ****
d_tndiff_udm = tndiff_all AND udm_rpo 

//***** Define connectivity/via layer -- PROBEM1_B ****
PROBEM1_B = PROBEM1_T AND BULK 

//***** Define connectivity/via layer -- mom5m1 ****
mom5p11 = M5 AND MOMDMY23 
mom5m1 = mom5p11 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- mom7p1 ****
mom7p11 = M7 AND MOMDMY23 
mom7p1 = mom7p11 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- iemit1 ****
inbase1 = nbase1 AND OD25  //  define I/O  BJT[P1] base terminal
iemit1 = ttdiff AND inbase1  //  define I/O  BJT[P1] emitter

//***** Define connectivity/via layer -- PROBEM4_B ****
PROBEM4_B = PROBEM4_T AND BULK 
d_hvnw_area = HVD_N INTERACT diff 
gcon_tmp1 = POI NOT ODI 
gcon_aux2 = gcon_tmp1 INTERACT CO 

//***** Define connectivity/via layer -- mom6m1 ****
mom6p11 = M6 AND MOMDMY23 
mom6m1 = mom6p11 NOT INTERACT MOMDMY25 
dfm_gate1 = gate1 NOT INTERACT SRM_all 
dfm_gate2 = SIZE dfm_gate1 BY WPED
nw_alvt = NW OR NWLVT  //  NW -> NW OR NWLVT for alvt devices
nw_ntn = nw_alvt OR NT_N 
nIO1 = OD2 NOT nw_ntn 
nIO2 = nIO1 OR HVD_P 
nIO = nIO2 NOT HVD_N  //  nmos IO for WPE (clear tone)
c_nmIO_aux = dfm_gate2 AND nIO 

//***** Define connectivity/via layer -- p_blc ****
p_blc = blc AND PP 

//***** Define connectivity/via layer -- PROBEM7_B ****
PROBEM7_B = PROBEM7_T AND BULK 

//***** Define connectivity/via layer -- mom8m2 ****
mom8m2 = mom8p21 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- mom7m2 ****
mom7p21 = M7 AND MOMDMY24 
mom7m2 = mom7p21 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- mom7m1 ****
mom7m1 = mom7p11 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- p_polyCont ****
p_polyCont = polyCont AND PP 
d_nmcore = OD2 OR nw_ntn  //  nmos core for WPE (Dark tone)
nCore = BULK NOT d_nmcore  //  nmos core for WPE (clear tone)
c_nmcore_aux = dfm_gate2 AND nCore 
nplug_g = nplug2 AND GATED 
nplug_g_sz = SIZE nplug_g BY -0.001 
nplug_no_g = nplug2 NOT GATED 
nplug = nplug_g_sz OR nplug_no_g 
nplug_holes = HOLES nplug INNER Empty

//***** Define connectivity/via layer -- n_psub ****
n_psub = BULK NOT psubband 

//***** Define connectivity/via layer -- n_blc ****
n_blc = blc NOT p_blc 
nthin_udm1 = d_tndiff_udm OR s_tndiff_udm 
nthin_udm = nthin_udm1 OR ngate_udm2 

//***** Define connectivity/via layer -- n_odCont ****
p_odCont = odCont AND PP 
n_odCont = odCont NOT p_odCont 

//***** Define connectivity/via layer -- mom4m2 ****
mom4p21 = M4 AND MOMDMY24 
mom4m2 = mom4p21 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- pplug ****
pplug_g = pplug2 AND GATED 
pplug_g_sz = SIZE pplug_g BY -0.001 
pplug_no_g = pplug2 NOT GATED 
pplug = pplug_g_sz OR pplug_no_g 
MOM_field4 = metal4i AND MOMDMY4 

//***** Define connectivity/via layer -- hia_rf_via ****
hia_rf_via1 = RFDMY_HIA_psub AND psub 
hia_rf_via = hia_rf_via1 NOT rwel 

//***** Define connectivity/via layer -- rfdmy56_via ****
rfdmy56_via1 = rfdmy56 AND psub 
rfdmy56_via = rfdmy56_via1 NOT rwel 

//***** Define connectivity/via layer -- d_tndiff_hv ****
d_tndiff_hv_1 = nthin2_hv_d INTERACT ngate_hv18_mac 
d_tndiff_hv = d_tndiff_hv_1 NOT ngate_hv18_mac 

//***** Define connectivity/via layer -- mom4m1 ****
mom4p11 = M4 AND MOMDMY23 
mom4m1 = mom4p11 NOT INTERACT MOMDMY25 
c_pmall = nw_alvt NOT NT_N  //  pmos all for WPE (clear tone)
c_pmcore1 = c_pmall NOT OD2  //  pmos core for WPE 
pCore = COPY c_pmcore1 
c_pmcore_aux = dfm_gate2 AND pCore 
MOM_field5 = metal5i AND MOMDMY5 

//***** Define connectivity/via layer -- n_polyCont ****
n_polyCont = polyCont NOT p_polyCont 

//***** Define connectivity/via layer -- mom5p1 ****
mom5p1 = mom5p11 INTERACT MOMDMY25 
erc_nmos_gates1 = tngate_1 NOT VAR 
erc_nmos_gates2 = erc_nmos_gates1 NOT srm_rp3 
erc_nmos_gates3 = erc_nmos_gates2 NOT SRMD20 
erc_nmos_gates4 = erc_nmos_gates3 NOT SRMD67 
erc_nmos_gates5 = erc_nmos_gates4 NOT SRMD70 
erc_nmos_gates6 = erc_nmos_gates5 NOT SRMD71 
erc_nmos_gates = erc_nmos_gates6 NOT SRMD16 
gate1_not_IO2 = gate1 NOT OD2 
pplug_holes = HOLES pplug INNER Empty
MOM_field2 = metal2i AND MOMDMY2 

//***** Define connectivity/via layer -- d_tpdiff_udm ****
d_tpdiff_udm = tpdiff_all AND udm_rpo 

//***** Define connectivity/via layer -- VIA1 ****
VIA1_vir = VIA1i_VIRT NOT SRMD6 
VIA1 = VIA1i OR VIA1_vir 
MOM_field7 = metal7i AND MOMDMY7 

//***** Define connectivity/via layer -- RV ****
RVa = RVi OR CBD 
RVb = RVa OR CB 
RV = RVb NOT cbm 

//***** Define connectivity/via layer -- nxwell_npn ****
ncollsa = ncolls TOUCH cemit1 
ncollsb = ncolls TOUCH iemit1 
ncollall = ncollsa OR ncollsb 
nxwell_npn = ncolls NOT ncollall 
gcon_edge = ODI TOUCH EDGE gcon_aux2
gcon_aux = EXPAND EDGE gcon_edge INSIDE BY 0.001

//***** Define connectivity/via layer -- mom6p1 ****
mom6p1 = mom6p11 INTERACT MOMDMY25 
erc_pmos_gates1 = alvtpgate1 OR tpgate0 
erc_pmos_gates = erc_pmos_gates1 NOT VAR 

//***** Define connectivity/via layer -- d_tpdiff_hv ****
d_tpdiff_hv_1 = pthin2_hv_d INTERACT pgate_hv18_mac 
d_tpdiff_hv = d_tpdiff_hv_1 NOT pgate_hv18_mac 

//***** Define connectivity/via layer -- mom5p2 ****
mom5p21 = M5 AND MOMDMY24 
mom5p2 = mom5p21 INTERACT MOMDMY25 
pthin_udm1 = d_tpdiff_udm OR s_tpdiff_udm 
pthin_udm = pthin_udm1 OR pgate_udm2 

//***** Define connectivity/via layer -- ntap ****
xwell = NW OUTSIDE NWDMY 
ntapx = tndiff_all AND xwell 
ntap1 = ntapx NOT BJTDMY 
ntap = ntap1 AND plug_sel 
MOM_field3 = metal3i AND MOMDMY3 
nxwell_float1 = nxwell NOT INTERACT VAR  //  exclude nwell under VAR for floating nwell check
nxwell_float2 = nxwell_float1 NOT INTERACT trwell  //  exclude nwell resistor for floating nwell check
nxwell_float = nxwell_float2 NOT TCDDMY  //  exclude dummy nwell under TCDDMY 

//***** Define connectivity/via layer -- PROBEM3_B ****
PROBEM3_B = PROBEM3_T AND BULK 

//***** Define connectivity/via layer -- VIA2 ****
VIA2 = COPY VIA2i 
MOM_field6 = metal6i AND MOMDMY6 
c_pmIO1_a = c_pmall AND OD2 
c_pmIO1_b = c_pmIO1_a OR HVD_N 
c_pmIO1 = c_pmIO1_b NOT HVD_P  //  pmos io for WPE 
pIO = COPY c_pmIO1 

//***** Define connectivity/via layer -- mom5m2 ****
mom5m2 = mom5p21 NOT INTERACT MOMDMY25 
pgate_pthin_sob_rf = pthin2 INTERACT pgate_rf1 

//***** Define connectivity/via layer -- dnwc ****
dnwc = DNW AND nxwell 

//***** Define connectivity/via layer -- mom4p2 ****
mom4p2 = mom4p21 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- VIA5 ****
VIA5 = COPY VIA5i 

//***** Define connectivity/via layer -- mom6m2 ****
mom6p21 = M6 AND MOMDMY24 
mom6m2 = mom6p21 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- mom7p2 ****
mom7p2 = mom7p21 INTERACT MOMDMY25 
c_pmIO_aux = dfm_gate2 AND pIO 

//***** Define connectivity/via layer -- VIA3 ****
VIA3 = COPY VIA3i 

//***** Define connectivity/via layer -- mom3m2 ****
mom3p21 = M3 AND MOMDMY24 
mom3m2 = mom3p21 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- mom8p1 ****
mom8p1 = mom8p11 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- VIA4 ****
VIA4 = COPY VIA4i 
ngate_nthin_rf = nthin INTERACT ngate_rf1 
pgate_pthin_rf = pthin INTERACT pgate_rf1 
rf_mos_body = ngate_nthin_rf OR pgate_pthin_rf 
rf_mos_body_not_DFMY_DINSA = rf_mos_body NOT DMY_DINSA 
dinsaflag_aux00 = RECTANGLES MINGRID_RECT1 MINGRID_RECT1 1000 INSIDE OF LAYER rf_mos_body_not_DFMY_DINSA
rf_mos_body_and_DFMY_DINSA = rf_mos_body AND DMY_DINSA 
dinsaflag_aux10 = RECTANGLES MINGRID_RECT1 MINGRID_RECT2 1000 INSIDE OF LAYER rf_mos_body_and_DFMY_DINSA
dinsaflag_aux = dinsaflag_aux00 OR dinsaflag_aux10 

//***** Define connectivity/via layer -- mom4p1 ****
mom4p1 = mom4p11 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- mom3p2 ****
mom3p2 = mom3p21 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- VIA6 ****
VIA6 = COPY VIA6i 
v_dir_1 = poly_rf NOT mdiff 
v_dir = mdiff TOUCH EDGE v_dir_1

//***** Define connectivity/via layer -- mom6p2 ****
mom6p2 = mom6p21 INTERACT MOMDMY25 

//***** Define connectivity/via layer -- n_pplug ****
n_pplug1 = mdiff INTERACT CO 
n_pplug2 = n_pplug1 AND PP 
n_pplug3 = n_pplug2 NOT nxwell 
n_pplug4 = n_pplug3 NOT rwel 
n_pplug5 = n_pplug4 NOT gatennw 
n_pplug6 = n_pplug5 AND n_psub 
n_pplug = n_pplug6 NOT tcddmy_all 
d_hvpw_area = HVD_P INTERACT diff 
nthin2_hv_1 = s_tndiff_hv OR d_tndiff_hv 
nthin2_hv = nthin2_hv_1 OR ngate_hv18_mac 

//***** Define connectivity/via layer -- mom3m1 ****
mom3m1 = mom3p11 NOT INTERACT MOMDMY25 

//***** Define connectivity/via layer -- ptap ****
ptap1 = tpdiff1 AND psub 
ptap = ptap1 AND plug_sel 
MOM_field1 = metal1i AND MOMDMY1 
pthin2_hv_1 = s_tpdiff_hv OR d_tpdiff_hv 
pthin2_hv = pthin2_hv_1 OR pgate_hv18_mac 
MOM_field8 = metal8i AND MOMDMY8 

//**** Define ncesl/pcesl layer ****
#IFDEF CCI_DECK
pcesl = COPY BULK
ncesl = COPY BULK
#ELSE
pcesl = COPY gate
ncesl = COPY gate
#ENDIF

//#############################################
//# CONNECTION                                #
//#############################################
CONNECT AP M9 BY RV
CONNECT AP indm10c
CONNECT M1 d_tndiff BY n_odCont
CONNECT M1 d_tndiff_hv BY n_odCont
CONNECT M1 d_tndiff_udm BY n_odCont
CONNECT M1 d_tpdiff BY p_odCont
CONNECT M1 d_tpdiff_hv BY p_odCont
CONNECT M1 d_tpdiff_udm BY p_odCont
CONNECT M1 n_poly BY n_polyCont
CONNECT M1 n_poly_rf BY n_polyCont
CONNECT M1 p3 BY p3Cont
CONNECT M1 p_poly BY p_polyCont
CONNECT M1 p_poly_rf BY p_polyCont
CONNECT M1 poly BY polyCont
CONNECT M1 s_tndiff BY n_odCont
CONNECT M1 s_tndiff_hv BY n_odCont
CONNECT M1 s_tndiff_udm BY n_odCont
CONNECT M1 s_tpdiff BY p_odCont
CONNECT M1 s_tpdiff_hv BY p_odCont
CONNECT M1 s_tpdiff_udm BY p_odCont
CONNECT M1 tndiff BY n_odCont
CONNECT M1 tpdiff BY p_odCont
CONNECT M1 ydio_t BY n_odCont
CONNECT M2 M1 BY VIA1
CONNECT M3 M2 BY VIA2
CONNECT M3 mom3m1
CONNECT M3 mom3m2
CONNECT M3 mom3p1
CONNECT M3 mom3p2
CONNECT M4 M3 BY VIA3
CONNECT M4 mom4m1
CONNECT M4 mom4m2
CONNECT M4 mom4p1
CONNECT M4 mom4p2
CONNECT M5 M4 BY VIA4
CONNECT M5 mom5m1
CONNECT M5 mom5m2
CONNECT M5 mom5p1
CONNECT M5 mom5p2
CONNECT M6 M5 BY VIA5
CONNECT M6 mom6m1
CONNECT M6 mom6m2
CONNECT M6 mom6p1
CONNECT M6 mom6p2
CONNECT M7 M6 BY VIA6
CONNECT M7 mom7m1
CONNECT M7 mom7m2
CONNECT M7 mom7p1
CONNECT M7 mom7p2
CONNECT M8 M7 BY VIA7
CONNECT M8 mom8m1
CONNECT M8 mom8m2
CONNECT M8 mom8p1
CONNECT M8 mom8p2
CONNECT M9 M8 BY VIA8
CONNECT M9 indm9m
CONNECT M9 indm9p
CONNECT cemit1 tpdiff
CONNECT cnbase1 tndiff BY nplug
CONNECT cnemit1 tndiff
CONNECT cpbase1 tpdiff BY pplug
CONNECT iemit1 tpdiff
CONNECT inbase1 tndiff BY nplug
CONNECT inemit1 tndiff
CONNECT ipbase1 tpdiff BY pplug
CONNECT metal_interface n_poly
CONNECT metal_interface p_poly
CONNECT n_poly crown BY n_blc
CONNECT n_poly n_poly3
CONNECT n_poly n_poly_rf
CONNECT n_poly p_poly
CONNECT n_pplug tpdiff
CONNECT ncoll1 nxwell_npn
CONNECT nplug tndiff
CONNECT ntap tndiff
CONNECT p_poly crown BY p_blc
CONNECT p_poly p_poly3
CONNECT p_poly p_poly_rf
CONNECT poly n_poly
CONNECT poly p_poly
CONNECT pplug tpdiff
CONNECT ptap tpdiff
CONNECT tiod tndiff
CONNECT tiod tpdiff
CONNECT tndiff crown BY n_blc
CONNECT tndiff d_tndiff_hv
CONNECT tndiff d_tndiff_udm
CONNECT tndiff nxwell_npn BY nplug
CONNECT tndiff s_tndiff_hv
CONNECT tndiff s_tndiff_udm
CONNECT tndiff tpdiff
CONNECT tndiff ydio_t
CONNECT tpdiff crown BY p_blc
CONNECT tpdiff d_tpdiff_hv
CONNECT tpdiff d_tpdiff_udm
CONNECT tpdiff s_tpdiff_hv
CONNECT tpdiff s_tpdiff_udm
CONNECT vargt n_poly
CONNECT vargt_15 n_poly
CONNECT vargt_18 n_poly
CONNECT vargt_25 n_poly
CONNECT vargt_33 n_poly
CONNECT vargt_edc n_poly
CONNECT vargt_p p_poly
CONNECT vargt_18_p p_poly
CONNECT vargt_25_p p_poly

#IFDEF RC_DECK
CONNECT  poly gate
CONNECT  nxwell tndiff_dmy BY nplug_dmy
CONNECT  nxwell PROBEM5_T BY PROBEM5_B
CONNECT  nxwell PROBEM2_T BY PROBEM2_B
CONNECT  nxwell DNW BY dnwc
CONNECT  nxwell PROBEM3_T BY PROBEM3_B
CONNECT  nxwell PROBEM7_T BY PROBEM7_B
CONNECT  nxwell PROBEM1_T BY PROBEM1_B
CONNECT  nxwell PROBEM4_T BY PROBEM4_B
CONNECT  nxwell PROBEM6_T BY PROBEM6_B
CONNECT  psub PROBEM5_T BY PROBEM5_B
CONNECT  psub PROBEM2_T BY PROBEM2_B
CONNECT  psub RFDMY_HIA_psub BY hia_rf_via
CONNECT  psub PROBEM3_T BY PROBEM3_B
CONNECT  psub PROBEM7_T BY PROBEM7_B
CONNECT  psub PROBEM1_T BY PROBEM1_B
CONNECT  psub rfdmy56 BY rfdmy56_via
CONNECT  psub tpdiff_dmy BY pplug_dmy
CONNECT  psub PROBEM4_T BY PROBEM4_B
CONNECT  psub PROBEM6_T BY PROBEM6_B
CONNECT  tpdiff psub_term BY pplug
CONNECT  tpdiff psub BY pplug
CONNECT  tpdiff RFDMY_HIA_bulk BY hia_rf_pplug
CONNECT  tpdiff coll1 BY pplug
CONNECT  tndiff nxwell BY nplug
#ENDIF

SCONNECT nxwell tndiff_dmy BY nplug_dmy
SCONNECT nxwell PROBEM5_T BY PROBEM5_B
SCONNECT nxwell PROBEM2_T BY PROBEM2_B
SCONNECT nxwell DNW BY dnwc
SCONNECT nxwell PROBEM3_T BY PROBEM3_B
SCONNECT nxwell PROBEM7_T BY PROBEM7_B
SCONNECT nxwell PROBEM1_T BY PROBEM1_B
SCONNECT nxwell PROBEM4_T BY PROBEM4_B
SCONNECT nxwell PROBEM6_T BY PROBEM6_B
SCONNECT psub PROBEM5_T BY PROBEM5_B
SCONNECT psub PROBEM2_T BY PROBEM2_B
SCONNECT psub RFDMY_HIA_psub BY hia_rf_via
SCONNECT psub PROBEM3_T BY PROBEM3_B
SCONNECT psub PROBEM7_T BY PROBEM7_B
SCONNECT psub PROBEM1_T BY PROBEM1_B
SCONNECT psub rfdmy56 BY rfdmy56_via
SCONNECT psub tpdiff_dmy BY pplug_dmy
SCONNECT psub PROBEM4_T BY PROBEM4_B
SCONNECT psub PROBEM6_T BY PROBEM6_B
#IFNDEF NW_RING
  SCONNECT tpdiff n_psub BY n_pplug
#ENDIF
SCONNECT tpdiff psub_term BY pplug
SCONNECT tpdiff psub BY pplug
SCONNECT tpdiff RFDMY_HIA_bulk BY hia_rf_pplug
SCONNECT tpdiff coll1 BY pplug
SCONNECT tndiff nxwell BY nplug

#IFDEF CCI_DECK

/* Modify poly interconnect for CCI extraction */  
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
OD_id = COPY OD
CONNECT OD_id
OD_p = DFM PROPERTY OD_id
    [ ODNET = NETID(OD_id) ]
#ENDIF
#ENDIF
all_mos_gates = (((((((((pgate_hv18_mac OR (ngate_hv18_mac OR (pgate_udm18ud15_mac OR (pgate_udm18_mac OR (pgate_udm_mac OR (ngate_udm18ud15_mac OR (ngate_udm18_mac OR (ngate_udm_mac OR (pehvgate_mac OR (nehvgate_mac OR (puhvgate_mac OR (nuhvgate_mac OR (ngate_lvt18ud12_mac OR (ngate_edc_mac OR (alvtpgate_mac OR (navtgate_mac OR (nchvgate_mac OR (pgate_18ud15_mac OR (pgate_18ud12_mac OR (pgate_18_mac OR (pgate_33_mac OR (pgate_15od18_mac OR (pgate_15_mac OR (phvgate_mac OR (pilvtgate_mac OR (pelvgate_mac OR (puvgate_mac OR (pgate_25_mac OR (pgate_25od_mac OR (pgate_25ud_mac OR (plvgate_mac OR (pgate_hvs OR (pgate_sdp OR (pgate_s OR (ngate_hia15_mac OR (pgate_s_2psr OR (pgate_pu_lpdpsr OR (pgate_pu_ulldpsr OR (pgate_pu_lldpsr OR (pgate_pu_hltsr OR (pgate_pu_ullsr OR (pgate_pu_llsr OR (pgate_pu_lpsr OR (ngate_hvtllrpsr OR (ngate_svtllrpsr OR (ngate_hvtrpsr OR (ngate_svtrpsr OR (ngate_pd_lpdpsr OR (ngate_pg_lpdpsr OR (ngate_pd_ulldpsr OR (ngate_pg_ulldpsr OR (ngate_pd_lldpsr OR (ngate_pg_lldpsr OR (ngate_hltrpsr OR (ngate_ullrpsr OR (ngate_llrpsr OR (ngate_pd_hltsr OR (ngate_pg_hltsr OR (ngate_pd_ullsr OR (ngate_pg_ullsr OR (ngate_pd_llsr OR (ngate_pg_llsr OR (ngate_hlsvtqrpsr OR (ngate_lpqrpsr OR (ngate_lprpsr OR (ngate_pd_lpsr OR (ngate_pg_lpsr OR (ngate_rom OR (pgate_stgo OR (ngate_stgopd OR (ngate_stgopg OR (pgate_sio OR (ngate_siopd OR (ngate_siopg OR (ngate_rpdsr OR (ngate_hvspd OR (ngate_hvspg OR (ngate_lvtrpsr OR (ngate_rpsr OR (ngate_sdppd OR (ngate_sdppg OR (ngate_spd OR (ngate_spg OR (ngate_qrpsr OR (puhvgate_hg_mac OR (nuhvgate_hg_mac OR (ngate_18na_mac OR (ngate_18ud15_mac OR (ngate_18ud12_mac OR (ngate_18_mac OR (nzvgate_mac OR (nelvgate_mac OR (ngate_io_lvt_mac OR (ngate_33na_mac OR (ngate_18naud15_mac OR (ngate_25naod_mac OR (ngate_25naud_mac OR (ngate_33_mac OR (ngate_15na_mac OR (ngate_15od18_mac OR (ngate_15_mac OR (ngate_hia18_mac OR (nilvtgate_mac OR (ngate_svt_sp_mac OR (pgate_svt_sp_mac OR (nuvgate_mac OR (nhvgate_mac OR (ngate_25na_mac OR (ngate_25_mac OR (ngate_25od_mac OR (ngate_25ud_mac OR (ngate_hia25_mac OR (ngate_hia_mac OR (nlgate_mac OR (nlvgate_mac OR (pgate_hg_mac OR (ngate_hg_mac OR (ngate_mac OR pgate_mac)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) OR vargt) OR vargt_15) OR vargt_18) OR vargt_25) OR vargt_33) OR vargt_edc) OR vargt_p) OR vargt_18_p) OR vargt_25_p
n_poly = n_poly_cci NOT all_mos_gates
p_poly = p_poly_cci NOT all_mos_gates
poly_cci_org = poly_cci NOT all_mos_gates
poly = ( poly_cci_org NOT n_poly ) NOT p_poly
tndiff_gates = tndiff_all INTERACT all_mos_gates
tpdiff_gates = tpdiff_all INTERACT all_mos_gates

all_diode_form = ndioeh OR (pdioeh OR (ndiouh OR (pdiouh OR (ndio25ll OR (pdio25ll OR (pdioll OR (ndioll OR (indio_lvt18ud12 OR (ndiohguhvt OR (pdiohguhvt OR (ndioav OR (ndio_io_lvt OR (ndio_33na OR (ndio_25od33na OR (ndio_18ud15na OR (ndio_15na OR (cndio_zvt OR (indio_33 OR (ipdio_33 OR (ndio_18na OR (ipdio_18ud15 OR (indio_18ud15 OR (ipdio_18ud12 OR (indio_18ud12 OR (indio_18 OR (ipdio_18 OR (indio_15od OR (ipdio_15od OR (indio_15 OR (ipdio_15 OR (cndioilvt OR (pdioilvt OR (pdioelvt OR (ndioelvt OR (endio_sa OR (epdio_sa OR (ndio18ll OR (pdio18ll OR (ndioh OR (pdioh OR (ydio OR (cndion OR (ndio_25na OR (indio_25od OR (ipdio_25od OR (indio_25ud OR (ipdio_25ud OR (indio_25 OR (ipdio_25 OR (pdiol OR (ndiol OR (cnwdio OR (pdiohg OR (ndiohg OR (cpdio OR cndio)))))))))))))))))))))))))))))))))))))))))))))))))))))))
tndiff_diode = tndiff_all INTERACT all_diode_form
tpdiff_diode = tpdiff_all INTERACT all_diode_form

all_rdiff_form = var_nw_rf25_nw OR (var_nw_rf25 OR (var_nw_rf18_nw OR (var_nw_rf18 OR (var_nw_rf15_nw OR (var_nw3_rf_nw OR (var_nw3_rf OR (rnods_mr OR (rpods_mr OR (rnodl_mr OR (rpodl_mr OR (rnodwo_mr OR (rpodwo_mr OR (rnods_r OR (rpods_r OR (rnodl_r OR (rpodl_r OR (rnodwo_r OR (rpodwo_r OR (var_pw_rf18 OR (var_pw_rf OR (hia_pdio_rf_r OR (hia_ndio_rf_r OR (cvar_pw_rf25 OR (cvar_pw_rf18 OR (cvar_pw_rf OR (var11_nw_rf25 OR (var11_rf25 OR (var11_nw_rf18 OR (var11_rf18 OR (var11_nw OR (var11_cvar OR (var10_nw_rf25 OR (var10_rf25 OR (var10_nw_rf18 OR (var10_rf18 OR (var10_dvar OR var10_nw))))))))))))))))))))))))))))))))))))
tndiff_r = tndiff_all INTERACT all_rdiff_form
tpdiff_r = tpdiff_all INTERACT all_rdiff_form

tndiff_cut = d_tndiff_hv OR (s_tndiff_hv OR (s_tndiff_udm OR d_tndiff_udm))
tpdiff_cut = d_tpdiff_hv OR (s_tpdiff_hv OR (s_tpdiff_udm OR d_tpdiff_udm))
all_woR_form = pdiff_gdio3 OR (pdiff_gdio2 OR (ndiff_gdio OR (hia_pdio_r OR hia_ndio_r)))
tndiff_woR = tndiff_all INTERACT all_woR_form
tpdiff_woR = tpdiff_all INTERACT all_woR_form
tndiff_RC = tndiff_all NOT ((((tndiff_gates OR tndiff_diode) OR tndiff_r) OR tndiff_cut) OR tndiff_woR)
tndiff = tndiff_all NOT ( ( tndiff_RC OR tndiff_woR ) OR tndiff_cut )

tpdiff_RC = tpdiff_all NOT ((((tpdiff_gates OR tpdiff_diode) OR tpdiff_r) OR tpdiff_cut) OR tpdiff_woR)
tpdiff = tpdiff_all NOT ( ( tpdiff_RC OR tpdiff_woR ) OR tpdiff_cut )


 /* SPECIAL CONNECTIONS FOR CCI */ 

CONNECT tndiff tndiff_RC
CONNECT tndiff s_tndiff_udm
CONNECT tndiff_RC s_tndiff_udm
CONNECT M1 s_tndiff_udm BY n_odCont 
CONNECT cnbase1 s_tndiff_udm BY nplug 
CONNECT cnemit1 s_tndiff_udm 
CONNECT inbase1 s_tndiff_udm BY nplug 
CONNECT inemit1 s_tndiff_udm 
CONNECT nplug s_tndiff_udm 
CONNECT ntap s_tndiff_udm 
CONNECT tiod s_tndiff_udm 
CONNECT s_tndiff_udm crown BY n_blc 
CONNECT s_tndiff_udm d_tndiff_hv 
CONNECT s_tndiff_udm d_tndiff_udm 
CONNECT s_tndiff_udm nxwell_npn BY nplug 
CONNECT s_tndiff_udm s_tndiff_hv 

CONNECT s_tndiff_udm tpdiff 
CONNECT s_tndiff_udm ydio_t 
SCONNECT s_tndiff_udm nxwell BY nplug 

CONNECT s_tndiff_udm tndiff_woR
CONNECT s_tndiff_udm d_tndiff_udm
CONNECT s_tndiff_udm s_tndiff_hv
CONNECT s_tndiff_udm d_tndiff_hv
CONNECT tndiff d_tndiff_udm
CONNECT tndiff_RC d_tndiff_udm
CONNECT M1 d_tndiff_udm BY n_odCont 
CONNECT cnbase1 d_tndiff_udm BY nplug 
CONNECT cnemit1 d_tndiff_udm 
CONNECT inbase1 d_tndiff_udm BY nplug 
CONNECT inemit1 d_tndiff_udm 
CONNECT nplug d_tndiff_udm 
CONNECT ntap d_tndiff_udm 
CONNECT tiod d_tndiff_udm 
CONNECT d_tndiff_udm crown BY n_blc 
CONNECT d_tndiff_udm d_tndiff_hv 

CONNECT d_tndiff_udm nxwell_npn BY nplug 
CONNECT d_tndiff_udm s_tndiff_hv 
CONNECT d_tndiff_udm s_tndiff_udm 
CONNECT d_tndiff_udm tpdiff 
CONNECT d_tndiff_udm ydio_t 
SCONNECT d_tndiff_udm nxwell BY nplug 

CONNECT d_tndiff_udm tndiff_woR
CONNECT d_tndiff_udm s_tndiff_hv
CONNECT d_tndiff_udm d_tndiff_hv
CONNECT tndiff s_tndiff_hv
CONNECT tndiff_RC s_tndiff_hv
CONNECT M1 s_tndiff_hv BY n_odCont 
CONNECT cnbase1 s_tndiff_hv BY nplug 
CONNECT cnemit1 s_tndiff_hv 
CONNECT inbase1 s_tndiff_hv BY nplug 
CONNECT inemit1 s_tndiff_hv 
CONNECT nplug s_tndiff_hv 
CONNECT ntap s_tndiff_hv 
CONNECT tiod s_tndiff_hv 
CONNECT s_tndiff_hv crown BY n_blc 
CONNECT s_tndiff_hv d_tndiff_hv 
CONNECT s_tndiff_hv d_tndiff_udm 
CONNECT s_tndiff_hv nxwell_npn BY nplug 

CONNECT s_tndiff_hv s_tndiff_udm 
CONNECT s_tndiff_hv tpdiff 
CONNECT s_tndiff_hv ydio_t 
SCONNECT s_tndiff_hv nxwell BY nplug 

CONNECT s_tndiff_hv tndiff_woR
CONNECT s_tndiff_hv d_tndiff_hv
CONNECT tndiff d_tndiff_hv
CONNECT tndiff_RC d_tndiff_hv
CONNECT M1 d_tndiff_hv BY n_odCont 
CONNECT cnbase1 d_tndiff_hv BY nplug 
CONNECT cnemit1 d_tndiff_hv 
CONNECT inbase1 d_tndiff_hv BY nplug 
CONNECT inemit1 d_tndiff_hv 
CONNECT nplug d_tndiff_hv 
CONNECT ntap d_tndiff_hv 
CONNECT tiod d_tndiff_hv 
CONNECT d_tndiff_hv crown BY n_blc 

CONNECT d_tndiff_hv d_tndiff_udm 
CONNECT d_tndiff_hv nxwell_npn BY nplug 
CONNECT d_tndiff_hv s_tndiff_hv 
CONNECT d_tndiff_hv s_tndiff_udm 
CONNECT d_tndiff_hv tpdiff 
CONNECT d_tndiff_hv ydio_t 
SCONNECT d_tndiff_hv nxwell BY nplug 

CONNECT d_tndiff_hv tndiff_woR
CONNECT tpdiff s_tpdiff_udm
CONNECT tpdiff_RC s_tpdiff_udm
CONNECT M1 s_tpdiff_udm BY p_odCont 
CONNECT cemit1 s_tpdiff_udm 
CONNECT cpbase1 s_tpdiff_udm BY pplug 
CONNECT iemit1 s_tpdiff_udm 
CONNECT ipbase1 s_tpdiff_udm BY pplug 
CONNECT n_pplug s_tpdiff_udm 
CONNECT pplug s_tpdiff_udm 
CONNECT ptap s_tpdiff_udm 
CONNECT tiod s_tpdiff_udm 
CONNECT tndiff s_tpdiff_udm 
CONNECT s_tpdiff_udm crown BY p_blc 
CONNECT s_tpdiff_udm d_tpdiff_hv 
CONNECT s_tpdiff_udm d_tpdiff_udm 
CONNECT s_tpdiff_udm s_tpdiff_hv 

SCONNECT s_tpdiff_udm RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT s_tpdiff_udm coll1 BY pplug 
SCONNECT s_tpdiff_udm n_psub BY n_pplug 
SCONNECT s_tpdiff_udm psub BY pplug 
SCONNECT s_tpdiff_udm psub_term BY pplug 

CONNECT s_tpdiff_udm tpdiff_woR
CONNECT s_tpdiff_udm d_tpdiff_udm
CONNECT s_tpdiff_udm s_tpdiff_hv
CONNECT s_tpdiff_udm d_tpdiff_hv
CONNECT tpdiff d_tpdiff_udm
CONNECT tpdiff_RC d_tpdiff_udm
CONNECT M1 d_tpdiff_udm BY p_odCont 
CONNECT cemit1 d_tpdiff_udm 
CONNECT cpbase1 d_tpdiff_udm BY pplug 
CONNECT iemit1 d_tpdiff_udm 
CONNECT ipbase1 d_tpdiff_udm BY pplug 
CONNECT n_pplug d_tpdiff_udm 
CONNECT pplug d_tpdiff_udm 
CONNECT ptap d_tpdiff_udm 
CONNECT tiod d_tpdiff_udm 
CONNECT tndiff d_tpdiff_udm 
CONNECT d_tpdiff_udm crown BY p_blc 
CONNECT d_tpdiff_udm d_tpdiff_hv 

CONNECT d_tpdiff_udm s_tpdiff_hv 
CONNECT d_tpdiff_udm s_tpdiff_udm 
SCONNECT d_tpdiff_udm RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT d_tpdiff_udm coll1 BY pplug 
SCONNECT d_tpdiff_udm n_psub BY n_pplug 
SCONNECT d_tpdiff_udm psub BY pplug 
SCONNECT d_tpdiff_udm psub_term BY pplug 

CONNECT d_tpdiff_udm tpdiff_woR
CONNECT d_tpdiff_udm s_tpdiff_hv
CONNECT d_tpdiff_udm d_tpdiff_hv
CONNECT tpdiff s_tpdiff_hv
CONNECT tpdiff_RC s_tpdiff_hv
CONNECT M1 s_tpdiff_hv BY p_odCont 
CONNECT cemit1 s_tpdiff_hv 
CONNECT cpbase1 s_tpdiff_hv BY pplug 
CONNECT iemit1 s_tpdiff_hv 
CONNECT ipbase1 s_tpdiff_hv BY pplug 
CONNECT n_pplug s_tpdiff_hv 
CONNECT pplug s_tpdiff_hv 
CONNECT ptap s_tpdiff_hv 
CONNECT tiod s_tpdiff_hv 
CONNECT tndiff s_tpdiff_hv 
CONNECT s_tpdiff_hv crown BY p_blc 
CONNECT s_tpdiff_hv d_tpdiff_hv 
CONNECT s_tpdiff_hv d_tpdiff_udm 

CONNECT s_tpdiff_hv s_tpdiff_udm 
SCONNECT s_tpdiff_hv RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT s_tpdiff_hv coll1 BY pplug 
SCONNECT s_tpdiff_hv n_psub BY n_pplug 
SCONNECT s_tpdiff_hv psub BY pplug 
SCONNECT s_tpdiff_hv psub_term BY pplug 

CONNECT s_tpdiff_hv tpdiff_woR
CONNECT s_tpdiff_hv d_tpdiff_hv
CONNECT tpdiff d_tpdiff_hv
CONNECT tpdiff_RC d_tpdiff_hv
CONNECT M1 d_tpdiff_hv BY p_odCont 
CONNECT cemit1 d_tpdiff_hv 
CONNECT cpbase1 d_tpdiff_hv BY pplug 
CONNECT iemit1 d_tpdiff_hv 
CONNECT ipbase1 d_tpdiff_hv BY pplug 
CONNECT n_pplug d_tpdiff_hv 
CONNECT pplug d_tpdiff_hv 
CONNECT ptap d_tpdiff_hv 
CONNECT tiod d_tpdiff_hv 
CONNECT tndiff d_tpdiff_hv 
CONNECT d_tpdiff_hv crown BY p_blc 

CONNECT d_tpdiff_hv d_tpdiff_udm 
CONNECT d_tpdiff_hv s_tpdiff_hv 
CONNECT d_tpdiff_hv s_tpdiff_udm 
SCONNECT d_tpdiff_hv RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT d_tpdiff_hv coll1 BY pplug 
SCONNECT d_tpdiff_hv n_psub BY n_pplug 
SCONNECT d_tpdiff_hv psub BY pplug 
SCONNECT d_tpdiff_hv psub_term BY pplug 

CONNECT d_tpdiff_hv tpdiff_woR
CONNECT M1 tndiff_RC BY n_odCont 
CONNECT cnbase1 tndiff_RC BY nplug 
CONNECT cnemit1 tndiff_RC 
CONNECT inbase1 tndiff_RC BY nplug 
CONNECT inemit1 tndiff_RC 
CONNECT nplug tndiff_RC 
CONNECT ntap tndiff_RC 
CONNECT tiod tndiff_RC 
CONNECT tndiff_RC crown BY n_blc 
CONNECT tndiff_RC d_tndiff_hv 
CONNECT tndiff_RC d_tndiff_udm 
CONNECT tndiff_RC nxwell_npn BY nplug 
CONNECT tndiff_RC s_tndiff_hv 
CONNECT tndiff_RC s_tndiff_udm 
CONNECT tndiff_RC tpdiff 
CONNECT tndiff_RC ydio_t 
SCONNECT tndiff_RC nxwell BY nplug 

CONNECT tndiff tndiff_woR
CONNECT tndiff_woR tndiff_RC
CONNECT M1 tndiff_woR BY n_odCont 
CONNECT cnbase1 tndiff_woR BY nplug 
CONNECT cnemit1 tndiff_woR 
CONNECT inbase1 tndiff_woR BY nplug 
CONNECT inemit1 tndiff_woR 
CONNECT nplug tndiff_woR 
CONNECT ntap tndiff_woR 
CONNECT tiod tndiff_woR 
CONNECT tndiff_woR crown BY n_blc 
CONNECT tndiff_woR d_tndiff_hv 
CONNECT tndiff_woR d_tndiff_udm 
CONNECT tndiff_woR nxwell_npn BY nplug 
CONNECT tndiff_woR s_tndiff_hv 
CONNECT tndiff_woR s_tndiff_udm 
CONNECT tndiff_woR tpdiff 
CONNECT tndiff_woR ydio_t 
SCONNECT tndiff_woR nxwell BY nplug 

CONNECT tpdiff tpdiff_RC
CONNECT tpdiff_RC tndiff_RC
SCONNECT tpdiff_RC psub BY pplug
CONNECT M1 tpdiff_RC BY p_odCont 
CONNECT cemit1 tpdiff_RC 
CONNECT cpbase1 tpdiff_RC BY pplug 
CONNECT iemit1 tpdiff_RC 
CONNECT ipbase1 tpdiff_RC BY pplug 
CONNECT n_pplug tpdiff_RC 
CONNECT pplug tpdiff_RC 
CONNECT ptap tpdiff_RC 
CONNECT tiod tpdiff_RC 
CONNECT tndiff tpdiff_RC 
CONNECT tpdiff_RC crown BY p_blc 
CONNECT tpdiff_RC d_tpdiff_hv 
CONNECT tpdiff_RC d_tpdiff_udm 
CONNECT tpdiff_RC s_tpdiff_hv 
CONNECT tpdiff_RC s_tpdiff_udm 
SCONNECT tpdiff_RC RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT tpdiff_RC coll1 BY pplug 
SCONNECT tpdiff_RC n_psub BY n_pplug 
SCONNECT tpdiff_RC psub BY pplug 
SCONNECT tpdiff_RC psub_term BY pplug 

CONNECT tpdiff tpdiff_woR
CONNECT tpdiff_woR tpdiff_RC
CONNECT M1 tpdiff_woR BY p_odCont 
CONNECT cemit1 tpdiff_woR 
CONNECT cpbase1 tpdiff_woR BY pplug 
CONNECT iemit1 tpdiff_woR 
CONNECT ipbase1 tpdiff_woR BY pplug 
CONNECT n_pplug tpdiff_woR 
CONNECT pplug tpdiff_woR 
CONNECT ptap tpdiff_woR 
CONNECT tiod tpdiff_woR 
CONNECT tndiff tpdiff_woR 
CONNECT tpdiff_woR crown BY p_blc 
CONNECT tpdiff_woR d_tpdiff_hv 
CONNECT tpdiff_woR d_tpdiff_udm 
CONNECT tpdiff_woR s_tpdiff_hv 
CONNECT tpdiff_woR s_tpdiff_udm 
SCONNECT tpdiff_woR RFDMY_HIA_bulk BY hia_rf_pplug 
SCONNECT tpdiff_woR coll1 BY pplug 
SCONNECT tpdiff_woR n_psub BY n_pplug 
SCONNECT tpdiff_woR psub BY pplug 
SCONNECT tpdiff_woR psub_term BY pplug 

CONNECT tpdiff_woR tndiff_woR
CONNECT ngate_15_mac n_poly
CONNECT ngate_15od18_mac n_poly
CONNECT ngate_18_mac n_poly
CONNECT ngate_18ud12_mac n_poly
CONNECT ngate_18ud15_mac n_poly
CONNECT ngate_25_mac n_poly
CONNECT ngate_25od_mac n_poly
CONNECT ngate_25ud_mac n_poly
CONNECT ngate_33_mac n_poly
CONNECT navtgate_mac n_poly
CONNECT nchvgate_mac n_poly
CONNECT ngate_edc_mac n_poly
CONNECT nehvgate_mac n_poly
CONNECT nelvgate_mac n_poly
CONNECT ngate_hg_mac n_poly
CONNECT nuhvgate_hg_mac n_poly
CONNECT ngate_hia15_mac n_poly
CONNECT ngate_hia18_mac n_poly
CONNECT ngate_hia25_mac n_poly
CONNECT ngate_hia_mac n_poly
CONNECT ngate_lpqrpsr n_poly
CONNECT ngate_lprpsr n_poly
CONNECT ngate_hlsvtqrpsr n_poly
CONNECT ngate_hltrpsr n_poly
CONNECT nhvgate_mac n_poly
CONNECT ngate_hvtllrpsr n_poly
CONNECT ngate_hvtrpsr n_poly
CONNECT ngate_io_lvt_mac n_poly
CONNECT ngate_llrpsr n_poly
CONNECT ngate_lvt18ud12_mac n_poly
CONNECT nlvgate_mac n_poly
CONNECT ngate_lvtrpsr n_poly
CONNECT ngate_mac n_poly
CONNECT nilvtgate_mac n_poly
CONNECT ngate_15na_mac n_poly
CONNECT ngate_18na_mac n_poly
CONNECT ngate_18naud15_mac n_poly
CONNECT ngate_25na_mac n_poly
CONNECT ngate_25naod_mac n_poly
CONNECT ngate_25naud_mac n_poly
CONNECT ngate_33na_mac n_poly
CONNECT nlgate_mac n_poly
CONNECT ngate_qrpsr n_poly
CONNECT ngate_rom n_poly
CONNECT ngate_rpsr n_poly
CONNECT ngate_svt_sp_mac n_poly
CONNECT ngate_svtllrpsr n_poly
CONNECT ngate_svtrpsr n_poly
CONNECT nuhvgate_mac n_poly
CONNECT ngate_ullrpsr n_poly
CONNECT nuvgate_mac n_poly
CONNECT nzvgate_mac n_poly
CONNECT ngate_sdppd n_poly
CONNECT ngate_pd_lpdpsr n_poly
CONNECT ngate_pd_lpsr n_poly
CONNECT ngate_pd_hltsr n_poly
CONNECT ngate_hvspd n_poly
CONNECT ngate_siopd n_poly
CONNECT ngate_pd_lldpsr n_poly
CONNECT ngate_pd_llsr n_poly
CONNECT ngate_spd n_poly
CONNECT ngate_stgopd n_poly
CONNECT ngate_pd_ulldpsr n_poly
CONNECT ngate_pd_ullsr n_poly
CONNECT ngate_sdppg n_poly
CONNECT ngate_pg_lpdpsr n_poly
CONNECT ngate_pg_lpsr n_poly
CONNECT ngate_pg_hltsr n_poly
CONNECT ngate_hvspg n_poly
CONNECT ngate_siopg n_poly
CONNECT ngate_pg_lldpsr n_poly
CONNECT ngate_pg_llsr n_poly
CONNECT ngate_spg n_poly
CONNECT ngate_stgopg n_poly
CONNECT ngate_pg_ulldpsr n_poly
CONNECT ngate_pg_ullsr n_poly
CONNECT ngate_rpdsr n_poly
CONNECT pgate_15_mac p_poly
CONNECT pgate_15od18_mac p_poly
CONNECT pgate_18_mac p_poly
CONNECT pgate_18ud12_mac p_poly
CONNECT pgate_18ud15_mac p_poly
CONNECT pgate_25_mac p_poly
CONNECT pgate_25od_mac p_poly
CONNECT pgate_25ud_mac p_poly
CONNECT pgate_33_mac p_poly
CONNECT alvtpgate_mac p_poly
CONNECT pehvgate_mac p_poly
CONNECT pelvgate_mac p_poly
CONNECT pgate_hg_mac p_poly
CONNECT puhvgate_hg_mac p_poly
CONNECT phvgate_mac p_poly
CONNECT plvgate_mac p_poly
CONNECT pgate_mac p_poly
CONNECT pilvtgate_mac p_poly
CONNECT pgate_svt_sp_mac p_poly
CONNECT puhvgate_mac p_poly
CONNECT puvgate_mac p_poly
CONNECT pgate_s_2psr p_poly
CONNECT pgate_sdp p_poly
CONNECT pgate_pu_lpdpsr p_poly
CONNECT pgate_pu_lpsr p_poly
CONNECT pgate_pu_hltsr p_poly
CONNECT pgate_hvs p_poly
CONNECT pgate_sio p_poly
CONNECT pgate_pu_lldpsr p_poly
CONNECT pgate_pu_llsr p_poly
CONNECT pgate_s p_poly
CONNECT pgate_stgo p_poly
CONNECT pgate_pu_ulldpsr p_poly
CONNECT pgate_pu_ullsr p_poly
CONNECT ngate_hv18_mac n_poly
CONNECT ngate_udm18_mac n_poly
CONNECT ngate_udm18ud15_mac n_poly
CONNECT ngate_udm_mac n_poly
CONNECT pgate_hv18_mac p_poly
CONNECT pgate_udm18_mac p_poly
CONNECT pgate_udm18ud15_mac p_poly
CONNECT pgate_udm_mac p_poly

#ENDIF
//#############################################
//# FORM DEVICE                               #
//#############################################

#IFNDEF LVS_DECK

#IFDEF DFM_RULE
INCLUDE ./DFM/dfm_device

DEVICE LDDP(pch_hv18_mac) pgate_hv18_mac d_tpdiff_hv(D) pgate_hv18_mac(G) s_tpdiff_hv(S) nxwell(B) <pthin2_hv> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP>  <d_hvpw_area> netlist model pch_hv18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_hv18_mac, s_tpdiff_hv ) + perimeter_coincide(pgate_hv18_mac, d_tpdiff_hv)) / 2
   L=area(pgate_hv18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin2_hv)
   PI_D_OD = perimeter_inside(D,pthin2_hv)
   IF(PI_S_OD == 0) {
    AD = area(d_hvpw_area) * W / PI_D_OD
    AS = AD
    PD = perimeter(d_hvpw_area) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(d_hvpw_area) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(d_hvpw_area) * W /PI_D_OD }
   NRS = AS / W / W
   NRD_1 = area(D) - 2 * W * 0.5 * 1e-06
   NRD_2 = NRD_1 * W / PI_D_OD
   NRD   = NRD_2 / W / W
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE LDDP(pch_udm18_mac) pgate_udm18_mac d_tpdiff_udm(D) pgate_udm18_mac(G) s_tpdiff_udm(S) nxwell(B) <pthin_udm> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_udm18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_udm18_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm18_mac, d_tpdiff_udm)) / 2
   L=area(pgate_udm18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin_udm)
   PI_D_OD = perimeter_inside(D,pthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDP(pch_udm18ud15_mac) pgate_udm18ud15_mac d_tpdiff_udm(D) pgate_udm18ud15_mac(G) s_tpdiff_udm(S) nxwell(B) <pthin_udm> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_udm18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_udm18ud15_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm18ud15_mac, d_tpdiff_udm)) / 2
   L=area(pgate_udm18ud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin_udm)
   PI_D_OD = perimeter_inside(D,pthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDP(pch_udm_mac) pgate_udm_mac d_tpdiff_udm(D) pgate_udm_mac(G) s_tpdiff_udm(S) nxwell(B) <pthin_udm> <OD> <lod_PROP> <pCore_WPEPROP> netlist model pch_udm_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_udm_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm_mac, d_tpdiff_udm)) / 2
   L=area(pgate_udm_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin_udm)
   PI_D_OD = perimeter_inside(D,pthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDN(nch_hv18_mac) ngate_hv18_mac d_tndiff_hv(D) ngate_hv18_mac(G) s_tndiff_hv(S) psub(B) <nthin2_hv> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP>  <d_hvnw_area> netlist model nch_hv18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hv18_mac, s_tndiff_hv ) + perimeter_coincide(ngate_hv18_mac, d_tndiff_hv)) / 2
   L=area(ngate_hv18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin2_hv)
   PI_D_OD = perimeter_inside(D,nthin2_hv)
   IF(PI_S_OD == 0) {
    AD = area(d_hvnw_area) * W / PI_D_OD
    AS = AD
    PD = perimeter(d_hvnw_area) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(d_hvnw_area) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(d_hvnw_area) * W /PI_D_OD }
   NRS = AS / W / W
   NRD_1 = area(D) - 2 * W * 0.5 * 1e-06
   NRD_2 = NRD_1 * W / PI_D_OD
   NRD   = NRD_2 / W / W
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE LDDN(nch_udm18_mac) ngate_udm18_mac d_tndiff_udm(D) ngate_udm18_mac(G) s_tndiff_udm(S) psub(B) <nthin_udm> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_udm18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_udm18_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm18_mac, d_tndiff_udm)) / 2
   L=area(ngate_udm18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin_udm)
   PI_D_OD = perimeter_inside(D,nthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDN(nch_udm18ud15_mac) ngate_udm18ud15_mac d_tndiff_udm(D) ngate_udm18ud15_mac(G) s_tndiff_udm(S) psub(B) <nthin_udm> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_udm18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_udm18ud15_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm18ud15_mac, d_tndiff_udm)) / 2
   L=area(ngate_udm18ud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin_udm)
   PI_D_OD = perimeter_inside(D,nthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDN(nch_udm_mac) ngate_udm_mac d_tndiff_udm(D) ngate_udm_mac(G) s_tndiff_udm(S) psub(B) <nthin_udm> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_udm_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_udm_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm_mac, d_tndiff_udm)) / 2
   L=area(ngate_udm_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin_udm)
   PI_D_OD = perimeter_inside(D,nthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE MN(nch_15_mac) ngate_15_mac ngate_15_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_15_mac, tndiff ) + perimeter_inside(ngate_15_mac, tndiff)) / 2
   L=area(ngate_15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_15od18_mac) ngate_15od18_mac ngate_15od18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_15od18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_15od18_mac, tndiff ) + perimeter_inside(ngate_15od18_mac, tndiff)) / 2
   L=area(ngate_15od18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_18_mac) ngate_18_mac ngate_18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18_mac, tndiff ) + perimeter_inside(ngate_18_mac, tndiff)) / 2
   L=area(ngate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18_mac" 
ngate_18_mac_in_edge = ngate_18_mac INSIDE EDGE tndiff
ngate_18_mac_coin_edge = ngate_18_mac COIN EDGE tndiff
ngate_18_mac_WL = DFM PROPERTY ngate_18_mac ngate_18_mac_in_edge ngate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18_mac_in_edge) + length(ngate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18_mac)/property_ref(drawn_w) ]
nch_18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18_mac" ANNOTATE OD_p ngate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18_mac"
       drawn_w = DFM_NUM_VAL( ngate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18ud12_mac) ngate_18ud12_mac ngate_18ud12_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18ud12_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18ud12_mac, tndiff ) + perimeter_inside(ngate_18ud12_mac, tndiff)) / 2
   L=area(ngate_18ud12_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud12_mac" 
ngate_18ud12_mac_in_edge = ngate_18ud12_mac INSIDE EDGE tndiff
ngate_18ud12_mac_coin_edge = ngate_18ud12_mac COIN EDGE tndiff
ngate_18ud12_mac_WL = DFM PROPERTY ngate_18ud12_mac ngate_18ud12_mac_in_edge ngate_18ud12_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18ud12_mac_in_edge) + length(ngate_18ud12_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18ud12_mac)/property_ref(drawn_w) ]
nch_18ud12_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud12_mac" ANNOTATE OD_p ngate_18ud12_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud12_mac"
       drawn_w = DFM_NUM_VAL( ngate_18ud12_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18ud12_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud12_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15_mac) ngate_18ud15_mac ngate_18ud15_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18ud15_mac, tndiff ) + perimeter_inside(ngate_18ud15_mac, tndiff)) / 2
   L=area(ngate_18ud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15_mac" 
ngate_18ud15_mac_in_edge = ngate_18ud15_mac INSIDE EDGE tndiff
ngate_18ud15_mac_coin_edge = ngate_18ud15_mac COIN EDGE tndiff
ngate_18ud15_mac_WL = DFM PROPERTY ngate_18ud15_mac ngate_18ud15_mac_in_edge ngate_18ud15_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18ud15_mac_in_edge) + length(ngate_18ud15_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18ud15_mac)/property_ref(drawn_w) ]
nch_18ud15_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15_mac" ANNOTATE OD_p ngate_18ud15_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15_mac"
       drawn_w = DFM_NUM_VAL( ngate_18ud15_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18ud15_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_mac) ngate_25_mac ngate_25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25_mac, tndiff ) + perimeter_inside(ngate_25_mac, tndiff)) / 2
   L=area(ngate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_mac" 
ngate_25_mac_in_edge = ngate_25_mac INSIDE EDGE tndiff
ngate_25_mac_coin_edge = ngate_25_mac COIN EDGE tndiff
ngate_25_mac_WL = DFM PROPERTY ngate_25_mac ngate_25_mac_in_edge ngate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_mac_in_edge) + length(ngate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25_mac)/property_ref(drawn_w) ]
nch_25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_mac" ANNOTATE OD_p ngate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_mac"
       drawn_w = DFM_NUM_VAL( ngate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25od33_mac) ngate_25od_mac ngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25od_mac, tndiff ) + perimeter_inside(ngate_25od_mac, tndiff)) / 2
   L=area(ngate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33_mac" 
ngate_25od_mac_in_edge = ngate_25od_mac INSIDE EDGE tndiff
ngate_25od_mac_coin_edge = ngate_25od_mac COIN EDGE tndiff
ngate_25od_mac_WL = DFM PROPERTY ngate_25od_mac ngate_25od_mac_in_edge ngate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25od_mac_in_edge) + length(ngate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25od_mac)/property_ref(drawn_w) ]
nch_25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33_mac" ANNOTATE OD_p ngate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33_mac"
       drawn_w = DFM_NUM_VAL( ngate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18_mac) ngate_25ud_mac ngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25ud_mac, tndiff ) + perimeter_inside(ngate_25ud_mac, tndiff)) / 2
   L=area(ngate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18_mac" 
ngate_25ud_mac_in_edge = ngate_25ud_mac INSIDE EDGE tndiff
ngate_25ud_mac_coin_edge = ngate_25ud_mac COIN EDGE tndiff
ngate_25ud_mac_WL = DFM PROPERTY ngate_25ud_mac ngate_25ud_mac_in_edge ngate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25ud_mac_in_edge) + length(ngate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25ud_mac)/property_ref(drawn_w) ]
nch_25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18_mac" ANNOTATE OD_p ngate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18_mac"
       drawn_w = DFM_NUM_VAL( ngate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_33_mac) ngate_33_mac ngate_33_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_33_mac, tndiff ) + perimeter_inside(ngate_33_mac, tndiff)) / 2
   L=area(ngate_33_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

navtgate_macz1 = SIZE navtgate_mac BY 0.005
navtgate_macz = navtgate_macz1 AND nthin1
DEVICE MN(nch_avt_mac) navtgate_macz navtgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_avt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt_mac" 
navtgate_mac_in_edge = navtgate_mac INSIDE EDGE tndiff
navtgate_mac_coin_edge = navtgate_mac COIN EDGE tndiff
navtgate_mac_WL = DFM PROPERTY navtgate_mac navtgate_mac_in_edge navtgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(navtgate_mac_in_edge) + length(navtgate_mac_coin_edge))/2 ]
       [ drawn_l = area(navtgate_mac)/property_ref(drawn_w) ]
nch_avt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt_mac" ANNOTATE OD_p navtgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt_mac"
       drawn_w = DFM_NUM_VAL( navtgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( navtgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_mac_ODN_layer
#ENDIF

nchvgate_macz1 = SIZE nchvgate_mac BY 0.005
nchvgate_macz = nchvgate_macz1 AND nthin1
DEVICE MN(nch_chvt_mac) nchvgate_macz nchvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_chvt_mac netlist element "X" CMACRO dfm_nmos_core

DEVICE MN(nch_edc_mac) ngate_edc_mac ngate_edc_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_edc_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_edc_mac, tndiff ) + perimeter_inside(ngate_edc_mac, tndiff)) / 2
   L=area(ngate_edc_mac) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

nehvgate_macz1 = SIZE nehvgate_mac BY 0.005
nehvgate_macz = nehvgate_macz1 AND nthin1
DEVICE MN(nch_ehvt_mac) nehvgate_macz nehvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ehvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt_mac" 
nehvgate_mac_in_edge = nehvgate_mac INSIDE EDGE tndiff
nehvgate_mac_coin_edge = nehvgate_mac COIN EDGE tndiff
nehvgate_mac_WL = DFM PROPERTY nehvgate_mac nehvgate_mac_in_edge nehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nehvgate_mac_in_edge) + length(nehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nehvgate_mac)/property_ref(drawn_w) ]
nch_ehvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt_mac" ANNOTATE OD_p nehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt_mac"
       drawn_w = DFM_NUM_VAL( nehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_mac_ODN_layer
#ENDIF

nelvgate_macz1 = SIZE nelvgate_mac BY 0.005
nelvgate_macz = nelvgate_macz1 AND nthin1
DEVICE MN(nch_elvt_mac) nelvgate_macz nelvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_elvt_mac netlist element "X" CMACRO dfm_nmos_core

ngate_hg_macz1 = SIZE ngate_hg_mac BY 0.005
ngate_hg_macz = ngate_hg_macz1 AND nthin1
DEVICE MN(nch_hg_mac) ngate_hg_macz ngate_hg_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_hg_mac netlist element "X" CMACRO dfm_nmos_core

nuhvgate_hg_macz1 = SIZE nuhvgate_hg_mac BY 0.005
nuhvgate_hg_macz = nuhvgate_hg_macz1 AND nthin1
DEVICE MN(nch_hguhvt_mac) nuhvgate_hg_macz nuhvgate_hg_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_hguhvt_mac netlist element "X" CMACRO dfm_nmos_core

DEVICE MN(nch_hia15_mac) ngate_hia15_mac ngate_hia15_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_hia15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hia15_mac, tndiff ) + perimeter_inside(ngate_hia15_mac, tndiff)) / 2
   L=area(ngate_hia15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_hia18_mac) ngate_hia18_mac ngate_hia18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_hia18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hia18_mac, tndiff ) + perimeter_inside(ngate_hia18_mac, tndiff)) / 2
   L=area(ngate_hia18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hia18_mac" 
ngate_hia18_mac_in_edge = ngate_hia18_mac INSIDE EDGE tndiff
ngate_hia18_mac_coin_edge = ngate_hia18_mac COIN EDGE tndiff
ngate_hia18_mac_WL = DFM PROPERTY ngate_hia18_mac ngate_hia18_mac_in_edge ngate_hia18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_hia18_mac_in_edge) + length(ngate_hia18_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_hia18_mac)/property_ref(drawn_w) ]
nch_hia18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hia18_mac" ANNOTATE OD_p ngate_hia18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hia18_mac"
       drawn_w = DFM_NUM_VAL( ngate_hia18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_hia18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hia18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_hia25_mac) ngate_hia25_mac ngate_hia25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_hia25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hia25_mac, tndiff ) + perimeter_inside(ngate_hia25_mac, tndiff)) / 2
   L=area(ngate_hia25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hia25_mac" 
ngate_hia25_mac_in_edge = ngate_hia25_mac INSIDE EDGE tndiff
ngate_hia25_mac_coin_edge = ngate_hia25_mac COIN EDGE tndiff
ngate_hia25_mac_WL = DFM PROPERTY ngate_hia25_mac ngate_hia25_mac_in_edge ngate_hia25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_hia25_mac_in_edge) + length(ngate_hia25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_hia25_mac)/property_ref(drawn_w) ]
nch_hia25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hia25_mac" ANNOTATE OD_p ngate_hia25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hia25_mac"
       drawn_w = DFM_NUM_VAL( ngate_hia25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_hia25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hia25_mac_ODN_layer
#ENDIF

ngate_hia_macz1 = SIZE ngate_hia_mac BY 0.005
ngate_hia_macz = ngate_hia_macz1 AND nthin1
DEVICE MN(nch_hia_mac) ngate_hia_macz ngate_hia_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_hia_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hia_mac" 
ngate_hia_mac_in_edge = ngate_hia_mac INSIDE EDGE tndiff
ngate_hia_mac_coin_edge = ngate_hia_mac COIN EDGE tndiff
ngate_hia_mac_WL = DFM PROPERTY ngate_hia_mac ngate_hia_mac_in_edge ngate_hia_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_hia_mac_in_edge) + length(ngate_hia_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_hia_mac)/property_ref(drawn_w) ]
nch_hia_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hia_mac" ANNOTATE OD_p ngate_hia_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hia_mac"
       drawn_w = DFM_NUM_VAL( ngate_hia_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_hia_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hia_mac_ODN_layer
#ENDIF

DEVICE MN(nch_hlqrpsr) ngate_lpqrpsr ngate_lpqrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hlqrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_lpqrpsr, tndiff ) + perimeter_inside(ngate_lpqrpsr, tndiff)) / 2
   L=area(ngate_lpqrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_hlrpsr) ngate_lprpsr ngate_lprpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hlrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_lprpsr, tndiff ) + perimeter_inside(ngate_lprpsr, tndiff)) / 2
   L=area(ngate_lprpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_hlsvtrpsr) ngate_hlsvtqrpsr ngate_hlsvtqrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hlsvtrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hlsvtqrpsr, tndiff ) + perimeter_inside(ngate_hlsvtqrpsr, tndiff)) / 2
   L=area(ngate_hlsvtqrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_hltrpsr) ngate_hltrpsr ngate_hltrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hltrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hltrpsr, tndiff ) + perimeter_inside(ngate_hltrpsr, tndiff)) / 2
   L=area(ngate_hltrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

nhvgate_macz1 = SIZE nhvgate_mac BY 0.005
nhvgate_macz = nhvgate_macz1 AND nthin1
DEVICE MN(nch_hvt_mac) nhvgate_macz nhvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_hvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt_mac" 
nhvgate_mac_in_edge = nhvgate_mac INSIDE EDGE tndiff
nhvgate_mac_coin_edge = nhvgate_mac COIN EDGE tndiff
nhvgate_mac_WL = DFM PROPERTY nhvgate_mac nhvgate_mac_in_edge nhvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nhvgate_mac_in_edge) + length(nhvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nhvgate_mac)/property_ref(drawn_w) ]
nch_hvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt_mac" ANNOTATE OD_p nhvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt_mac"
       drawn_w = DFM_NUM_VAL( nhvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nhvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_hvtllrpsr) ngate_hvtllrpsr ngate_hvtllrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hvtllrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hvtllrpsr, tndiff ) + perimeter_inside(ngate_hvtllrpsr, tndiff)) / 2
   L=area(ngate_hvtllrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_hvtrpsr) ngate_hvtrpsr ngate_hvtrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hvtrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hvtrpsr, tndiff ) + perimeter_inside(ngate_hvtrpsr, tndiff)) / 2
   L=area(ngate_hvtrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_io_lvt_mac) ngate_io_lvt_mac ngate_io_lvt_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_io_lvt_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_io_lvt_mac, tndiff ) + perimeter_inside(ngate_io_lvt_mac, tndiff)) / 2
   L=area(ngate_io_lvt_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_llrpsr) ngate_llrpsr ngate_llrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_llrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_llrpsr, tndiff ) + perimeter_inside(ngate_llrpsr, tndiff)) / 2
   L=area(ngate_llrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_lvt18ud12_mac) ngate_lvt18ud12_mac ngate_lvt18ud12_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_lvt18ud12_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_lvt18ud12_mac, tndiff ) + perimeter_inside(ngate_lvt18ud12_mac, tndiff)) / 2
   L=area(ngate_lvt18ud12_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

nlvgate_macz1 = SIZE nlvgate_mac BY 0.005
nlvgate_macz = nlvgate_macz1 AND nthin1
DEVICE MN(nch_lvt_mac) nlvgate_macz nlvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt_mac" 
nlvgate_mac_in_edge = nlvgate_mac INSIDE EDGE tndiff
nlvgate_mac_coin_edge = nlvgate_mac COIN EDGE tndiff
nlvgate_mac_WL = DFM PROPERTY nlvgate_mac nlvgate_mac_in_edge nlvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlvgate_mac_in_edge) + length(nlvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlvgate_mac)/property_ref(drawn_w) ]
nch_lvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt_mac" ANNOTATE OD_p nlvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_mac"
       drawn_w = DFM_NUM_VAL( nlvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvtrpsr) ngate_lvtrpsr ngate_lvtrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_lvtrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_lvtrpsr, tndiff ) + perimeter_inside(ngate_lvtrpsr, tndiff)) / 2
   L=area(ngate_lvtrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

ngate_macz1 = SIZE ngate_mac BY 0.005
ngate_macz = ngate_macz1 AND nthin1
DEVICE MN(nch_mac) ngate_macz ngate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_mac" 
ngate_mac_in_edge = ngate_mac INSIDE EDGE tndiff
ngate_mac_coin_edge = ngate_mac COIN EDGE tndiff
ngate_mac_WL = DFM PROPERTY ngate_mac ngate_mac_in_edge ngate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_mac_in_edge) + length(ngate_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_mac)/property_ref(drawn_w) ]
nch_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_mac" ANNOTATE OD_p ngate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mac"
       drawn_w = DFM_NUM_VAL( ngate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_mac_ODN_layer
#ENDIF

nilvtgate_macz1 = SIZE nilvtgate_mac BY 0.005
nilvtgate_macz = nilvtgate_macz1 AND nthin1
DEVICE MN(nch_mlvt_mac) nilvtgate_macz nilvtgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mlvt_mac netlist element "X" CMACRO dfm_nmos_core

DEVICE MN(nch_na15_mac) ngate_15na_mac ngate_15na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na15_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_15na_mac, tndiff ) + perimeter_inside(ngate_15na_mac, tndiff)) / 2
   L=area(ngate_15na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na18_mac) ngate_18na_mac ngate_18na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na18_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18na_mac, tndiff ) + perimeter_inside(ngate_18na_mac, tndiff)) / 2
   L=area(ngate_18na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na18_mac" 
ngate_18na_mac_in_edge = ngate_18na_mac INSIDE EDGE tndiff
ngate_18na_mac_coin_edge = ngate_18na_mac COIN EDGE tndiff
ngate_18na_mac_WL = DFM PROPERTY ngate_18na_mac ngate_18na_mac_in_edge ngate_18na_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18na_mac_in_edge) + length(ngate_18na_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18na_mac)/property_ref(drawn_w) ]
nch_na18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na18_mac" ANNOTATE OD_p ngate_18na_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na18_mac"
       drawn_w = DFM_NUM_VAL( ngate_18na_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18na_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na18ud15_mac) ngate_18naud15_mac ngate_18naud15_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na18ud15_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_18naud15_mac, tndiff ) + perimeter_inside(ngate_18naud15_mac, tndiff)) / 2
   L=area(ngate_18naud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na25_mac) ngate_25na_mac ngate_25na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na25_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25na_mac, tndiff ) + perimeter_inside(ngate_25na_mac, tndiff)) / 2
   L=area(ngate_25na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25_mac" 
ngate_25na_mac_in_edge = ngate_25na_mac INSIDE EDGE tndiff
ngate_25na_mac_coin_edge = ngate_25na_mac COIN EDGE tndiff
ngate_25na_mac_WL = DFM PROPERTY ngate_25na_mac ngate_25na_mac_in_edge ngate_25na_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25na_mac_in_edge) + length(ngate_25na_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25na_mac)/property_ref(drawn_w) ]
nch_na25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25_mac" ANNOTATE OD_p ngate_25na_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25_mac"
       drawn_w = DFM_NUM_VAL( ngate_25na_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25na_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na25od33_mac) ngate_25naod_mac ngate_25naod_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na25od33_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25naod_mac, tndiff ) + perimeter_inside(ngate_25naod_mac, tndiff)) / 2
   L=area(ngate_25naod_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na25ud18_mac) ngate_25naud_mac ngate_25naud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na25ud18_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_25naud_mac, tndiff ) + perimeter_inside(ngate_25naud_mac, tndiff)) / 2
   L=area(ngate_25naud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na33_mac) ngate_33na_mac ngate_33na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na33_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_33na_mac, tndiff ) + perimeter_inside(ngate_33na_mac, tndiff)) / 2
   L=area(ngate_33na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na_mac) nlgate_mac nlgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(nlgate_mac, tndiff ) + perimeter_inside(nlgate_mac, tndiff)) / 2
   L=area(nlgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na_mac" 
nlgate_mac_in_edge = nlgate_mac INSIDE EDGE tndiff
nlgate_mac_coin_edge = nlgate_mac COIN EDGE tndiff
nlgate_mac_WL = DFM PROPERTY nlgate_mac nlgate_mac_in_edge nlgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlgate_mac_in_edge) + length(nlgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlgate_mac)/property_ref(drawn_w) ]
nch_na_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na_mac" ANNOTATE OD_p nlgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na_mac"
       drawn_w = DFM_NUM_VAL( nlgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na_mac_ODN_layer
#ENDIF

DEVICE MN(nch_qrpsr) ngate_qrpsr ngate_qrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_qrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_qrpsr, tndiff ) + perimeter_inside(ngate_qrpsr, tndiff)) / 2
   L=area(ngate_qrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_rom) ngate_rom ngate_rom(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_rom [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_rom, tndiff ) + perimeter_inside(ngate_rom, tndiff)) / 2
   L=area(ngate_rom) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_rpsr) ngate_rpsr ngate_rpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_rpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_rpsr, tndiff ) + perimeter_inside(ngate_rpsr, tndiff)) / 2
   L=area(ngate_rpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

ngate_svt_sp_macz1 = SIZE ngate_svt_sp_mac BY 0.005
ngate_svt_sp_macz = ngate_svt_sp_macz1 AND nthin1
DEVICE MN(nch_svt_sp_mac) ngate_svt_sp_macz ngate_svt_sp_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_svt_sp_mac netlist element "X" CMACRO dfm_nmos_core

DEVICE MN(nch_svtllrpsr) ngate_svtllrpsr ngate_svtllrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_svtllrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_svtllrpsr, tndiff ) + perimeter_inside(ngate_svtllrpsr, tndiff)) / 2
   L=area(ngate_svtllrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_svtrpsr) ngate_svtrpsr ngate_svtrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_svtrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_svtrpsr, tndiff ) + perimeter_inside(ngate_svtrpsr, tndiff)) / 2
   L=area(ngate_svtrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

nuhvgate_macz1 = SIZE nuhvgate_mac BY 0.005
nuhvgate_macz = nuhvgate_macz1 AND nthin1
DEVICE MN(nch_uhvt_mac) nuhvgate_macz nuhvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_uhvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_uhvt_mac" 
nuhvgate_mac_in_edge = nuhvgate_mac INSIDE EDGE tndiff
nuhvgate_mac_coin_edge = nuhvgate_mac COIN EDGE tndiff
nuhvgate_mac_WL = DFM PROPERTY nuhvgate_mac nuhvgate_mac_in_edge nuhvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nuhvgate_mac_in_edge) + length(nuhvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nuhvgate_mac)/property_ref(drawn_w) ]
nch_uhvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_uhvt_mac" ANNOTATE OD_p nuhvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_uhvt_mac"
       drawn_w = DFM_NUM_VAL( nuhvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nuhvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_uhvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ullrpsr) ngate_ullrpsr ngate_ullrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_ullrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_ullrpsr, tndiff ) + perimeter_inside(ngate_ullrpsr, tndiff)) / 2
   L=area(ngate_ullrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

nuvgate_macz1 = SIZE nuvgate_mac BY 0.005
nuvgate_macz = nuvgate_macz1 AND nthin1
DEVICE MN(nch_ulvt_mac) nuvgate_macz nuvgate_mac(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ulvt_mac netlist element "X" CMACRO dfm_nmos_core
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ulvt_mac" 
nuvgate_mac_in_edge = nuvgate_mac INSIDE EDGE tndiff
nuvgate_mac_coin_edge = nuvgate_mac COIN EDGE tndiff
nuvgate_mac_WL = DFM PROPERTY nuvgate_mac nuvgate_mac_in_edge nuvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nuvgate_mac_in_edge) + length(nuvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nuvgate_mac)/property_ref(drawn_w) ]
nch_ulvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ulvt_mac" ANNOTATE OD_p nuvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvt_mac"
       drawn_w = DFM_NUM_VAL( nuvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nuvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ulvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_zvt_mac) nzvgate_mac nzvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_zvt_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W=(perimeter_coincide(nzvgate_mac, tndiff ) + perimeter_inside(nzvgate_mac, tndiff)) / 2
   L=area(nzvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nchpd_dpsr) ngate_sdppd ngate_sdppd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_dpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_sdppd, tndiff ) + perimeter_inside(ngate_sdppd, tndiff)) / 2
   L=area(ngate_sdppd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_hldpsr) ngate_pd_lpdpsr ngate_pd_lpdpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_hldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pd_lpdpsr, tndiff ) + perimeter_inside(ngate_pd_lpdpsr, tndiff)) / 2
   L=area(ngate_pd_lpdpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_hlsr) ngate_pd_lpsr ngate_pd_lpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_hlsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pd_lpsr, tndiff ) + perimeter_inside(ngate_pd_lpsr, tndiff)) / 2
   L=area(ngate_pd_lpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_hltsr) ngate_pd_hltsr ngate_pd_hltsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_hltsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pd_hltsr, tndiff ) + perimeter_inside(ngate_pd_hltsr, tndiff)) / 2
   L=area(ngate_pd_hltsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_hvtsr) ngate_hvspd ngate_hvspd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_hvtsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hvspd, tndiff ) + perimeter_inside(ngate_hvspd, tndiff)) / 2
   L=area(ngate_hvspd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_iosr_mac) ngate_siopd ngate_siopd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_iosr_mac [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_siopd, tndiff ) + perimeter_inside(ngate_siopd, tndiff)) / 2
   L=area(ngate_siopd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_lldpsr) ngate_pd_lldpsr ngate_pd_lldpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_lldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pd_lldpsr, tndiff ) + perimeter_inside(ngate_pd_lldpsr, tndiff)) / 2
   L=area(ngate_pd_lldpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_llsr) ngate_pd_llsr ngate_pd_llsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_llsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pd_llsr, tndiff ) + perimeter_inside(ngate_pd_llsr, tndiff)) / 2
   L=area(ngate_pd_llsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_sr) ngate_spd ngate_spd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spd, tndiff ) + perimeter_inside(ngate_spd, tndiff)) / 2
   L=area(ngate_spd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_tgosr) ngate_stgopd ngate_stgopd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_tgosr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_stgopd, tndiff ) + perimeter_inside(ngate_stgopd, tndiff)) / 2
   L=area(ngate_stgopd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ulldpsr) ngate_pd_ulldpsr ngate_pd_ulldpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ulldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pd_ulldpsr, tndiff ) + perimeter_inside(ngate_pd_ulldpsr, tndiff)) / 2
   L=area(ngate_pd_ulldpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ullsr) ngate_pd_ullsr ngate_pd_ullsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pd_ullsr, tndiff ) + perimeter_inside(ngate_pd_ullsr, tndiff)) / 2
   L=area(ngate_pd_ullsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_dpsr) ngate_sdppg ngate_sdppg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_dpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_sdppg, tndiff ) + perimeter_inside(ngate_sdppg, tndiff)) / 2
   L=area(ngate_sdppg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_hldpsr) ngate_pg_lpdpsr ngate_pg_lpdpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_hldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pg_lpdpsr, tndiff ) + perimeter_inside(ngate_pg_lpdpsr, tndiff)) / 2
   L=area(ngate_pg_lpdpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_hlsr) ngate_pg_lpsr ngate_pg_lpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_hlsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pg_lpsr, tndiff ) + perimeter_inside(ngate_pg_lpsr, tndiff)) / 2
   L=area(ngate_pg_lpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_hltsr) ngate_pg_hltsr ngate_pg_hltsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_hltsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pg_hltsr, tndiff ) + perimeter_inside(ngate_pg_hltsr, tndiff)) / 2
   L=area(ngate_pg_hltsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_hvtsr) ngate_hvspg ngate_hvspg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_hvtsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hvspg, tndiff ) + perimeter_inside(ngate_hvspg, tndiff)) / 2
   L=area(ngate_hvspg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_iosr_mac) ngate_siopg ngate_siopg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_iosr_mac [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_siopg, tndiff ) + perimeter_inside(ngate_siopg, tndiff)) / 2
   L=area(ngate_siopg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_lldpsr) ngate_pg_lldpsr ngate_pg_lldpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_lldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pg_lldpsr, tndiff ) + perimeter_inside(ngate_pg_lldpsr, tndiff)) / 2
   L=area(ngate_pg_lldpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_llsr) ngate_pg_llsr ngate_pg_llsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_llsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pg_llsr, tndiff ) + perimeter_inside(ngate_pg_llsr, tndiff)) / 2
   L=area(ngate_pg_llsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_sr) ngate_spg ngate_spg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_spg, tndiff ) + perimeter_inside(ngate_spg, tndiff)) / 2
   L=area(ngate_spg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_tgosr) ngate_stgopg ngate_stgopg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_tgosr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_stgopg, tndiff ) + perimeter_inside(ngate_stgopg, tndiff)) / 2
   L=area(ngate_stgopg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ulldpsr) ngate_pg_ulldpsr ngate_pg_ulldpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ulldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pg_ulldpsr, tndiff ) + perimeter_inside(ngate_pg_ulldpsr, tndiff)) / 2
   L=area(ngate_pg_ulldpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ullsr) ngate_pg_ullsr ngate_pg_ullsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_pg_ullsr, tndiff ) + perimeter_inside(ngate_pg_ullsr, tndiff)) / 2
   L=area(ngate_pg_ullsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchrpd_sr) ngate_rpdsr ngate_rpdsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchrpd_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_rpdsr, tndiff ) + perimeter_inside(ngate_rpdsr, tndiff)) / 2
   L=area(ngate_rpdsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pch_15_mac) pgate_15_mac pgate_15_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_15_mac, tpdiff ) + perimeter_inside(pgate_15_mac, tpdiff)) / 2
   L=area(pgate_15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_15od18_mac) pgate_15od18_mac pgate_15od18_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_15od18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_15od18_mac, tpdiff ) + perimeter_inside(pgate_15od18_mac, tpdiff)) / 2
   L=area(pgate_15od18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_18_mac) pgate_18_mac pgate_18_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_18_mac, tpdiff ) + perimeter_inside(pgate_18_mac, tpdiff)) / 2
   L=area(pgate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18_mac" 
pgate_18_mac_in_edge = pgate_18_mac INSIDE EDGE tpdiff
pgate_18_mac_coin_edge = pgate_18_mac COIN EDGE tpdiff
pgate_18_mac_WL = DFM PROPERTY pgate_18_mac pgate_18_mac_in_edge pgate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18_mac_in_edge) + length(pgate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18_mac)/property_ref(drawn_w) ]
pch_18_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18_mac" ANNOTATE OD_p pgate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18_mac"
       drawn_w = DFM_NUM_VAL( pgate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18_mac_ODN_layer
#ENDIF

DEVICE MP(pch_18ud12_mac) pgate_18ud12_mac pgate_18ud12_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18ud12_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_18ud12_mac, tpdiff ) + perimeter_inside(pgate_18ud12_mac, tpdiff)) / 2
   L=area(pgate_18ud12_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18ud12_mac" 
pgate_18ud12_mac_in_edge = pgate_18ud12_mac INSIDE EDGE tpdiff
pgate_18ud12_mac_coin_edge = pgate_18ud12_mac COIN EDGE tpdiff
pgate_18ud12_mac_WL = DFM PROPERTY pgate_18ud12_mac pgate_18ud12_mac_in_edge pgate_18ud12_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18ud12_mac_in_edge) + length(pgate_18ud12_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18ud12_mac)/property_ref(drawn_w) ]
pch_18ud12_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18ud12_mac" ANNOTATE OD_p pgate_18ud12_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18ud12_mac"
       drawn_w = DFM_NUM_VAL( pgate_18ud12_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18ud12_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18ud12_mac_ODN_layer
#ENDIF

DEVICE MP(pch_18ud15_mac) pgate_18ud15_mac pgate_18ud15_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_18ud15_mac, tpdiff ) + perimeter_inside(pgate_18ud15_mac, tpdiff)) / 2
   L=area(pgate_18ud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18ud15_mac" 
pgate_18ud15_mac_in_edge = pgate_18ud15_mac INSIDE EDGE tpdiff
pgate_18ud15_mac_coin_edge = pgate_18ud15_mac COIN EDGE tpdiff
pgate_18ud15_mac_WL = DFM PROPERTY pgate_18ud15_mac pgate_18ud15_mac_in_edge pgate_18ud15_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18ud15_mac_in_edge) + length(pgate_18ud15_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18ud15_mac)/property_ref(drawn_w) ]
pch_18ud15_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18ud15_mac" ANNOTATE OD_p pgate_18ud15_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18ud15_mac"
       drawn_w = DFM_NUM_VAL( pgate_18ud15_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18ud15_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18ud15_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25_mac) pgate_25_mac pgate_25_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_25_mac, tpdiff ) + perimeter_inside(pgate_25_mac, tpdiff)) / 2
   L=area(pgate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25_mac" 
pgate_25_mac_in_edge = pgate_25_mac INSIDE EDGE tpdiff
pgate_25_mac_coin_edge = pgate_25_mac COIN EDGE tpdiff
pgate_25_mac_WL = DFM PROPERTY pgate_25_mac pgate_25_mac_in_edge pgate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25_mac_in_edge) + length(pgate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25_mac)/property_ref(drawn_w) ]
pch_25_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25_mac" ANNOTATE OD_p pgate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25_mac"
       drawn_w = DFM_NUM_VAL( pgate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25od33_mac) pgate_25od_mac pgate_25od_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_25od_mac, tpdiff ) + perimeter_inside(pgate_25od_mac, tpdiff)) / 2
   L=area(pgate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25od33_mac" 
pgate_25od_mac_in_edge = pgate_25od_mac INSIDE EDGE tpdiff
pgate_25od_mac_coin_edge = pgate_25od_mac COIN EDGE tpdiff
pgate_25od_mac_WL = DFM PROPERTY pgate_25od_mac pgate_25od_mac_in_edge pgate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25od_mac_in_edge) + length(pgate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25od_mac)/property_ref(drawn_w) ]
pch_25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25od33_mac" ANNOTATE OD_p pgate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25od33_mac"
       drawn_w = DFM_NUM_VAL( pgate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25od33_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25ud18_mac) pgate_25ud_mac pgate_25ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_25ud_mac, tpdiff ) + perimeter_inside(pgate_25ud_mac, tpdiff)) / 2
   L=area(pgate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25ud18_mac" 
pgate_25ud_mac_in_edge = pgate_25ud_mac INSIDE EDGE tpdiff
pgate_25ud_mac_coin_edge = pgate_25ud_mac COIN EDGE tpdiff
pgate_25ud_mac_WL = DFM PROPERTY pgate_25ud_mac pgate_25ud_mac_in_edge pgate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25ud_mac_in_edge) + length(pgate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25ud_mac)/property_ref(drawn_w) ]
pch_25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25ud18_mac" ANNOTATE OD_p pgate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25ud18_mac"
       drawn_w = DFM_NUM_VAL( pgate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25ud18_mac_ODN_layer
#ENDIF

DEVICE MP(pch_33_mac) pgate_33_mac pgate_33_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT  = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_33_mac, tpdiff ) + perimeter_inside(pgate_33_mac, tpdiff)) / 2
   L=area(pgate_33_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
   // Strained silicon
   G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
   G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
   G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
   G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
   PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
   PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
   PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
   PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
   spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
   spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
   enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
   rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
   G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
   G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
   G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
   sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
   sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
   sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
   // Metal Boundary Effect
   pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
   pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
   spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
   spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

alvtpgate_macz1 = SIZE alvtpgate_mac BY 0.005
alvtpgate_macz = alvtpgate_macz1 AND pthin
DEVICE MP(pch_alvt_mac) alvtpgate_macz alvtpgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_alvt_mac netlist element "X" CMACRO dfm_pmos

pehvgate_macz1 = SIZE pehvgate_mac BY 0.005
pehvgate_macz = pehvgate_macz1 AND pthin
DEVICE MP(pch_ehvt_mac) pehvgate_macz pehvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_ehvt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_ehvt_mac" 
pehvgate_mac_in_edge = pehvgate_mac INSIDE EDGE tpdiff
pehvgate_mac_coin_edge = pehvgate_mac COIN EDGE tpdiff
pehvgate_mac_WL = DFM PROPERTY pehvgate_mac pehvgate_mac_in_edge pehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pehvgate_mac_in_edge) + length(pehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pehvgate_mac)/property_ref(drawn_w) ]
pch_ehvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_ehvt_mac" ANNOTATE OD_p pehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ehvt_mac"
       drawn_w = DFM_NUM_VAL( pehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ehvt_mac_ODN_layer
#ENDIF

pelvgate_macz1 = SIZE pelvgate_mac BY 0.005
pelvgate_macz = pelvgate_macz1 AND pthin
DEVICE MP(pch_elvt_mac) pelvgate_macz pelvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_elvt_mac netlist element "X" CMACRO dfm_pmos

pgate_hg_macz1 = SIZE pgate_hg_mac BY 0.005
pgate_hg_macz = pgate_hg_macz1 AND pthin
DEVICE MP(pch_hg_mac) pgate_hg_macz pgate_hg_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_hg_mac netlist element "X" CMACRO dfm_pmos

puhvgate_hg_macz1 = SIZE puhvgate_hg_mac BY 0.005
puhvgate_hg_macz = puhvgate_hg_macz1 AND pthin
DEVICE MP(pch_hguhvt_mac) puhvgate_hg_macz puhvgate_hg_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_hguhvt_mac netlist element "X" CMACRO dfm_pmos

phvgate_macz1 = SIZE phvgate_mac BY 0.005
phvgate_macz = phvgate_macz1 AND pthin
DEVICE MP(pch_hvt_mac) phvgate_macz phvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_hvt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_hvt_mac" 
phvgate_mac_in_edge = phvgate_mac INSIDE EDGE tpdiff
phvgate_mac_coin_edge = phvgate_mac COIN EDGE tpdiff
phvgate_mac_WL = DFM PROPERTY phvgate_mac phvgate_mac_in_edge phvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(phvgate_mac_in_edge) + length(phvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(phvgate_mac)/property_ref(drawn_w) ]
pch_hvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_hvt_mac" ANNOTATE OD_p phvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_hvt_mac"
       drawn_w = DFM_NUM_VAL( phvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( phvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_hvt_mac_ODN_layer
#ENDIF

plvgate_macz1 = SIZE plvgate_mac BY 0.005
plvgate_macz = plvgate_macz1 AND pthin
DEVICE MP(pch_lvt_mac) plvgate_macz plvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_lvt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_lvt_mac" 
plvgate_mac_in_edge = plvgate_mac INSIDE EDGE tpdiff
plvgate_mac_coin_edge = plvgate_mac COIN EDGE tpdiff
plvgate_mac_WL = DFM PROPERTY plvgate_mac plvgate_mac_in_edge plvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(plvgate_mac_in_edge) + length(plvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(plvgate_mac)/property_ref(drawn_w) ]
pch_lvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_lvt_mac" ANNOTATE OD_p plvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvt_mac"
       drawn_w = DFM_NUM_VAL( plvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( plvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_lvt_mac_ODN_layer
#ENDIF

pgate_macz1 = SIZE pgate_mac BY 0.005
pgate_macz = pgate_macz1 AND pthin
DEVICE MP(pch_mac) pgate_macz pgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_mac" 
pgate_mac_in_edge = pgate_mac INSIDE EDGE tpdiff
pgate_mac_coin_edge = pgate_mac COIN EDGE tpdiff
pgate_mac_WL = DFM PROPERTY pgate_mac pgate_mac_in_edge pgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_mac_in_edge) + length(pgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_mac)/property_ref(drawn_w) ]
pch_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_mac" ANNOTATE OD_p pgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mac"
       drawn_w = DFM_NUM_VAL( pgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_mac_ODN_layer
#ENDIF

pilvtgate_macz1 = SIZE pilvtgate_mac BY 0.005
pilvtgate_macz = pilvtgate_macz1 AND pthin
DEVICE MP(pch_mlvt_mac) pilvtgate_macz pilvtgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mlvt_mac netlist element "X" CMACRO dfm_pmos

pgate_svt_sp_macz1 = SIZE pgate_svt_sp_mac BY 0.005
pgate_svt_sp_macz = pgate_svt_sp_macz1 AND pthin
DEVICE MP(pch_svt_sp_mac) pgate_svt_sp_macz pgate_svt_sp_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_svt_sp_mac netlist element "X" CMACRO dfm_pmos

puhvgate_macz1 = SIZE puhvgate_mac BY 0.005
puhvgate_macz = puhvgate_macz1 AND pthin
DEVICE MP(pch_uhvt_mac) puhvgate_macz puhvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_uhvt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_uhvt_mac" 
puhvgate_mac_in_edge = puhvgate_mac INSIDE EDGE tpdiff
puhvgate_mac_coin_edge = puhvgate_mac COIN EDGE tpdiff
puhvgate_mac_WL = DFM PROPERTY puhvgate_mac puhvgate_mac_in_edge puhvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(puhvgate_mac_in_edge) + length(puhvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(puhvgate_mac)/property_ref(drawn_w) ]
pch_uhvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_uhvt_mac" ANNOTATE OD_p puhvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_uhvt_mac"
       drawn_w = DFM_NUM_VAL( puhvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( puhvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_uhvt_mac_ODN_layer
#ENDIF

puvgate_macz1 = SIZE puvgate_mac BY 0.005
puvgate_macz = puvgate_macz1 AND pthin
DEVICE MP(pch_ulvt_mac) puvgate_macz puvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_ulvt_mac netlist element "X" CMACRO dfm_pmos
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_ulvt_mac" 
puvgate_mac_in_edge = puvgate_mac INSIDE EDGE tpdiff
puvgate_mac_coin_edge = puvgate_mac COIN EDGE tpdiff
puvgate_mac_WL = DFM PROPERTY puvgate_mac puvgate_mac_in_edge puvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(puvgate_mac_in_edge) + length(puvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(puvgate_mac)/property_ref(drawn_w) ]
pch_ulvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_ulvt_mac" ANNOTATE OD_p puvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ulvt_mac"
       drawn_w = DFM_NUM_VAL( puvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( puvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ulvt_mac_ODN_layer
#ENDIF

DEVICE MP(pchpu_2psr) pgate_s_2psr pgate_s_2psr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_2psr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_s_2psr, tpdiff ) + perimeter_inside(pgate_s_2psr, tpdiff)) / 2
   L=area(pgate_s_2psr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_dpsr) pgate_sdp pgate_sdp(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_dpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_sdp, tpdiff ) + perimeter_inside(pgate_sdp, tpdiff)) / 2
   L=area(pgate_sdp) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_hldpsr) pgate_pu_lpdpsr pgate_pu_lpdpsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_hldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_pu_lpdpsr, tpdiff ) + perimeter_inside(pgate_pu_lpdpsr, tpdiff)) / 2
   L=area(pgate_pu_lpdpsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_hlsr) pgate_pu_lpsr pgate_pu_lpsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_hlsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_pu_lpsr, tpdiff ) + perimeter_inside(pgate_pu_lpsr, tpdiff)) / 2
   L=area(pgate_pu_lpsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_hltsr) pgate_pu_hltsr pgate_pu_hltsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_hltsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_pu_hltsr, tpdiff ) + perimeter_inside(pgate_pu_hltsr, tpdiff)) / 2
   L=area(pgate_pu_hltsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_hvtsr) pgate_hvs pgate_hvs(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_hvtsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_hvs, tpdiff ) + perimeter_inside(pgate_hvs, tpdiff)) / 2
   L=area(pgate_hvs) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_iosr_mac) pgate_sio pgate_sio(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_iosr_mac [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_sio, tpdiff ) + perimeter_inside(pgate_sio, tpdiff)) / 2
   L=area(pgate_sio) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_lldpsr) pgate_pu_lldpsr pgate_pu_lldpsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_lldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_pu_lldpsr, tpdiff ) + perimeter_inside(pgate_pu_lldpsr, tpdiff)) / 2
   L=area(pgate_pu_lldpsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_llsr) pgate_pu_llsr pgate_pu_llsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_llsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_pu_llsr, tpdiff ) + perimeter_inside(pgate_pu_llsr, tpdiff)) / 2
   L=area(pgate_pu_llsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_sr) pgate_s pgate_s(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_s, tpdiff ) + perimeter_inside(pgate_s, tpdiff)) / 2
   L=area(pgate_s) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_tgosr) pgate_stgo pgate_stgo(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_tgosr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_stgo, tpdiff ) + perimeter_inside(pgate_stgo, tpdiff)) / 2
   L=area(pgate_stgo) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ulldpsr) pgate_pu_ulldpsr pgate_pu_ulldpsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ulldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_pu_ulldpsr, tpdiff ) + perimeter_inside(pgate_pu_ulldpsr, tpdiff)) / 2
   L=area(pgate_pu_ulldpsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ullsr) pgate_pu_ullsr pgate_pu_ullsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W=(perimeter_coincide(pgate_pu_ullsr, tpdiff ) + perimeter_inside(pgate_pu_ullsr, tpdiff)) / 2
   L=area(pgate_pu_ullsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]


#ELSE
DEVICE LDDP(pch_hv18_mac) pgate_hv18_mac d_tpdiff_hv(D) pgate_hv18_mac(G) s_tpdiff_hv(S) nxwell(B) <pthin2_hv> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP>  <d_hvpw_area> netlist model pch_hv18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_hv18_mac, s_tpdiff_hv ) + perimeter_coincide(pgate_hv18_mac, d_tpdiff_hv)) / 2
   L = area(pgate_hv18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin2_hv)
   PI_D_OD = perimeter_inside(D,pthin2_hv)
   IF(PI_S_OD == 0) {
    AD = area(d_hvpw_area) * W / PI_D_OD
    AS = AD
    PD = perimeter(d_hvpw_area) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(d_hvpw_area) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(d_hvpw_area) * W /PI_D_OD }
   NRS = AS / W / W
   NRD_1 = area(D) - 2 * W * 0.5 * 1e-06
   NRD_2 = NRD_1 * W / PI_D_OD
   NRD   = NRD_2 / W / W
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE LDDP(pch_udm18_mac) pgate_udm18_mac d_tpdiff_udm(D) pgate_udm18_mac(G) s_tpdiff_udm(S) nxwell(B) <pthin_udm> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_udm18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_udm18_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm18_mac, d_tpdiff_udm)) / 2
   L = area(pgate_udm18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin_udm)
   PI_D_OD = perimeter_inside(D,pthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDP(pch_udm18ud15_mac) pgate_udm18ud15_mac d_tpdiff_udm(D) pgate_udm18ud15_mac(G) s_tpdiff_udm(S) nxwell(B) <pthin_udm> <OD> <lod_PROP> <pIO_WPEPROP> netlist model pch_udm18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_udm18ud15_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm18ud15_mac, d_tpdiff_udm)) / 2
   L = area(pgate_udm18ud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin_udm)
   PI_D_OD = perimeter_inside(D,pthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDP(pch_udm_mac) pgate_udm_mac d_tpdiff_udm(D) pgate_udm_mac(G) s_tpdiff_udm(S) nxwell(B) <pthin_udm> <OD> <lod_PROP> <pCore_WPEPROP> netlist model pch_udm_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_udm_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm_mac, d_tpdiff_udm)) / 2
   L = area(pgate_udm_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin_udm)
   PI_D_OD = perimeter_inside(D,pthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDN(nch_hv18_mac) ngate_hv18_mac d_tndiff_hv(D) ngate_hv18_mac(G) s_tndiff_hv(S) psub(B) <nthin2_hv> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP>  <d_hvnw_area> netlist model nch_hv18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hv18_mac, s_tndiff_hv ) + perimeter_coincide(ngate_hv18_mac, d_tndiff_hv)) / 2
   L = area(ngate_hv18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin2_hv)
   PI_D_OD = perimeter_inside(D,nthin2_hv)
   IF(PI_S_OD == 0) {
    AD = area(d_hvnw_area) * W / PI_D_OD
    AS = AD
    PD = perimeter(d_hvnw_area) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(d_hvnw_area) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(d_hvnw_area) * W /PI_D_OD }
   NRS = AS / W / W
   NRD_1 = area(D) - 2 * W * 0.5 * 1e-06
   NRD_2 = NRD_1 * W / PI_D_OD
   NRD   = NRD_2 / W / W
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE LDDN(nch_udm18_mac) ngate_udm18_mac d_tndiff_udm(D) ngate_udm18_mac(G) s_tndiff_udm(S) psub(B) <nthin_udm> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_udm18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_udm18_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm18_mac, d_tndiff_udm)) / 2
   L = area(ngate_udm18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin_udm)
   PI_D_OD = perimeter_inside(D,nthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDN(nch_udm18ud15_mac) ngate_udm18ud15_mac d_tndiff_udm(D) ngate_udm18ud15_mac(G) s_tndiff_udm(S) psub(B) <nthin_udm> <OD> <lod_PROP> <nIO_WPEPROP> netlist model nch_udm18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_udm18ud15_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm18ud15_mac, d_tndiff_udm)) / 2
   L = area(ngate_udm18ud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin_udm)
   PI_D_OD = perimeter_inside(D,nthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE LDDN(nch_udm_mac) ngate_udm_mac d_tndiff_udm(D) ngate_udm_mac(G) s_tndiff_udm(S) psub(B) <nthin_udm> <OD> <lod_PROP> <nCore_WPEPROP> netlist model nch_udm_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_udm_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm_mac, d_tndiff_udm)) / 2
   L = area(ngate_udm_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin_udm)
   PI_D_OD = perimeter_inside(D,nthin_udm)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
]

DEVICE MN(nch_15_mac) ngate_15_mac ngate_15_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_15_mac, tndiff ) + perimeter_inside(ngate_15_mac, tndiff)) / 2
   L = area(ngate_15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_15od18_mac) ngate_15od18_mac ngate_15od18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_15od18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_15od18_mac, tndiff ) + perimeter_inside(ngate_15od18_mac, tndiff)) / 2
   L = area(ngate_15od18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_18_mac) ngate_18_mac ngate_18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18_mac, tndiff ) + perimeter_inside(ngate_18_mac, tndiff)) / 2
   L = area(ngate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18_mac" 
ngate_18_mac_in_edge = ngate_18_mac INSIDE EDGE tndiff
ngate_18_mac_coin_edge = ngate_18_mac COIN EDGE tndiff
ngate_18_mac_WL = DFM PROPERTY ngate_18_mac ngate_18_mac_in_edge ngate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18_mac_in_edge) + length(ngate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18_mac)/property_ref(drawn_w) ]
nch_18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18_mac" ANNOTATE OD_p ngate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18_mac"
       drawn_w = DFM_NUM_VAL( ngate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18ud12_mac) ngate_18ud12_mac ngate_18ud12_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18ud12_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18ud12_mac, tndiff ) + perimeter_inside(ngate_18ud12_mac, tndiff)) / 2
   L = area(ngate_18ud12_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud12_mac" 
ngate_18ud12_mac_in_edge = ngate_18ud12_mac INSIDE EDGE tndiff
ngate_18ud12_mac_coin_edge = ngate_18ud12_mac COIN EDGE tndiff
ngate_18ud12_mac_WL = DFM PROPERTY ngate_18ud12_mac ngate_18ud12_mac_in_edge ngate_18ud12_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18ud12_mac_in_edge) + length(ngate_18ud12_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18ud12_mac)/property_ref(drawn_w) ]
nch_18ud12_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud12_mac" ANNOTATE OD_p ngate_18ud12_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud12_mac"
       drawn_w = DFM_NUM_VAL( ngate_18ud12_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18ud12_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud12_mac_ODN_layer
#ENDIF

DEVICE MN(nch_18ud15_mac) ngate_18ud15_mac ngate_18ud15_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18ud15_mac, tndiff ) + perimeter_inside(ngate_18ud15_mac, tndiff)) / 2
   L = area(ngate_18ud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_18ud15_mac" 
ngate_18ud15_mac_in_edge = ngate_18ud15_mac INSIDE EDGE tndiff
ngate_18ud15_mac_coin_edge = ngate_18ud15_mac COIN EDGE tndiff
ngate_18ud15_mac_WL = DFM PROPERTY ngate_18ud15_mac ngate_18ud15_mac_in_edge ngate_18ud15_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18ud15_mac_in_edge) + length(ngate_18ud15_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18ud15_mac)/property_ref(drawn_w) ]
nch_18ud15_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_18ud15_mac" ANNOTATE OD_p ngate_18ud15_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_18ud15_mac"
       drawn_w = DFM_NUM_VAL( ngate_18ud15_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18ud15_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_18ud15_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25_mac) ngate_25_mac ngate_25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25_mac, tndiff ) + perimeter_inside(ngate_25_mac, tndiff)) / 2
   L = area(ngate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25_mac" 
ngate_25_mac_in_edge = ngate_25_mac INSIDE EDGE tndiff
ngate_25_mac_coin_edge = ngate_25_mac COIN EDGE tndiff
ngate_25_mac_WL = DFM PROPERTY ngate_25_mac ngate_25_mac_in_edge ngate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25_mac_in_edge) + length(ngate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25_mac)/property_ref(drawn_w) ]
nch_25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25_mac" ANNOTATE OD_p ngate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25_mac"
       drawn_w = DFM_NUM_VAL( ngate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25od33_mac) ngate_25od_mac ngate_25od_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25od_mac, tndiff ) + perimeter_inside(ngate_25od_mac, tndiff)) / 2
   L = area(ngate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25od33_mac" 
ngate_25od_mac_in_edge = ngate_25od_mac INSIDE EDGE tndiff
ngate_25od_mac_coin_edge = ngate_25od_mac COIN EDGE tndiff
ngate_25od_mac_WL = DFM PROPERTY ngate_25od_mac ngate_25od_mac_in_edge ngate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25od_mac_in_edge) + length(ngate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25od_mac)/property_ref(drawn_w) ]
nch_25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25od33_mac" ANNOTATE OD_p ngate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25od33_mac"
       drawn_w = DFM_NUM_VAL( ngate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25od33_mac_ODN_layer
#ENDIF

DEVICE MN(nch_25ud18_mac) ngate_25ud_mac ngate_25ud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25ud_mac, tndiff ) + perimeter_inside(ngate_25ud_mac, tndiff)) / 2
   L = area(ngate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_25ud18_mac" 
ngate_25ud_mac_in_edge = ngate_25ud_mac INSIDE EDGE tndiff
ngate_25ud_mac_coin_edge = ngate_25ud_mac COIN EDGE tndiff
ngate_25ud_mac_WL = DFM PROPERTY ngate_25ud_mac ngate_25ud_mac_in_edge ngate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25ud_mac_in_edge) + length(ngate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25ud_mac)/property_ref(drawn_w) ]
nch_25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_25ud18_mac" ANNOTATE OD_p ngate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_25ud18_mac"
       drawn_w = DFM_NUM_VAL( ngate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_25ud18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_33_mac) ngate_33_mac ngate_33_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_33_mac, tndiff ) + perimeter_inside(ngate_33_mac, tndiff)) / 2
   L = area(ngate_33_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_avt_mac) navtgate_mac navtgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_avt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(navtgate_mac, tndiff ) + perimeter_inside(navtgate_mac, tndiff)) / 2
   L = area(navtgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_avt_mac" 
navtgate_mac_in_edge = navtgate_mac INSIDE EDGE tndiff
navtgate_mac_coin_edge = navtgate_mac COIN EDGE tndiff
navtgate_mac_WL = DFM PROPERTY navtgate_mac navtgate_mac_in_edge navtgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(navtgate_mac_in_edge) + length(navtgate_mac_coin_edge))/2 ]
       [ drawn_l = area(navtgate_mac)/property_ref(drawn_w) ]
nch_avt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_avt_mac" ANNOTATE OD_p navtgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_avt_mac"
       drawn_w = DFM_NUM_VAL( navtgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( navtgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_avt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_chvt_mac) nchvgate_mac nchvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_chvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nchvgate_mac, tndiff ) + perimeter_inside(nchvgate_mac, tndiff)) / 2
   L = area(nchvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_edc_mac) ngate_edc_mac ngate_edc_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_edc_mac netlist element "X" [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_edc_mac, tndiff ) + perimeter_inside(ngate_edc_mac, tndiff)) / 2
   L = area(ngate_edc_mac) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_ehvt_mac) nehvgate_mac nehvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_ehvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nehvgate_mac, tndiff ) + perimeter_inside(nehvgate_mac, tndiff)) / 2
   L = area(nehvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ehvt_mac" 
nehvgate_mac_in_edge = nehvgate_mac INSIDE EDGE tndiff
nehvgate_mac_coin_edge = nehvgate_mac COIN EDGE tndiff
nehvgate_mac_WL = DFM PROPERTY nehvgate_mac nehvgate_mac_in_edge nehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nehvgate_mac_in_edge) + length(nehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nehvgate_mac)/property_ref(drawn_w) ]
nch_ehvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ehvt_mac" ANNOTATE OD_p nehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ehvt_mac"
       drawn_w = DFM_NUM_VAL( nehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ehvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_elvt_mac) nelvgate_mac nelvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_elvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nelvgate_mac, tndiff ) + perimeter_inside(nelvgate_mac, tndiff)) / 2
   L = area(nelvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_hg_mac) ngate_hg_mac ngate_hg_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_hg_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hg_mac, tndiff ) + perimeter_inside(ngate_hg_mac, tndiff)) / 2
   L = area(ngate_hg_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_hguhvt_mac) nuhvgate_hg_mac nuhvgate_hg_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_hguhvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nuhvgate_hg_mac, tndiff ) + perimeter_inside(nuhvgate_hg_mac, tndiff)) / 2
   L = area(nuhvgate_hg_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_hia15_mac) ngate_hia15_mac ngate_hia15_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_hia15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hia15_mac, tndiff ) + perimeter_inside(ngate_hia15_mac, tndiff)) / 2
   L = area(ngate_hia15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_hia18_mac) ngate_hia18_mac ngate_hia18_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_hia18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hia18_mac, tndiff ) + perimeter_inside(ngate_hia18_mac, tndiff)) / 2
   L = area(ngate_hia18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hia18_mac" 
ngate_hia18_mac_in_edge = ngate_hia18_mac INSIDE EDGE tndiff
ngate_hia18_mac_coin_edge = ngate_hia18_mac COIN EDGE tndiff
ngate_hia18_mac_WL = DFM PROPERTY ngate_hia18_mac ngate_hia18_mac_in_edge ngate_hia18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_hia18_mac_in_edge) + length(ngate_hia18_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_hia18_mac)/property_ref(drawn_w) ]
nch_hia18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hia18_mac" ANNOTATE OD_p ngate_hia18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hia18_mac"
       drawn_w = DFM_NUM_VAL( ngate_hia18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_hia18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hia18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_hia25_mac) ngate_hia25_mac ngate_hia25_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_hia25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hia25_mac, tndiff ) + perimeter_inside(ngate_hia25_mac, tndiff)) / 2
   L = area(ngate_hia25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hia25_mac" 
ngate_hia25_mac_in_edge = ngate_hia25_mac INSIDE EDGE tndiff
ngate_hia25_mac_coin_edge = ngate_hia25_mac COIN EDGE tndiff
ngate_hia25_mac_WL = DFM PROPERTY ngate_hia25_mac ngate_hia25_mac_in_edge ngate_hia25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_hia25_mac_in_edge) + length(ngate_hia25_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_hia25_mac)/property_ref(drawn_w) ]
nch_hia25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hia25_mac" ANNOTATE OD_p ngate_hia25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hia25_mac"
       drawn_w = DFM_NUM_VAL( ngate_hia25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_hia25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hia25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_hia_mac) ngate_hia_mac ngate_hia_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_hia_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hia_mac, tndiff ) + perimeter_inside(ngate_hia_mac, tndiff)) / 2
   L = area(ngate_hia_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hia_mac" 
ngate_hia_mac_in_edge = ngate_hia_mac INSIDE EDGE tndiff
ngate_hia_mac_coin_edge = ngate_hia_mac COIN EDGE tndiff
ngate_hia_mac_WL = DFM PROPERTY ngate_hia_mac ngate_hia_mac_in_edge ngate_hia_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_hia_mac_in_edge) + length(ngate_hia_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_hia_mac)/property_ref(drawn_w) ]
nch_hia_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hia_mac" ANNOTATE OD_p ngate_hia_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hia_mac"
       drawn_w = DFM_NUM_VAL( ngate_hia_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_hia_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hia_mac_ODN_layer
#ENDIF

DEVICE MN(nch_hlqrpsr) ngate_lpqrpsr ngate_lpqrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hlqrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_lpqrpsr, tndiff ) + perimeter_inside(ngate_lpqrpsr, tndiff)) / 2
   L = area(ngate_lpqrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_hlrpsr) ngate_lprpsr ngate_lprpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hlrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_lprpsr, tndiff ) + perimeter_inside(ngate_lprpsr, tndiff)) / 2
   L = area(ngate_lprpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_hlsvtrpsr) ngate_hlsvtqrpsr ngate_hlsvtqrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hlsvtrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hlsvtqrpsr, tndiff ) + perimeter_inside(ngate_hlsvtqrpsr, tndiff)) / 2
   L = area(ngate_hlsvtqrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_hltrpsr) ngate_hltrpsr ngate_hltrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hltrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hltrpsr, tndiff ) + perimeter_inside(ngate_hltrpsr, tndiff)) / 2
   L = area(ngate_hltrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_hvt_mac) nhvgate_mac nhvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_hvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nhvgate_mac, tndiff ) + perimeter_inside(nhvgate_mac, tndiff)) / 2
   L = area(nhvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_hvt_mac" 
nhvgate_mac_in_edge = nhvgate_mac INSIDE EDGE tndiff
nhvgate_mac_coin_edge = nhvgate_mac COIN EDGE tndiff
nhvgate_mac_WL = DFM PROPERTY nhvgate_mac nhvgate_mac_in_edge nhvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nhvgate_mac_in_edge) + length(nhvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nhvgate_mac)/property_ref(drawn_w) ]
nch_hvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_hvt_mac" ANNOTATE OD_p nhvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hvt_mac"
       drawn_w = DFM_NUM_VAL( nhvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nhvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_hvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_hvtllrpsr) ngate_hvtllrpsr ngate_hvtllrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hvtllrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hvtllrpsr, tndiff ) + perimeter_inside(ngate_hvtllrpsr, tndiff)) / 2
   L = area(ngate_hvtllrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_hvtrpsr) ngate_hvtrpsr ngate_hvtrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_hvtrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hvtrpsr, tndiff ) + perimeter_inside(ngate_hvtrpsr, tndiff)) / 2
   L = area(ngate_hvtrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_io_lvt_mac) ngate_io_lvt_mac ngate_io_lvt_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_io_lvt_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_io_lvt_mac, tndiff ) + perimeter_inside(ngate_io_lvt_mac, tndiff)) / 2
   L = area(ngate_io_lvt_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_llrpsr) ngate_llrpsr ngate_llrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_llrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_llrpsr, tndiff ) + perimeter_inside(ngate_llrpsr, tndiff)) / 2
   L = area(ngate_llrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_lvt18ud12_mac) ngate_lvt18ud12_mac ngate_lvt18ud12_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nIO_WPEPROP> <ngate_PROP> netlist model nch_lvt18ud12_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_lvt18ud12_mac, tndiff ) + perimeter_inside(ngate_lvt18ud12_mac, tndiff)) / 2
   L = area(ngate_lvt18ud12_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_lvt_mac) nlvgate_mac nlvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_lvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nlvgate_mac, tndiff ) + perimeter_inside(nlvgate_mac, tndiff)) / 2
   L = area(nlvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_lvt_mac" 
nlvgate_mac_in_edge = nlvgate_mac INSIDE EDGE tndiff
nlvgate_mac_coin_edge = nlvgate_mac COIN EDGE tndiff
nlvgate_mac_WL = DFM PROPERTY nlvgate_mac nlvgate_mac_in_edge nlvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlvgate_mac_in_edge) + length(nlvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlvgate_mac)/property_ref(drawn_w) ]
nch_lvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_lvt_mac" ANNOTATE OD_p nlvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_mac"
       drawn_w = DFM_NUM_VAL( nlvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_lvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvtrpsr) ngate_lvtrpsr ngate_lvtrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_lvtrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_lvtrpsr, tndiff ) + perimeter_inside(ngate_lvtrpsr, tndiff)) / 2
   L = area(ngate_lvtrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_mac) ngate_mac ngate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_mac, tndiff ) + perimeter_inside(ngate_mac, tndiff)) / 2
   L = area(ngate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_mac" 
ngate_mac_in_edge = ngate_mac INSIDE EDGE tndiff
ngate_mac_coin_edge = ngate_mac COIN EDGE tndiff
ngate_mac_WL = DFM PROPERTY ngate_mac ngate_mac_in_edge ngate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_mac_in_edge) + length(ngate_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_mac)/property_ref(drawn_w) ]
nch_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_mac" ANNOTATE OD_p ngate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mac"
       drawn_w = DFM_NUM_VAL( ngate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mlvt_mac) nilvtgate_mac nilvtgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_mlvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nilvtgate_mac, tndiff ) + perimeter_inside(nilvtgate_mac, tndiff)) / 2
   L = area(nilvtgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na15_mac) ngate_15na_mac ngate_15na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na15_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_15na_mac, tndiff ) + perimeter_inside(ngate_15na_mac, tndiff)) / 2
   L = area(ngate_15na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na18_mac) ngate_18na_mac ngate_18na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na18_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18na_mac, tndiff ) + perimeter_inside(ngate_18na_mac, tndiff)) / 2
   L = area(ngate_18na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na18_mac" 
ngate_18na_mac_in_edge = ngate_18na_mac INSIDE EDGE tndiff
ngate_18na_mac_coin_edge = ngate_18na_mac COIN EDGE tndiff
ngate_18na_mac_WL = DFM PROPERTY ngate_18na_mac ngate_18na_mac_in_edge ngate_18na_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_18na_mac_in_edge) + length(ngate_18na_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_18na_mac)/property_ref(drawn_w) ]
nch_na18_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na18_mac" ANNOTATE OD_p ngate_18na_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na18_mac"
       drawn_w = DFM_NUM_VAL( ngate_18na_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_18na_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na18_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na18ud15_mac) ngate_18naud15_mac ngate_18naud15_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na18ud15_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_18naud15_mac, tndiff ) + perimeter_inside(ngate_18naud15_mac, tndiff)) / 2
   L = area(ngate_18naud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na25_mac) ngate_25na_mac ngate_25na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na25_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25na_mac, tndiff ) + perimeter_inside(ngate_25na_mac, tndiff)) / 2
   L = area(ngate_25na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na25_mac" 
ngate_25na_mac_in_edge = ngate_25na_mac INSIDE EDGE tndiff
ngate_25na_mac_coin_edge = ngate_25na_mac COIN EDGE tndiff
ngate_25na_mac_WL = DFM PROPERTY ngate_25na_mac ngate_25na_mac_in_edge ngate_25na_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(ngate_25na_mac_in_edge) + length(ngate_25na_mac_coin_edge))/2 ]
       [ drawn_l = area(ngate_25na_mac)/property_ref(drawn_w) ]
nch_na25_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na25_mac" ANNOTATE OD_p ngate_25na_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na25_mac"
       drawn_w = DFM_NUM_VAL( ngate_25na_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( ngate_25na_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na25_mac_ODN_layer
#ENDIF

DEVICE MN(nch_na25od33_mac) ngate_25naod_mac ngate_25naod_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na25od33_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25naod_mac, tndiff ) + perimeter_inside(ngate_25naod_mac, tndiff)) / 2
   L = area(ngate_25naod_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na25ud18_mac) ngate_25naud_mac ngate_25naud_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na25ud18_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_25naud_mac, tndiff ) + perimeter_inside(ngate_25naud_mac, tndiff)) / 2
   L = area(ngate_25naud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na33_mac) ngate_33na_mac ngate_33na_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na33_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_33na_mac, tndiff ) + perimeter_inside(ngate_33na_mac, tndiff)) / 2
   L = area(ngate_33na_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_na_mac) nlgate_mac nlgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_na_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(nlgate_mac, tndiff ) + perimeter_inside(nlgate_mac, tndiff)) / 2
   L = area(nlgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_na_mac" 
nlgate_mac_in_edge = nlgate_mac INSIDE EDGE tndiff
nlgate_mac_coin_edge = nlgate_mac COIN EDGE tndiff
nlgate_mac_WL = DFM PROPERTY nlgate_mac nlgate_mac_in_edge nlgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nlgate_mac_in_edge) + length(nlgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nlgate_mac)/property_ref(drawn_w) ]
nch_na_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_na_mac" ANNOTATE OD_p nlgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_na_mac"
       drawn_w = DFM_NUM_VAL( nlgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nlgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_na_mac_ODN_layer
#ENDIF

DEVICE MN(nch_qrpsr) ngate_qrpsr ngate_qrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_qrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_qrpsr, tndiff ) + perimeter_inside(ngate_qrpsr, tndiff)) / 2
   L = area(ngate_qrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_rom) ngate_rom ngate_rom(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_rom [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_rom, tndiff ) + perimeter_inside(ngate_rom, tndiff)) / 2
   L = area(ngate_rom) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_rpsr) ngate_rpsr ngate_rpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_rpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_rpsr, tndiff ) + perimeter_inside(ngate_rpsr, tndiff)) / 2
   L = area(ngate_rpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_svt_sp_mac) ngate_svt_sp_mac ngate_svt_sp_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_svt_sp_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_svt_sp_mac, tndiff ) + perimeter_inside(ngate_svt_sp_mac, tndiff)) / 2
   L = area(ngate_svt_sp_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nch_svtllrpsr) ngate_svtllrpsr ngate_svtllrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_svtllrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_svtllrpsr, tndiff ) + perimeter_inside(ngate_svtllrpsr, tndiff)) / 2
   L = area(ngate_svtllrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_svtrpsr) ngate_svtrpsr ngate_svtrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_svtrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_svtrpsr, tndiff ) + perimeter_inside(ngate_svtrpsr, tndiff)) / 2
   L = area(ngate_svtrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_uhvt_mac) nuhvgate_mac nuhvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_uhvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nuhvgate_mac, tndiff ) + perimeter_inside(nuhvgate_mac, tndiff)) / 2
   L = area(nuhvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_uhvt_mac" 
nuhvgate_mac_in_edge = nuhvgate_mac INSIDE EDGE tndiff
nuhvgate_mac_coin_edge = nuhvgate_mac COIN EDGE tndiff
nuhvgate_mac_WL = DFM PROPERTY nuhvgate_mac nuhvgate_mac_in_edge nuhvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nuhvgate_mac_in_edge) + length(nuhvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nuhvgate_mac)/property_ref(drawn_w) ]
nch_uhvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_uhvt_mac" ANNOTATE OD_p nuhvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_uhvt_mac"
       drawn_w = DFM_NUM_VAL( nuhvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nuhvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_uhvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ullrpsr) ngate_ullrpsr ngate_ullrpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nch_ullrpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_ullrpsr, tndiff ) + perimeter_inside(ngate_ullrpsr, tndiff)) / 2
   L = area(ngate_ullrpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nch_ulvt_mac) nuvgate_mac nuvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <nCore_WPEPROP> <ngate_PROP> netlist model nch_ulvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = 0
   BOT_EXT = NMOS_BOT_EXT
   SCALE = PRESCALE
   W = (perimeter_coincide(nuvgate_mac, tndiff ) + perimeter_inside(nuvgate_mac, tndiff)) / 2
   L = area(nuvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( nCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( nCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( nCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "nch_ulvt_mac" 
nuvgate_mac_in_edge = nuvgate_mac INSIDE EDGE tndiff
nuvgate_mac_coin_edge = nuvgate_mac COIN EDGE tndiff
nuvgate_mac_WL = DFM PROPERTY nuvgate_mac nuvgate_mac_in_edge nuvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(nuvgate_mac_in_edge) + length(nuvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(nuvgate_mac)/property_ref(drawn_w) ]
nch_ulvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "nch_ulvt_mac" ANNOTATE OD_p nuvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvt_mac"
       drawn_w = DFM_NUM_VAL( nuvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( nuvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES nch_ulvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_zvt_mac) nzvgate_mac nzvgate_mac(G) tndiff(S) tndiff(D) psub(B) <nthin1> <OD> <lod_PROP> <ngate_PROP> netlist model nch_zvt_mac netlist element "X" [
  property sa,sb,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   SCALE = PRESCALE
   W = (perimeter_coincide(nzvgate_mac, tndiff ) + perimeter_inside(nzvgate_mac, tndiff)) / 2
   L = area(nzvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( ngate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( ngate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( ngate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( ngate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( ngate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( ngate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( ngate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( ngate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( ngate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( ngate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MN(nchpd_dpsr) ngate_sdppd ngate_sdppd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_dpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_sdppd, tndiff ) + perimeter_inside(ngate_sdppd, tndiff)) / 2
   L = area(ngate_sdppd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_hldpsr) ngate_pd_lpdpsr ngate_pd_lpdpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_hldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pd_lpdpsr, tndiff ) + perimeter_inside(ngate_pd_lpdpsr, tndiff)) / 2
   L = area(ngate_pd_lpdpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_hlsr) ngate_pd_lpsr ngate_pd_lpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_hlsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pd_lpsr, tndiff ) + perimeter_inside(ngate_pd_lpsr, tndiff)) / 2
   L = area(ngate_pd_lpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_hltsr) ngate_pd_hltsr ngate_pd_hltsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_hltsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pd_hltsr, tndiff ) + perimeter_inside(ngate_pd_hltsr, tndiff)) / 2
   L = area(ngate_pd_hltsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_hvtsr) ngate_hvspd ngate_hvspd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_hvtsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hvspd, tndiff ) + perimeter_inside(ngate_hvspd, tndiff)) / 2
   L = area(ngate_hvspd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_iosr_mac) ngate_siopd ngate_siopd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_iosr_mac [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_siopd, tndiff ) + perimeter_inside(ngate_siopd, tndiff)) / 2
   L = area(ngate_siopd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_lldpsr) ngate_pd_lldpsr ngate_pd_lldpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_lldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pd_lldpsr, tndiff ) + perimeter_inside(ngate_pd_lldpsr, tndiff)) / 2
   L = area(ngate_pd_lldpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_llsr) ngate_pd_llsr ngate_pd_llsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_llsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pd_llsr, tndiff ) + perimeter_inside(ngate_pd_llsr, tndiff)) / 2
   L = area(ngate_pd_llsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_sr) ngate_spd ngate_spd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spd, tndiff ) + perimeter_inside(ngate_spd, tndiff)) / 2
   L = area(ngate_spd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_tgosr) ngate_stgopd ngate_stgopd(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_tgosr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_stgopd, tndiff ) + perimeter_inside(ngate_stgopd, tndiff)) / 2
   L = area(ngate_stgopd) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ulldpsr) ngate_pd_ulldpsr ngate_pd_ulldpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ulldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pd_ulldpsr, tndiff ) + perimeter_inside(ngate_pd_ulldpsr, tndiff)) / 2
   L = area(ngate_pd_ulldpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpd_ullsr) ngate_pd_ullsr ngate_pd_ullsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpd_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pd_ullsr, tndiff ) + perimeter_inside(ngate_pd_ullsr, tndiff)) / 2
   L = area(ngate_pd_ullsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_dpsr) ngate_sdppg ngate_sdppg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_dpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_sdppg, tndiff ) + perimeter_inside(ngate_sdppg, tndiff)) / 2
   L = area(ngate_sdppg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_hldpsr) ngate_pg_lpdpsr ngate_pg_lpdpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_hldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pg_lpdpsr, tndiff ) + perimeter_inside(ngate_pg_lpdpsr, tndiff)) / 2
   L = area(ngate_pg_lpdpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_hlsr) ngate_pg_lpsr ngate_pg_lpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_hlsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pg_lpsr, tndiff ) + perimeter_inside(ngate_pg_lpsr, tndiff)) / 2
   L = area(ngate_pg_lpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_hltsr) ngate_pg_hltsr ngate_pg_hltsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_hltsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pg_hltsr, tndiff ) + perimeter_inside(ngate_pg_hltsr, tndiff)) / 2
   L = area(ngate_pg_hltsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_hvtsr) ngate_hvspg ngate_hvspg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_hvtsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_hvspg, tndiff ) + perimeter_inside(ngate_hvspg, tndiff)) / 2
   L = area(ngate_hvspg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_iosr_mac) ngate_siopg ngate_siopg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_iosr_mac [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_siopg, tndiff ) + perimeter_inside(ngate_siopg, tndiff)) / 2
   L = area(ngate_siopg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_lldpsr) ngate_pg_lldpsr ngate_pg_lldpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_lldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pg_lldpsr, tndiff ) + perimeter_inside(ngate_pg_lldpsr, tndiff)) / 2
   L = area(ngate_pg_lldpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_llsr) ngate_pg_llsr ngate_pg_llsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_llsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pg_llsr, tndiff ) + perimeter_inside(ngate_pg_llsr, tndiff)) / 2
   L = area(ngate_pg_llsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_sr) ngate_spg ngate_spg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_spg, tndiff ) + perimeter_inside(ngate_spg, tndiff)) / 2
   L = area(ngate_spg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_tgosr) ngate_stgopg ngate_stgopg(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_tgosr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_stgopg, tndiff ) + perimeter_inside(ngate_stgopg, tndiff)) / 2
   L = area(ngate_stgopg) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ulldpsr) ngate_pg_ulldpsr ngate_pg_ulldpsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ulldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pg_ulldpsr, tndiff ) + perimeter_inside(ngate_pg_ulldpsr, tndiff)) / 2
   L = area(ngate_pg_ulldpsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchpg_ullsr) ngate_pg_ullsr ngate_pg_ullsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchpg_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_pg_ullsr, tndiff ) + perimeter_inside(ngate_pg_ullsr, tndiff)) / 2
   L = area(ngate_pg_ullsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MN(nchrpd_sr) ngate_rpdsr ngate_rpdsr(G) tndiff(S) tndiff(D) psub(B) <nthin1> netlist model nchrpd_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(ngate_rpdsr, tndiff ) + perimeter_inside(ngate_rpdsr, tndiff)) / 2
   L = area(ngate_rpdsr) / W
   PI_S_OD = perimeter_inside(S,nthin1)
   PI_D_OD = perimeter_inside(D,nthin1)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pch_15_mac) pgate_15_mac pgate_15_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_15_mac, tpdiff ) + perimeter_inside(pgate_15_mac, tpdiff)) / 2
   L = area(pgate_15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_15od18_mac) pgate_15od18_mac pgate_15od18_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_15od18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_15od18_mac, tpdiff ) + perimeter_inside(pgate_15od18_mac, tpdiff)) / 2
   L = area(pgate_15od18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_18_mac) pgate_18_mac pgate_18_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_18_mac, tpdiff ) + perimeter_inside(pgate_18_mac, tpdiff)) / 2
   L = area(pgate_18_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18_mac" 
pgate_18_mac_in_edge = pgate_18_mac INSIDE EDGE tpdiff
pgate_18_mac_coin_edge = pgate_18_mac COIN EDGE tpdiff
pgate_18_mac_WL = DFM PROPERTY pgate_18_mac pgate_18_mac_in_edge pgate_18_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18_mac_in_edge) + length(pgate_18_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18_mac)/property_ref(drawn_w) ]
pch_18_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18_mac" ANNOTATE OD_p pgate_18_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18_mac"
       drawn_w = DFM_NUM_VAL( pgate_18_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18_mac_ODN_layer
#ENDIF

DEVICE MP(pch_18ud12_mac) pgate_18ud12_mac pgate_18ud12_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18ud12_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_18ud12_mac, tpdiff ) + perimeter_inside(pgate_18ud12_mac, tpdiff)) / 2
   L = area(pgate_18ud12_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18ud12_mac" 
pgate_18ud12_mac_in_edge = pgate_18ud12_mac INSIDE EDGE tpdiff
pgate_18ud12_mac_coin_edge = pgate_18ud12_mac COIN EDGE tpdiff
pgate_18ud12_mac_WL = DFM PROPERTY pgate_18ud12_mac pgate_18ud12_mac_in_edge pgate_18ud12_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18ud12_mac_in_edge) + length(pgate_18ud12_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18ud12_mac)/property_ref(drawn_w) ]
pch_18ud12_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18ud12_mac" ANNOTATE OD_p pgate_18ud12_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18ud12_mac"
       drawn_w = DFM_NUM_VAL( pgate_18ud12_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18ud12_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18ud12_mac_ODN_layer
#ENDIF

DEVICE MP(pch_18ud15_mac) pgate_18ud15_mac pgate_18ud15_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_18ud15_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_18ud15_mac, tpdiff ) + perimeter_inside(pgate_18ud15_mac, tpdiff)) / 2
   L = area(pgate_18ud15_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_18ud15_mac" 
pgate_18ud15_mac_in_edge = pgate_18ud15_mac INSIDE EDGE tpdiff
pgate_18ud15_mac_coin_edge = pgate_18ud15_mac COIN EDGE tpdiff
pgate_18ud15_mac_WL = DFM PROPERTY pgate_18ud15_mac pgate_18ud15_mac_in_edge pgate_18ud15_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_18ud15_mac_in_edge) + length(pgate_18ud15_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_18ud15_mac)/property_ref(drawn_w) ]
pch_18ud15_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_18ud15_mac" ANNOTATE OD_p pgate_18ud15_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_18ud15_mac"
       drawn_w = DFM_NUM_VAL( pgate_18ud15_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_18ud15_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_18ud15_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25_mac) pgate_25_mac pgate_25_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_25_mac, tpdiff ) + perimeter_inside(pgate_25_mac, tpdiff)) / 2
   L = area(pgate_25_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25_mac" 
pgate_25_mac_in_edge = pgate_25_mac INSIDE EDGE tpdiff
pgate_25_mac_coin_edge = pgate_25_mac COIN EDGE tpdiff
pgate_25_mac_WL = DFM PROPERTY pgate_25_mac pgate_25_mac_in_edge pgate_25_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25_mac_in_edge) + length(pgate_25_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25_mac)/property_ref(drawn_w) ]
pch_25_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25_mac" ANNOTATE OD_p pgate_25_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25_mac"
       drawn_w = DFM_NUM_VAL( pgate_25_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25od33_mac) pgate_25od_mac pgate_25od_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25od33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_25od_mac, tpdiff ) + perimeter_inside(pgate_25od_mac, tpdiff)) / 2
   L = area(pgate_25od_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25od33_mac" 
pgate_25od_mac_in_edge = pgate_25od_mac INSIDE EDGE tpdiff
pgate_25od_mac_coin_edge = pgate_25od_mac COIN EDGE tpdiff
pgate_25od_mac_WL = DFM PROPERTY pgate_25od_mac pgate_25od_mac_in_edge pgate_25od_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25od_mac_in_edge) + length(pgate_25od_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25od_mac)/property_ref(drawn_w) ]
pch_25od33_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25od33_mac" ANNOTATE OD_p pgate_25od_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25od33_mac"
       drawn_w = DFM_NUM_VAL( pgate_25od_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25od_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25od33_mac_ODN_layer
#ENDIF

DEVICE MP(pch_25ud18_mac) pgate_25ud_mac pgate_25ud_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_25ud18_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_25ud_mac, tpdiff ) + perimeter_inside(pgate_25ud_mac, tpdiff)) / 2
   L = area(pgate_25ud_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_25ud18_mac" 
pgate_25ud_mac_in_edge = pgate_25ud_mac INSIDE EDGE tpdiff
pgate_25ud_mac_coin_edge = pgate_25ud_mac COIN EDGE tpdiff
pgate_25ud_mac_WL = DFM PROPERTY pgate_25ud_mac pgate_25ud_mac_in_edge pgate_25ud_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_25ud_mac_in_edge) + length(pgate_25ud_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_25ud_mac)/property_ref(drawn_w) ]
pch_25ud18_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_25ud18_mac" ANNOTATE OD_p pgate_25ud_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_25ud18_mac"
       drawn_w = DFM_NUM_VAL( pgate_25ud_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_25ud_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_25ud18_mac_ODN_layer
#ENDIF

DEVICE MP(pch_33_mac) pgate_33_mac pgate_33_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pIO_WPEPROP> <pgate_PROP> netlist model pch_33_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_33_mac, tpdiff ) + perimeter_inside(pgate_33_mac, tpdiff)) / 2
   L = area(pgate_33_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pIO_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pIO_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pIO_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_alvt_mac) alvtpgate_mac alvtpgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_alvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(alvtpgate_mac, tpdiff ) + perimeter_inside(alvtpgate_mac, tpdiff)) / 2
   L = area(alvtpgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_ehvt_mac) pehvgate_mac pehvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_ehvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pehvgate_mac, tpdiff ) + perimeter_inside(pehvgate_mac, tpdiff)) / 2
   L = area(pehvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_ehvt_mac" 
pehvgate_mac_in_edge = pehvgate_mac INSIDE EDGE tpdiff
pehvgate_mac_coin_edge = pehvgate_mac COIN EDGE tpdiff
pehvgate_mac_WL = DFM PROPERTY pehvgate_mac pehvgate_mac_in_edge pehvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pehvgate_mac_in_edge) + length(pehvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pehvgate_mac)/property_ref(drawn_w) ]
pch_ehvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_ehvt_mac" ANNOTATE OD_p pehvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ehvt_mac"
       drawn_w = DFM_NUM_VAL( pehvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pehvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ehvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_elvt_mac) pelvgate_mac pelvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_elvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pelvgate_mac, tpdiff ) + perimeter_inside(pelvgate_mac, tpdiff)) / 2
   L = area(pelvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_hg_mac) pgate_hg_mac pgate_hg_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_hg_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_hg_mac, tpdiff ) + perimeter_inside(pgate_hg_mac, tpdiff)) / 2
   L = area(pgate_hg_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_hguhvt_mac) puhvgate_hg_mac puhvgate_hg_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_hguhvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(puhvgate_hg_mac, tpdiff ) + perimeter_inside(puhvgate_hg_mac, tpdiff)) / 2
   L = area(puhvgate_hg_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_hvt_mac) phvgate_mac phvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_hvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(phvgate_mac, tpdiff ) + perimeter_inside(phvgate_mac, tpdiff)) / 2
   L = area(phvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_hvt_mac" 
phvgate_mac_in_edge = phvgate_mac INSIDE EDGE tpdiff
phvgate_mac_coin_edge = phvgate_mac COIN EDGE tpdiff
phvgate_mac_WL = DFM PROPERTY phvgate_mac phvgate_mac_in_edge phvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(phvgate_mac_in_edge) + length(phvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(phvgate_mac)/property_ref(drawn_w) ]
pch_hvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_hvt_mac" ANNOTATE OD_p phvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_hvt_mac"
       drawn_w = DFM_NUM_VAL( phvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( phvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_hvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_lvt_mac) plvgate_mac plvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_lvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(plvgate_mac, tpdiff ) + perimeter_inside(plvgate_mac, tpdiff)) / 2
   L = area(plvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_lvt_mac" 
plvgate_mac_in_edge = plvgate_mac INSIDE EDGE tpdiff
plvgate_mac_coin_edge = plvgate_mac COIN EDGE tpdiff
plvgate_mac_WL = DFM PROPERTY plvgate_mac plvgate_mac_in_edge plvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(plvgate_mac_in_edge) + length(plvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(plvgate_mac)/property_ref(drawn_w) ]
pch_lvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_lvt_mac" ANNOTATE OD_p plvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvt_mac"
       drawn_w = DFM_NUM_VAL( plvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( plvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_lvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mac) pgate_mac pgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_mac, tpdiff ) + perimeter_inside(pgate_mac, tpdiff)) / 2
   L = area(pgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_mac" 
pgate_mac_in_edge = pgate_mac INSIDE EDGE tpdiff
pgate_mac_coin_edge = pgate_mac COIN EDGE tpdiff
pgate_mac_WL = DFM PROPERTY pgate_mac pgate_mac_in_edge pgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(pgate_mac_in_edge) + length(pgate_mac_coin_edge))/2 ]
       [ drawn_l = area(pgate_mac)/property_ref(drawn_w) ]
pch_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_mac" ANNOTATE OD_p pgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mac"
       drawn_w = DFM_NUM_VAL( pgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( pgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mlvt_mac) pilvtgate_mac pilvtgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_mlvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pilvtgate_mac, tpdiff ) + perimeter_inside(pilvtgate_mac, tpdiff)) / 2
   L = area(pilvtgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_svt_sp_mac) pgate_svt_sp_mac pgate_svt_sp_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_svt_sp_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_svt_sp_mac, tpdiff ) + perimeter_inside(pgate_svt_sp_mac, tpdiff)) / 2
   L = area(pgate_svt_sp_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]

DEVICE MP(pch_uhvt_mac) puhvgate_mac puhvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_uhvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(puhvgate_mac, tpdiff ) + perimeter_inside(puhvgate_mac, tpdiff)) / 2
   L = area(puhvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_uhvt_mac" 
puhvgate_mac_in_edge = puhvgate_mac INSIDE EDGE tpdiff
puhvgate_mac_coin_edge = puhvgate_mac COIN EDGE tpdiff
puhvgate_mac_WL = DFM PROPERTY puhvgate_mac puhvgate_mac_in_edge puhvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(puhvgate_mac_in_edge) + length(puhvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(puhvgate_mac)/property_ref(drawn_w) ]
pch_uhvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_uhvt_mac" ANNOTATE OD_p puhvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_uhvt_mac"
       drawn_w = DFM_NUM_VAL( puhvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( puhvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_uhvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_ulvt_mac) puvgate_mac puvgate_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD> <lod_PROP> <pCore_WPEPROP> <pgate_PROP> netlist model pch_ulvt_mac netlist element "X" [
   property sa,sb,sca,scb,scc,W,L,AS,AD,PD,PS,NRD,NRS,sa1,sb1,sa2,sb2,sa3,sb3
   #IFNDEF SKIP_PSE
   ,spa,spa1,spa2,spa3,sap,sa4,spba,spba1,sapb,enx,enx1,eny,eny1,eny2,rex,rey
   #ENDIF
   #IFNDEF SKIP_ODSE
   ,sodx,sodx1,sodx2,sa5,sa6,sody,sodx4,sa7,sodxa,sodxb,dw1
   #ENDIF
   #IFNDEF SKIP_MBE
   ,spmt,spomt,spomt1,spmb,spomb,spomb1
   #ENDIF
   LR_EXT = MOS_LR_EXT
   TOP_EXT = PMOS_TOP_EXT
   BOT_EXT = 0
   SCALE = PRESCALE
   W = (perimeter_coincide(puvgate_mac, tpdiff ) + perimeter_inside(puvgate_mac, tpdiff)) / 2
   L = area(puvgate_mac) / W
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   sa = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb = TVF_NUM_FUN( "calc_lod_sasb", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb1 = TVF_NUM_FUN ( "calc_lod_sa1sb1", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb2 = TVF_NUM_FUN ( "calc_lod_sa2sb2", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   sa3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_1, W, L, UNIT_LENGTH(), SCALE )
   sb3 = TVF_NUM_FUN ( "calc_lod_sa3sb3", "device_function", LODX_2, W, L, UNIT_LENGTH(), SCALE )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
// Well proximity.
   WPEX_1 = DFM_VEC_VAL( pCore_WPEPROP, "PER_1" )
   WPEX_2 = DFM_VEC_VAL( pCore_WPEPROP, "PER_2" )
   WPEY_1 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_1" )
   WPEY_2 = DFM_VEC_VAL( pCore_WPEPROP, "PAR_2" )
   sca = TVF_NUM_FUN( "calc_sca_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scb = TVF_NUM_FUN( "calc_scb_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   scc = TVF_NUM_FUN( "calc_scc_dfm", "device_function", WPEX_1, WPEX_2, WPEY_1, WPEY_2, W, L, LR_EXT, TOP_EXT, BOT_EXT, UNIT_LENGTH(), SCALE, WPED )
   #IFNDEF SKIP_PSE
      // Strained silicon
      G2SP_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_1" )
      G2SP_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_P_2" )
      G2SE_1 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_1" )
      G2SE_2 = DFM_VEC_VAL( pgate_PROP, "G2SP_E_2" )
      PER_1  = DFM_VEC_VAL( pgate_PROP, "PER_1" )
      PER_2  = DFM_VEC_VAL( pgate_PROP, "PER_2" )
      PAR_1  = DFM_VEC_VAL( pgate_PROP, "PAR_1" )
      PAR_2  = DFM_VEC_VAL( pgate_PROP, "PAR_2" )
      spa  = TVF_NUM_FUN ( "compute_spa", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa1 = TVF_NUM_FUN ( "compute_spa1", "device_function", G2SP_1, G2SP_2, W, UNIT_LENGTH(), SCALE )
      spa2 = TVF_NUM_FUN ( "compute_spa2", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spa3 = TVF_NUM_FUN ( "compute_spa3", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sap  = TVF_NUM_FUN ( "compute_sap", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sa4  = TVF_NUM_FUN ( "compute_sa4", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba = TVF_NUM_FUN ( "compute_spba", "device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      spba1= TVF_NUM_FUN ( "compute_spba1","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      sapb = TVF_NUM_FUN ( "compute_sapb","device_function", G2SP_1, G2SP_2, W, L, UNIT_LENGTH(), SCALE )
      enx  = TVF_NUM_FUN ( "compute_enx", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      enx1 = TVF_NUM_FUN ( "compute_enx1", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      eny  = TVF_NUM_FUN ( "compute_eny", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny1 = TVF_NUM_FUN ( "compute_eny1", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      eny2 = TVF_NUM_FUN ( "compute_eny2", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
      rex  = TVF_NUM_FUN ( "compute_rex", "device_function", PER_1, PER_2, W, L, UNIT_LENGTH(), SCALE )
      rey  = TVF_NUM_FUN ( "compute_rey", "device_function", PAR_1, PAR_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
      // OD to OD
      G2ODX_1 = DFM_VEC_VAL( pgate_PROP, "LPEPER_1" )
      G2ODX_2 = DFM_VEC_VAL( pgate_PROP, "LPEPER_2" )
      G2ODY_1 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_1" )
      G2ODY_2 = DFM_VEC_VAL( pgate_PROP, "LPEPAR_2" )
      sodxa = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_1, W, L, UNIT_LENGTH(), SCALE )
      sodxb = TVF_NUM_FUN ( "compute_sodxab","parameter_equation", G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx  = TVF_NUM_FUN ( "compute_sodx", "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx1 = TVF_NUM_FUN ( "compute_sodx1","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx2 = TVF_NUM_FUN ( "compute_sodx2","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sodx4 = TVF_NUM_FUN ( "compute_sodx4","parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa5   = TVF_NUM_FUN ( "compute_sa5",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa6   = TVF_NUM_FUN ( "compute_sa6",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sa7   = TVF_NUM_FUN ( "compute_sa7",  "parameter_equation", G2ODX_1, G2ODX_2, W, L, UNIT_LENGTH(), SCALE )
      sody  = TVF_NUM_FUN ( "compute_sody", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
      dw1   = TVF_NUM_FUN ( "compute_dw1", "parameter_equation", G2ODY_1, G2ODY_2, W, L, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_MBE
      // Metal Boundary Effect
      pmet1 = DFM_VEC_VAL( pgate_PROP, "PMET1" )
      pmet2 = DFM_VEC_VAL( pgate_PROP, "PMET2" )
      spmt   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spomt1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet2, L, UNIT_LENGTH(), SCALE )
      spmb   = TVF_NUM_FUN( "compute_spm",   "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb  = TVF_NUM_FUN( "compute_spom",  "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
      spomb1 = TVF_NUM_FUN( "compute_spom1", "mbe_equation", pmet1, L, UNIT_LENGTH(), SCALE )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
TEMPLATE "pch_ulvt_mac" 
puvgate_mac_in_edge = puvgate_mac INSIDE EDGE tpdiff
puvgate_mac_coin_edge = puvgate_mac COIN EDGE tpdiff
puvgate_mac_WL = DFM PROPERTY puvgate_mac puvgate_mac_in_edge puvgate_mac_coin_edge MULTI OVERLAP
       [ drawn_w = (length(puvgate_mac_in_edge) + length(puvgate_mac_coin_edge))/2 ]
       [ drawn_l = area(puvgate_mac)/property_ref(drawn_w) ]
pch_ulvt_mac_ODN_layer = DEVICE LAYER TEMPLATE "pch_ulvt_mac" ANNOTATE OD_p puvgate_mac_WL
       [PROPERTY ODN, pname, drawn_w, drawn_l
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ulvt_mac"
       drawn_w = DFM_NUM_VAL( puvgate_mac_WL, "drawn_w" )
       drawn_l = DFM_NUM_VAL( puvgate_mac_WL, "drawn_l" )
       ]
LVS ANNOTATE DEVICES pch_ulvt_mac_ODN_layer
#ENDIF

DEVICE MP(pchpu_2psr) pgate_s_2psr pgate_s_2psr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_2psr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_s_2psr, tpdiff ) + perimeter_inside(pgate_s_2psr, tpdiff)) / 2
   L = area(pgate_s_2psr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_dpsr) pgate_sdp pgate_sdp(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_dpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_sdp, tpdiff ) + perimeter_inside(pgate_sdp, tpdiff)) / 2
   L = area(pgate_sdp) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_hldpsr) pgate_pu_lpdpsr pgate_pu_lpdpsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_hldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_pu_lpdpsr, tpdiff ) + perimeter_inside(pgate_pu_lpdpsr, tpdiff)) / 2
   L = area(pgate_pu_lpdpsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_hlsr) pgate_pu_lpsr pgate_pu_lpsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_hlsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_pu_lpsr, tpdiff ) + perimeter_inside(pgate_pu_lpsr, tpdiff)) / 2
   L = area(pgate_pu_lpsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_hltsr) pgate_pu_hltsr pgate_pu_hltsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_hltsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_pu_hltsr, tpdiff ) + perimeter_inside(pgate_pu_hltsr, tpdiff)) / 2
   L = area(pgate_pu_hltsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_hvtsr) pgate_hvs pgate_hvs(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_hvtsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_hvs, tpdiff ) + perimeter_inside(pgate_hvs, tpdiff)) / 2
   L = area(pgate_hvs) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_iosr_mac) pgate_sio pgate_sio(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_iosr_mac [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_sio, tpdiff ) + perimeter_inside(pgate_sio, tpdiff)) / 2
   L = area(pgate_sio) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_lldpsr) pgate_pu_lldpsr pgate_pu_lldpsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_lldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_pu_lldpsr, tpdiff ) + perimeter_inside(pgate_pu_lldpsr, tpdiff)) / 2
   L = area(pgate_pu_lldpsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_llsr) pgate_pu_llsr pgate_pu_llsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_llsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_pu_llsr, tpdiff ) + perimeter_inside(pgate_pu_llsr, tpdiff)) / 2
   L = area(pgate_pu_llsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_sr) pgate_s pgate_s(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_sr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_s, tpdiff ) + perimeter_inside(pgate_s, tpdiff)) / 2
   L = area(pgate_s) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_tgosr) pgate_stgo pgate_stgo(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_tgosr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_stgo, tpdiff ) + perimeter_inside(pgate_stgo, tpdiff)) / 2
   L = area(pgate_stgo) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ulldpsr) pgate_pu_ulldpsr pgate_pu_ulldpsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ulldpsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_pu_ulldpsr, tpdiff ) + perimeter_inside(pgate_pu_ulldpsr, tpdiff)) / 2
   L = area(pgate_pu_ulldpsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]

DEVICE MP(pchpu_ullsr) pgate_pu_ullsr pgate_pu_ullsr(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> netlist model pchpu_ullsr [
  property W,L,AS,AD,PD,PS,NRD,NRS
   SCALE = PRESCALE
   W = (perimeter_coincide(pgate_pu_ullsr, tpdiff ) + perimeter_inside(pgate_pu_ullsr, tpdiff)) / 2
   L = area(pgate_pu_ullsr) / W
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
 #IFDEF ZERO_NRS_NRD 
   NRS = 0
   NRD = 0
 #ELSE 
   NRS = AS / W / W
   NRD = AD / W / W
 #ENDIF 
]


#ENDIF
#ELSE

#IFDEF extract_as_ad
DEVICE LDDP(pch_hv18_mac)  pgate_hv18_mac d_tpdiff_hv(D) p_poly(G) s_tpdiff_hv(S) nxwell(B) <pthin2_hv>  <d_hvpw_area> [
  property W,L,AS,AD
  W  = (perimeter_coincide(pgate_hv18_mac, s_tpdiff_hv ) + perimeter_coincide(pgate_hv18_mac, d_tpdiff_hv)) / 2
  L  = area(pgate_hv18_mac) / W
  PI_S_OD = perimeter_inside(S,pthin2_hv)
  PI_D_OD = perimeter_inside(D,pthin2_hv)
  IF(PI_S_OD == 0) {
   AD = area(d_hvpw_area) * W / PI_D_OD
   AS = AD }
  ELSE IF(PI_D_OD == 0) {
   AS = area(S) * W / PI_S_OD
   AD = AS }
  ELSE {
   AS = area(S) * W / PI_S_OD
   AD = area(d_hvpw_area) * W / PI_D_OD }
]
DEVICE LDDP(pch_udm18_mac)  pgate_udm18_mac d_tpdiff_udm(D) p_poly(G) s_tpdiff_udm(S) nxwell(B) <pthin_udm> [
  property W,L,AS,AD
  W  = (perimeter_coincide(pgate_udm18_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm18_mac, d_tpdiff_udm)) / 2
  L  = area(pgate_udm18_mac) / W
  AS = area(S) * W /perimeter_inside(S,pthin_udm)
  AD = area(D) * W /perimeter_inside(D,pthin_udm)
]
DEVICE LDDP(pch_udm18ud15_mac)  pgate_udm18ud15_mac d_tpdiff_udm(D) p_poly(G) s_tpdiff_udm(S) nxwell(B) <pthin_udm> [
  property W,L,AS,AD
  W  = (perimeter_coincide(pgate_udm18ud15_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm18ud15_mac, d_tpdiff_udm)) / 2
  L  = area(pgate_udm18ud15_mac) / W
  AS = area(S) * W /perimeter_inside(S,pthin_udm)
  AD = area(D) * W /perimeter_inside(D,pthin_udm)
]
DEVICE LDDP(pch_udm_mac)  pgate_udm_mac d_tpdiff_udm(D) p_poly(G) s_tpdiff_udm(S) nxwell(B) <pthin_udm> [
  property W,L,AS,AD
  W  = (perimeter_coincide(pgate_udm_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm_mac, d_tpdiff_udm)) / 2
  L  = area(pgate_udm_mac) / W
  AS = area(S) * W /perimeter_inside(S,pthin_udm)
  AD = area(D) * W /perimeter_inside(D,pthin_udm)
]
DEVICE LDDN(nch_hv18_mac)  ngate_hv18_mac d_tndiff_hv(D) n_poly(G) s_tndiff_hv(S) psub(B) <nthin2_hv>  <d_hvnw_area> [
  property W,L,AS,AD
  W  = (perimeter_coincide(ngate_hv18_mac, s_tndiff_hv ) + perimeter_coincide(ngate_hv18_mac, d_tndiff_hv)) / 2
  L  = area(ngate_hv18_mac) / W
  PI_S_OD = perimeter_inside(S,nthin2_hv)
  PI_D_OD = perimeter_inside(D,nthin2_hv)
  IF(PI_S_OD == 0) {
   AD = area(d_hvnw_area) * W / PI_D_OD
   AS = AD }
  ELSE IF(PI_D_OD == 0) {
   AS = area(S) * W / PI_S_OD
   AD = AS }
  ELSE {
   AS = area(S) * W / PI_S_OD
   AD = area(d_hvnw_area) * W / PI_D_OD }
]
DEVICE LDDN(nch_udm18_mac)  ngate_udm18_mac d_tndiff_udm(D) n_poly(G) s_tndiff_udm(S) psub(B) <nthin_udm> [
  property W,L,AS,AD
  W  = (perimeter_coincide(ngate_udm18_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm18_mac, d_tndiff_udm)) / 2
  L  = area(ngate_udm18_mac) / W
  AS = area(S) * W /perimeter_inside(S,nthin_udm)
  AD = area(D) * W /perimeter_inside(D,nthin_udm)
]
DEVICE LDDN(nch_udm18ud15_mac)  ngate_udm18ud15_mac d_tndiff_udm(D) n_poly(G) s_tndiff_udm(S) psub(B) <nthin_udm> [
  property W,L,AS,AD
  W  = (perimeter_coincide(ngate_udm18ud15_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm18ud15_mac, d_tndiff_udm)) / 2
  L  = area(ngate_udm18ud15_mac) / W
  AS = area(S) * W /perimeter_inside(S,nthin_udm)
  AD = area(D) * W /perimeter_inside(D,nthin_udm)
]
DEVICE LDDN(nch_udm_mac)  ngate_udm_mac d_tndiff_udm(D) n_poly(G) s_tndiff_udm(S) psub(B) <nthin_udm> [
  property W,L,AS,AD
  W  = (perimeter_coincide(ngate_udm_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm_mac, d_tndiff_udm)) / 2
  L  = area(ngate_udm_mac) / W
  AS = area(S) * W /perimeter_inside(S,nthin_udm)
  AD = area(D) * W /perimeter_inside(D,nthin_udm)
]
DEVICE MN(nch_15_mac) ngate_15_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_15_mac, tndiff ) + perimeter_inside(ngate_15_mac, tndiff)) / 2
   L=area(ngate_15_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_15od18_mac) ngate_15od18_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_15od18_mac, tndiff ) + perimeter_inside(ngate_15od18_mac, tndiff)) / 2
   L=area(ngate_15od18_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18_mac) ngate_18_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18_mac, tndiff ) + perimeter_inside(ngate_18_mac, tndiff)) / 2
   L=area(ngate_18_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_18ud12_mac) ngate_18ud12_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18ud12_mac, tndiff ) + perimeter_inside(ngate_18ud12_mac, tndiff)) / 2
   L=area(ngate_18ud12_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_18ud15_mac) ngate_18ud15_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18ud15_mac, tndiff ) + perimeter_inside(ngate_18ud15_mac, tndiff)) / 2
   L=area(ngate_18ud15_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25_mac) ngate_25_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25_mac, tndiff ) + perimeter_inside(ngate_25_mac, tndiff)) / 2
   L=area(ngate_25_mac) / W
  PI_S_OD = perimeter_inside(S,nthin)
  PI_D_OD = perimeter_inside(D,nthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin)
  AD = area(D) * W /perimeter_inside(D,nthin)
  }
  ]
DEVICE MN(nch_25od33_mac) ngate_25od_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25od_mac, tndiff ) + perimeter_inside(ngate_25od_mac, tndiff)) / 2
   L=area(ngate_25od_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_25ud18_mac) ngate_25ud_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25ud_mac, tndiff ) + perimeter_inside(ngate_25ud_mac, tndiff)) / 2
   L=area(ngate_25ud_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_33_mac) ngate_33_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_33_mac, tndiff ) + perimeter_inside(ngate_33_mac, tndiff)) / 2
   L=area(ngate_33_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_avt_mac) navtgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(navtgate_mac, tndiff ) + perimeter_inside(navtgate_mac, tndiff)) / 2
   L=area(navtgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_chvt_mac) nchvgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nchvgate_mac, tndiff ) + perimeter_inside(nchvgate_mac, tndiff)) / 2
   L=area(nchvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_edc_mac) ngate_edc_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_edc_mac, tndiff ) + perimeter_inside(ngate_edc_mac, tndiff)) / 2
   L=area(ngate_edc_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_ehvt_mac) nehvgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nehvgate_mac, tndiff ) + perimeter_inside(nehvgate_mac, tndiff)) / 2
   L=area(nehvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_elvt_mac) nelvgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nelvgate_mac, tndiff ) + perimeter_inside(nelvgate_mac, tndiff)) / 2
   L=area(nelvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hg_mac) ngate_hg_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hg_mac, tndiff ) + perimeter_inside(ngate_hg_mac, tndiff)) / 2
   L=area(ngate_hg_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hguhvt_mac) nuhvgate_hg_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nuhvgate_hg_mac, tndiff ) + perimeter_inside(nuhvgate_hg_mac, tndiff)) / 2
   L=area(nuhvgate_hg_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hia15_mac) ngate_hia15_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hia15_mac, tndiff ) + perimeter_inside(ngate_hia15_mac, tndiff)) / 2
   L=area(ngate_hia15_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hia18_mac) ngate_hia18_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hia18_mac, tndiff ) + perimeter_inside(ngate_hia18_mac, tndiff)) / 2
   L=area(ngate_hia18_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hia25_mac) ngate_hia25_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hia25_mac, tndiff ) + perimeter_inside(ngate_hia25_mac, tndiff)) / 2
   L=area(ngate_hia25_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hia_mac) ngate_hia_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hia_mac, tndiff ) + perimeter_inside(ngate_hia_mac, tndiff)) / 2
   L=area(ngate_hia_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hlqrpsr) ngate_lpqrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_lpqrpsr, tndiff ) + perimeter_inside(ngate_lpqrpsr, tndiff)) / 2
   L=area(ngate_lpqrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hlrpsr) ngate_lprpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_lprpsr, tndiff ) + perimeter_inside(ngate_lprpsr, tndiff)) / 2
   L=area(ngate_lprpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hlsvtrpsr) ngate_hlsvtqrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hlsvtqrpsr, tndiff ) + perimeter_inside(ngate_hlsvtqrpsr, tndiff)) / 2
   L=area(ngate_hlsvtqrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hltrpsr) ngate_hltrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hltrpsr, tndiff ) + perimeter_inside(ngate_hltrpsr, tndiff)) / 2
   L=area(ngate_hltrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hvt_mac) nhvgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nhvgate_mac, tndiff ) + perimeter_inside(nhvgate_mac, tndiff)) / 2
   L=area(nhvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hvtllrpsr) ngate_hvtllrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hvtllrpsr, tndiff ) + perimeter_inside(ngate_hvtllrpsr, tndiff)) / 2
   L=area(ngate_hvtllrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_hvtrpsr) ngate_hvtrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hvtrpsr, tndiff ) + perimeter_inside(ngate_hvtrpsr, tndiff)) / 2
   L=area(ngate_hvtrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_io_lvt_mac) ngate_io_lvt_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_io_lvt_mac, tndiff ) + perimeter_inside(ngate_io_lvt_mac, tndiff)) / 2
   L=area(ngate_io_lvt_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_llrpsr) ngate_llrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_llrpsr, tndiff ) + perimeter_inside(ngate_llrpsr, tndiff)) / 2
   L=area(ngate_llrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_lvt18ud12_mac) ngate_lvt18ud12_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_lvt18ud12_mac, tndiff ) + perimeter_inside(ngate_lvt18ud12_mac, tndiff)) / 2
   L=area(ngate_lvt18ud12_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_lvt_mac) nlvgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nlvgate_mac, tndiff ) + perimeter_inside(nlvgate_mac, tndiff)) / 2
   L=area(nlvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_lvtrpsr) ngate_lvtrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_lvtrpsr, tndiff ) + perimeter_inside(ngate_lvtrpsr, tndiff)) / 2
   L=area(ngate_lvtrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_mac) ngate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_mac, tndiff ) + perimeter_inside(ngate_mac, tndiff)) / 2
   L=area(ngate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_mlvt_mac) nilvtgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nilvtgate_mac, tndiff ) + perimeter_inside(nilvtgate_mac, tndiff)) / 2
   L=area(nilvtgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na15_mac) ngate_15na_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_15na_mac, tndiff ) + perimeter_inside(ngate_15na_mac, tndiff)) / 2
   L=area(ngate_15na_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na18_mac) ngate_18na_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18na_mac, tndiff ) + perimeter_inside(ngate_18na_mac, tndiff)) / 2
   L=area(ngate_18na_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na18ud15_mac) ngate_18naud15_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_18naud15_mac, tndiff ) + perimeter_inside(ngate_18naud15_mac, tndiff)) / 2
   L=area(ngate_18naud15_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na25_mac) ngate_25na_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25na_mac, tndiff ) + perimeter_inside(ngate_25na_mac, tndiff)) / 2
   L=area(ngate_25na_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na25od33_mac) ngate_25naod_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25naod_mac, tndiff ) + perimeter_inside(ngate_25naod_mac, tndiff)) / 2
   L=area(ngate_25naod_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na25ud18_mac) ngate_25naud_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_25naud_mac, tndiff ) + perimeter_inside(ngate_25naud_mac, tndiff)) / 2
   L=area(ngate_25naud_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na33_mac) ngate_33na_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_33na_mac, tndiff ) + perimeter_inside(ngate_33na_mac, tndiff)) / 2
   L=area(ngate_33na_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_na_mac) nlgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nlgate_mac, tndiff ) + perimeter_inside(nlgate_mac, tndiff)) / 2
   L=area(nlgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_qrpsr) ngate_qrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_qrpsr, tndiff ) + perimeter_inside(ngate_qrpsr, tndiff)) / 2
   L=area(ngate_qrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_rom) ngate_rom n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_rom, tndiff ) + perimeter_inside(ngate_rom, tndiff)) / 2
   L=area(ngate_rom) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_rpsr) ngate_rpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_rpsr, tndiff ) + perimeter_inside(ngate_rpsr, tndiff)) / 2
   L=area(ngate_rpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_svt_sp_mac) ngate_svt_sp_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_svt_sp_mac, tndiff ) + perimeter_inside(ngate_svt_sp_mac, tndiff)) / 2
   L=area(ngate_svt_sp_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_svtllrpsr) ngate_svtllrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_svtllrpsr, tndiff ) + perimeter_inside(ngate_svtllrpsr, tndiff)) / 2
   L=area(ngate_svtllrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_svtrpsr) ngate_svtrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_svtrpsr, tndiff ) + perimeter_inside(ngate_svtrpsr, tndiff)) / 2
   L=area(ngate_svtrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_uhvt_mac) nuhvgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nuhvgate_mac, tndiff ) + perimeter_inside(nuhvgate_mac, tndiff)) / 2
   L=area(nuhvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_ullrpsr) ngate_ullrpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_ullrpsr, tndiff ) + perimeter_inside(ngate_ullrpsr, tndiff)) / 2
   L=area(ngate_ullrpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_ulvt_mac) nuvgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nuvgate_mac, tndiff ) + perimeter_inside(nuvgate_mac, tndiff)) / 2
   L=area(nuvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nch_zvt_mac) nzvgate_mac n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(nzvgate_mac, tndiff ) + perimeter_inside(nzvgate_mac, tndiff)) / 2
   L=area(nzvgate_mac) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_dpsr) ngate_sdppd n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_sdppd, tndiff ) + perimeter_inside(ngate_sdppd, tndiff)) / 2
   L=area(ngate_sdppd) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_hldpsr) ngate_pd_lpdpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pd_lpdpsr, tndiff ) + perimeter_inside(ngate_pd_lpdpsr, tndiff)) / 2
   L=area(ngate_pd_lpdpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_hlsr) ngate_pd_lpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pd_lpsr, tndiff ) + perimeter_inside(ngate_pd_lpsr, tndiff)) / 2
   L=area(ngate_pd_lpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_hltsr) ngate_pd_hltsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pd_hltsr, tndiff ) + perimeter_inside(ngate_pd_hltsr, tndiff)) / 2
   L=area(ngate_pd_hltsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_hvtsr) ngate_hvspd n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hvspd, tndiff ) + perimeter_inside(ngate_hvspd, tndiff)) / 2
   L=area(ngate_hvspd) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_iosr_mac) ngate_siopd n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_siopd, tndiff ) + perimeter_inside(ngate_siopd, tndiff)) / 2
   L=area(ngate_siopd) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_lldpsr) ngate_pd_lldpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pd_lldpsr, tndiff ) + perimeter_inside(ngate_pd_lldpsr, tndiff)) / 2
   L=area(ngate_pd_lldpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_llsr) ngate_pd_llsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pd_llsr, tndiff ) + perimeter_inside(ngate_pd_llsr, tndiff)) / 2
   L=area(ngate_pd_llsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_sr) ngate_spd n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spd, tndiff ) + perimeter_inside(ngate_spd, tndiff)) / 2
   L=area(ngate_spd) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_tgosr) ngate_stgopd n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_stgopd, tndiff ) + perimeter_inside(ngate_stgopd, tndiff)) / 2
   L=area(ngate_stgopd) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_ulldpsr) ngate_pd_ulldpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pd_ulldpsr, tndiff ) + perimeter_inside(ngate_pd_ulldpsr, tndiff)) / 2
   L=area(ngate_pd_ulldpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpd_ullsr) ngate_pd_ullsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pd_ullsr, tndiff ) + perimeter_inside(ngate_pd_ullsr, tndiff)) / 2
   L=area(ngate_pd_ullsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_dpsr) ngate_sdppg n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_sdppg, tndiff ) + perimeter_inside(ngate_sdppg, tndiff)) / 2
   L=area(ngate_sdppg) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_hldpsr) ngate_pg_lpdpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pg_lpdpsr, tndiff ) + perimeter_inside(ngate_pg_lpdpsr, tndiff)) / 2
   L=area(ngate_pg_lpdpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_hlsr) ngate_pg_lpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pg_lpsr, tndiff ) + perimeter_inside(ngate_pg_lpsr, tndiff)) / 2
   L=area(ngate_pg_lpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_hltsr) ngate_pg_hltsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pg_hltsr, tndiff ) + perimeter_inside(ngate_pg_hltsr, tndiff)) / 2
   L=area(ngate_pg_hltsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_hvtsr) ngate_hvspg n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_hvspg, tndiff ) + perimeter_inside(ngate_hvspg, tndiff)) / 2
   L=area(ngate_hvspg) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_iosr_mac) ngate_siopg n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_siopg, tndiff ) + perimeter_inside(ngate_siopg, tndiff)) / 2
   L=area(ngate_siopg) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_lldpsr) ngate_pg_lldpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pg_lldpsr, tndiff ) + perimeter_inside(ngate_pg_lldpsr, tndiff)) / 2
   L=area(ngate_pg_lldpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_llsr) ngate_pg_llsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pg_llsr, tndiff ) + perimeter_inside(ngate_pg_llsr, tndiff)) / 2
   L=area(ngate_pg_llsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_sr) ngate_spg n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_spg, tndiff ) + perimeter_inside(ngate_spg, tndiff)) / 2
   L=area(ngate_spg) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_tgosr) ngate_stgopg n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_stgopg, tndiff ) + perimeter_inside(ngate_stgopg, tndiff)) / 2
   L=area(ngate_stgopg) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_ulldpsr) ngate_pg_ulldpsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pg_ulldpsr, tndiff ) + perimeter_inside(ngate_pg_ulldpsr, tndiff)) / 2
   L=area(ngate_pg_ulldpsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchpg_ullsr) ngate_pg_ullsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_pg_ullsr, tndiff ) + perimeter_inside(ngate_pg_ullsr, tndiff)) / 2
   L=area(ngate_pg_ullsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MN(nchrpd_sr) ngate_rpdsr n_poly(G) tndiff(S) tndiff(D) psub(B) <nthin1> [
  property W,L,AS,AD
   W=(perimeter_coincide(ngate_rpdsr, tndiff ) + perimeter_inside(ngate_rpdsr, tndiff)) / 2
   L=area(ngate_rpdsr) / W
  PI_S_OD = perimeter_inside(S,nthin1)
  PI_D_OD = perimeter_inside(D,nthin1)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
  }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS  }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,nthin1)
  AD = area(D) * W /perimeter_inside(D,nthin1)
  }
  ]
DEVICE MP(pch_15_mac) pgate_15_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_15_mac, tpdiff ) + perimeter_inside(pgate_15_mac, tpdiff)) / 2 
   L=area(pgate_15_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_15od18_mac) pgate_15od18_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_15od18_mac, tpdiff ) + perimeter_inside(pgate_15od18_mac, tpdiff)) / 2 
   L=area(pgate_15od18_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_18_mac) pgate_18_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_18_mac, tpdiff ) + perimeter_inside(pgate_18_mac, tpdiff)) / 2 
   L=area(pgate_18_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_18ud12_mac) pgate_18ud12_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_18ud12_mac, tpdiff ) + perimeter_inside(pgate_18ud12_mac, tpdiff)) / 2 
   L=area(pgate_18ud12_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_18ud15_mac) pgate_18ud15_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_18ud15_mac, tpdiff ) + perimeter_inside(pgate_18ud15_mac, tpdiff)) / 2 
   L=area(pgate_18ud15_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_25_mac) pgate_25_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_25_mac, tpdiff ) + perimeter_inside(pgate_25_mac, tpdiff)) / 2 
   L=area(pgate_25_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_25od33_mac) pgate_25od_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_25od_mac, tpdiff ) + perimeter_inside(pgate_25od_mac, tpdiff)) / 2 
   L=area(pgate_25od_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_25ud18_mac) pgate_25ud_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_25ud_mac, tpdiff ) + perimeter_inside(pgate_25ud_mac, tpdiff)) / 2 
   L=area(pgate_25ud_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_33_mac) pgate_33_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_33_mac, tpdiff ) + perimeter_inside(pgate_33_mac, tpdiff)) / 2 
   L=area(pgate_33_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_alvt_mac) alvtpgate_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(alvtpgate_mac, tpdiff ) + perimeter_inside(alvtpgate_mac, tpdiff)) / 2 
   L=area(alvtpgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_ehvt_mac) pehvgate_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pehvgate_mac, tpdiff ) + perimeter_inside(pehvgate_mac, tpdiff)) / 2 
   L=area(pehvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_elvt_mac) pelvgate_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pelvgate_mac, tpdiff ) + perimeter_inside(pelvgate_mac, tpdiff)) / 2 
   L=area(pelvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_hg_mac) pgate_hg_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_hg_mac, tpdiff ) + perimeter_inside(pgate_hg_mac, tpdiff)) / 2 
   L=area(pgate_hg_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_hguhvt_mac) puhvgate_hg_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(puhvgate_hg_mac, tpdiff ) + perimeter_inside(puhvgate_hg_mac, tpdiff)) / 2 
   L=area(puhvgate_hg_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_hvt_mac) phvgate_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(phvgate_mac, tpdiff ) + perimeter_inside(phvgate_mac, tpdiff)) / 2 
   L=area(phvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_lvt_mac) plvgate_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(plvgate_mac, tpdiff ) + perimeter_inside(plvgate_mac, tpdiff)) / 2 
   L=area(plvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_mac) pgate_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_mac, tpdiff ) + perimeter_inside(pgate_mac, tpdiff)) / 2 
   L=area(pgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_mlvt_mac) pilvtgate_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pilvtgate_mac, tpdiff ) + perimeter_inside(pilvtgate_mac, tpdiff)) / 2 
   L=area(pilvtgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_svt_sp_mac) pgate_svt_sp_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_svt_sp_mac, tpdiff ) + perimeter_inside(pgate_svt_sp_mac, tpdiff)) / 2 
   L=area(pgate_svt_sp_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_uhvt_mac) puhvgate_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(puhvgate_mac, tpdiff ) + perimeter_inside(puhvgate_mac, tpdiff)) / 2 
   L=area(puhvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pch_ulvt_mac) puvgate_mac p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(puvgate_mac, tpdiff ) + perimeter_inside(puvgate_mac, tpdiff)) / 2 
   L=area(puvgate_mac) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_2psr) pgate_s_2psr p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_s_2psr, tpdiff ) + perimeter_inside(pgate_s_2psr, tpdiff)) / 2 
   L=area(pgate_s_2psr) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_dpsr) pgate_sdp p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_sdp, tpdiff ) + perimeter_inside(pgate_sdp, tpdiff)) / 2 
   L=area(pgate_sdp) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_hldpsr) pgate_pu_lpdpsr p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_pu_lpdpsr, tpdiff ) + perimeter_inside(pgate_pu_lpdpsr, tpdiff)) / 2 
   L=area(pgate_pu_lpdpsr) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_hlsr) pgate_pu_lpsr p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_pu_lpsr, tpdiff ) + perimeter_inside(pgate_pu_lpsr, tpdiff)) / 2 
   L=area(pgate_pu_lpsr) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_hltsr) pgate_pu_hltsr p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_pu_hltsr, tpdiff ) + perimeter_inside(pgate_pu_hltsr, tpdiff)) / 2 
   L=area(pgate_pu_hltsr) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_hvtsr) pgate_hvs p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_hvs, tpdiff ) + perimeter_inside(pgate_hvs, tpdiff)) / 2 
   L=area(pgate_hvs) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_iosr_mac) pgate_sio p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_sio, tpdiff ) + perimeter_inside(pgate_sio, tpdiff)) / 2 
   L=area(pgate_sio) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_lldpsr) pgate_pu_lldpsr p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_pu_lldpsr, tpdiff ) + perimeter_inside(pgate_pu_lldpsr, tpdiff)) / 2 
   L=area(pgate_pu_lldpsr) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_llsr) pgate_pu_llsr p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_pu_llsr, tpdiff ) + perimeter_inside(pgate_pu_llsr, tpdiff)) / 2 
   L=area(pgate_pu_llsr) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_sr) pgate_s p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_s, tpdiff ) + perimeter_inside(pgate_s, tpdiff)) / 2 
   L=area(pgate_s) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_tgosr) pgate_stgo p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_stgo, tpdiff ) + perimeter_inside(pgate_stgo, tpdiff)) / 2 
   L=area(pgate_stgo) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_ulldpsr) pgate_pu_ulldpsr p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_pu_ulldpsr, tpdiff ) + perimeter_inside(pgate_pu_ulldpsr, tpdiff)) / 2 
   L=area(pgate_pu_ulldpsr) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]
DEVICE MP(pchpu_ullsr) pgate_pu_ullsr p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> [
  property W,L,AS,AD
   W=(perimeter_coincide(pgate_pu_ullsr, tpdiff ) + perimeter_inside(pgate_pu_ullsr, tpdiff)) / 2 
   L=area(pgate_pu_ullsr) / W
  PI_S_OD = perimeter_inside(S,pthin)
  PI_D_OD = perimeter_inside(D,pthin)
  IF(PI_S_OD ==0) {
    AD = area(D) * W /PI_D_OD
    AS = AD
    }
  ELSE IF(PI_D_OD==0) {
    AS = area(S) * W /PI_S_OD
    AD = AS
    }
  ELSE {
  AS = area(S) * W /perimeter_inside(S,pthin)
  AD = area(D) * W /perimeter_inside(D,pthin)
  }
  ]


#ELSE


#IFDEF MULTI_FINGER
    MFDMY = COPY LVSDMY2
#ELSE
    MFDMY = LVSDMY2 NOT ( SIZE LVSDMY2 BY 0.005 )
#ENDIF

mdiff_nf = (mdiff AND MFDMY) ENCLOSE gate1  //multi-finger region

gate1_sf = gate1 NOT INSIDE mdiff_nf	 // signle finger gates


//ERC checks for BAD multi-finger devices(GLOBAL)

gate1_mf = gate1 INSIDE mdiff_nf
gate1_w_mf = gate1_mf COINCIDENT EDGE all_sd
gate1_l_mf = gate1_mf NOT COINCIDENT EDGE all_sd
allsd_shared_mf = (all_sd INSIDE mdiff_nf) TOUCH gate1_mf ==2
gate1_sp_mf = allsd_shared_mf NOT COINCIDENT EDGE gate1  //gate spacing


#IFDEF MULTI_FINGER
GROUP MF_CHECK MF_1 MF_2 MF_3a MF_3b MF_3c
ERC SELECT CHECK MF_CHECK
//1. A multi-finger region CUT any gate is not allow
MF_1 {@ A multi-finger region CUT any gate is not allow
     gate1 CUT (mdiff AND LVSDMY2)
}

MF_2 {@ spacing of marker layer to gates must >0
    EXT mdiff_nf gate1 < 0.005 ABUT < 90 SINGULAR
}

// FW/FL/SD must be uniform in the same multi-finger region
MF_3a {@ Finger width in a multi-finger region is not uniform
    DFM PROPERTY mdiff_nf gate1_w_mf OVERLAP ABUT ALSO 
        [ - = MAX(LENGTH(gate1_w_mf)) - MIN(LENGTH(gate1_w_mf)) ] > 1e-8
}
MF_3b {@ Finger length in a multi-finger region is not uniform
    DFM PROPERTY mdiff_nf gate1_l_mf OVERLAP ABUT ALSO 
        [ - = MAX(LENGTH(gate1_l_mf)) - MIN(LENGTH(gate1_l_mf)) ] > 1e-8
}
MF_3c {@ Finger spacing in a multi-finger region is not uniform
    DFM PROPERTY mdiff_nf gate1_sp_mf OVERLAP ABUT ALSO
        [ - = MAX(LENGTH(gate1_sp_mf)) - MIN(LENGTH(gate1_sp_mf)) ] > 1e-8
}
#ENDIF

DEVICE LDDP(pch_hv18_mac)  pgate_hv18_mac d_tpdiff_hv(D) p_poly(G) s_tpdiff_hv(S) nxwell(B) [
  property W,L
  W = (perimeter_coincide(pgate_hv18_mac, s_tpdiff_hv ) + perimeter_coincide(pgate_hv18_mac, d_tpdiff_hv)) / 2
  L = area(pgate_hv18_mac) / W
]
DEVICE LDDP(pch_udm18_mac)  pgate_udm18_mac d_tpdiff_udm(D) p_poly(G) s_tpdiff_udm(S) nxwell(B) [
  property W,L
  W = (perimeter_coincide(pgate_udm18_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm18_mac, d_tpdiff_udm)) / 2
  L = area(pgate_udm18_mac) / W
]
DEVICE LDDP(pch_udm18ud15_mac)  pgate_udm18ud15_mac d_tpdiff_udm(D) p_poly(G) s_tpdiff_udm(S) nxwell(B) [
  property W,L
  W = (perimeter_coincide(pgate_udm18ud15_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm18ud15_mac, d_tpdiff_udm)) / 2
  L = area(pgate_udm18ud15_mac) / W
]
DEVICE LDDP(pch_udm_mac)  pgate_udm_mac d_tpdiff_udm(D) p_poly(G) s_tpdiff_udm(S) nxwell(B) [
  property W,L
  W = (perimeter_coincide(pgate_udm_mac, s_tpdiff_udm ) + perimeter_coincide(pgate_udm_mac, d_tpdiff_udm)) / 2
  L = area(pgate_udm_mac) / W
]
DEVICE LDDN(nch_hv18_mac)  ngate_hv18_mac d_tndiff_hv(D) n_poly(G) s_tndiff_hv(S) psub(B) [
  property W,L
  W = (perimeter_coincide(ngate_hv18_mac, s_tndiff_hv ) + perimeter_coincide(ngate_hv18_mac, d_tndiff_hv)) / 2
  L = area(ngate_hv18_mac) / W
]
DEVICE LDDN(nch_udm18_mac)  ngate_udm18_mac d_tndiff_udm(D) n_poly(G) s_tndiff_udm(S) psub(B) [
  property W,L
  W = (perimeter_coincide(ngate_udm18_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm18_mac, d_tndiff_udm)) / 2
  L = area(ngate_udm18_mac) / W
]
DEVICE LDDN(nch_udm18ud15_mac)  ngate_udm18ud15_mac d_tndiff_udm(D) n_poly(G) s_tndiff_udm(S) psub(B) [
  property W,L
  W = (perimeter_coincide(ngate_udm18ud15_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm18ud15_mac, d_tndiff_udm)) / 2
  L = area(ngate_udm18ud15_mac) / W
]
DEVICE LDDN(nch_udm_mac)  ngate_udm_mac d_tndiff_udm(D) n_poly(G) s_tndiff_udm(S) psub(B) [
  property W,L
  W = (perimeter_coincide(ngate_udm_mac, s_tndiff_udm ) + perimeter_coincide(ngate_udm_mac, d_tndiff_udm)) / 2
  L = area(ngate_udm_mac) / W
]

ngate_15_mac_sf = ngate_15_mac INTERACT gate1_sf
ngate_15_mac_mk = mdiff_nf ENCLOSE ngate_15_mac
ngate_15_mac_mf = ngate_15_mac INSIDE ngate_15_mac_mk
DEVICE MN(nch_15_mac) ngate_15_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_15_mac_mf> [
   property W,L,NF
   NF=count(ngate_15_mac_mf) 
   W=perimeter_coincide(ngate_15_mac_mf, tndiff)/2 
   L=area(ngate_15_mac_mf) / W
]
DEVICE MN(nch_15_mac) ngate_15_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_15_mac_sf, tndiff ) + perimeter_inside(ngate_15_mac_sf, tndiff)) / 2 
   L=area(ngate_15_mac_sf) / W
]

ngate_15od18_mac_sf = ngate_15od18_mac INTERACT gate1_sf
ngate_15od18_mac_mk = mdiff_nf ENCLOSE ngate_15od18_mac
ngate_15od18_mac_mf = ngate_15od18_mac INSIDE ngate_15od18_mac_mk
DEVICE MN(nch_15od18_mac) ngate_15od18_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_15od18_mac_mf> [
   property W,L,NF
   NF=count(ngate_15od18_mac_mf) 
   W=perimeter_coincide(ngate_15od18_mac_mf, tndiff)/2 
   L=area(ngate_15od18_mac_mf) / W
]
DEVICE MN(nch_15od18_mac) ngate_15od18_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_15od18_mac_sf, tndiff ) + perimeter_inside(ngate_15od18_mac_sf, tndiff)) / 2 
   L=area(ngate_15od18_mac_sf) / W
]

ngate_18_mac_sf = ngate_18_mac INTERACT gate1_sf
ngate_18_mac_mk = mdiff_nf ENCLOSE ngate_18_mac
ngate_18_mac_mf = ngate_18_mac INSIDE ngate_18_mac_mk
DEVICE MN(nch_18_mac) ngate_18_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_18_mac_mf> [
   property W,L,NF
   NF=count(ngate_18_mac_mf) 
   W=perimeter_coincide(ngate_18_mac_mf, tndiff)/2 
   L=area(ngate_18_mac_mf) / W
]
DEVICE MN(nch_18_mac) ngate_18_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_18_mac_sf, tndiff ) + perimeter_inside(ngate_18_mac_sf, tndiff)) / 2 
   L=area(ngate_18_mac_sf) / W
]

ngate_18ud12_mac_sf = ngate_18ud12_mac INTERACT gate1_sf
ngate_18ud12_mac_mk = mdiff_nf ENCLOSE ngate_18ud12_mac
ngate_18ud12_mac_mf = ngate_18ud12_mac INSIDE ngate_18ud12_mac_mk
DEVICE MN(nch_18ud12_mac) ngate_18ud12_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_18ud12_mac_mf> [
   property W,L,NF
   NF=count(ngate_18ud12_mac_mf) 
   W=perimeter_coincide(ngate_18ud12_mac_mf, tndiff)/2 
   L=area(ngate_18ud12_mac_mf) / W
]
DEVICE MN(nch_18ud12_mac) ngate_18ud12_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_18ud12_mac_sf, tndiff ) + perimeter_inside(ngate_18ud12_mac_sf, tndiff)) / 2 
   L=area(ngate_18ud12_mac_sf) / W
]

ngate_18ud15_mac_sf = ngate_18ud15_mac INTERACT gate1_sf
ngate_18ud15_mac_mk = mdiff_nf ENCLOSE ngate_18ud15_mac
ngate_18ud15_mac_mf = ngate_18ud15_mac INSIDE ngate_18ud15_mac_mk
DEVICE MN(nch_18ud15_mac) ngate_18ud15_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_18ud15_mac_mf> [
   property W,L,NF
   NF=count(ngate_18ud15_mac_mf) 
   W=perimeter_coincide(ngate_18ud15_mac_mf, tndiff)/2 
   L=area(ngate_18ud15_mac_mf) / W
]
DEVICE MN(nch_18ud15_mac) ngate_18ud15_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_18ud15_mac_sf, tndiff ) + perimeter_inside(ngate_18ud15_mac_sf, tndiff)) / 2 
   L=area(ngate_18ud15_mac_sf) / W
]

ngate_25_mac_sf = ngate_25_mac INTERACT gate1_sf
ngate_25_mac_mk = mdiff_nf ENCLOSE ngate_25_mac
ngate_25_mac_mf = ngate_25_mac INSIDE ngate_25_mac_mk
DEVICE MN(nch_25_mac) ngate_25_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_25_mac_mf> [
   property W,L,NF
   NF=count(ngate_25_mac_mf) 
   W=perimeter_coincide(ngate_25_mac_mf, tndiff)/2 
   L=area(ngate_25_mac_mf) / W
]
DEVICE MN(nch_25_mac) ngate_25_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_25_mac_sf, tndiff ) + perimeter_inside(ngate_25_mac_sf, tndiff)) / 2 
   L=area(ngate_25_mac_sf) / W
]

ngate_25od_mac_sf = ngate_25od_mac INTERACT gate1_sf
ngate_25od_mac_mk = mdiff_nf ENCLOSE ngate_25od_mac
ngate_25od_mac_mf = ngate_25od_mac INSIDE ngate_25od_mac_mk
DEVICE MN(nch_25od33_mac) ngate_25od_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_25od_mac_mf> [
   property W,L,NF
   NF=count(ngate_25od_mac_mf) 
   W=perimeter_coincide(ngate_25od_mac_mf, tndiff)/2 
   L=area(ngate_25od_mac_mf) / W
]
DEVICE MN(nch_25od33_mac) ngate_25od_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_25od_mac_sf, tndiff ) + perimeter_inside(ngate_25od_mac_sf, tndiff)) / 2 
   L=area(ngate_25od_mac_sf) / W
]

ngate_25ud_mac_sf = ngate_25ud_mac INTERACT gate1_sf
ngate_25ud_mac_mk = mdiff_nf ENCLOSE ngate_25ud_mac
ngate_25ud_mac_mf = ngate_25ud_mac INSIDE ngate_25ud_mac_mk
DEVICE MN(nch_25ud18_mac) ngate_25ud_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_25ud_mac_mf> [
   property W,L,NF
   NF=count(ngate_25ud_mac_mf) 
   W=perimeter_coincide(ngate_25ud_mac_mf, tndiff)/2 
   L=area(ngate_25ud_mac_mf) / W
]
DEVICE MN(nch_25ud18_mac) ngate_25ud_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_25ud_mac_sf, tndiff ) + perimeter_inside(ngate_25ud_mac_sf, tndiff)) / 2 
   L=area(ngate_25ud_mac_sf) / W
]

ngate_33_mac_sf = ngate_33_mac INTERACT gate1_sf
ngate_33_mac_mk = mdiff_nf ENCLOSE ngate_33_mac
ngate_33_mac_mf = ngate_33_mac INSIDE ngate_33_mac_mk
DEVICE MN(nch_33_mac) ngate_33_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_33_mac_mf> [
   property W,L,NF
   NF=count(ngate_33_mac_mf) 
   W=perimeter_coincide(ngate_33_mac_mf, tndiff)/2 
   L=area(ngate_33_mac_mf) / W
]
DEVICE MN(nch_33_mac) ngate_33_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_33_mac_sf, tndiff ) + perimeter_inside(ngate_33_mac_sf, tndiff)) / 2 
   L=area(ngate_33_mac_sf) / W
]

navtgate_mac_sf = navtgate_mac INTERACT gate1_sf
navtgate_mac_mk = mdiff_nf ENCLOSE navtgate_mac
navtgate_mac_mf = navtgate_mac INSIDE navtgate_mac_mk
DEVICE MN(nch_avt_mac) navtgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <navtgate_mac_mf> [
   property W,L,NF
   NF=count(navtgate_mac_mf) 
   W=perimeter_coincide(navtgate_mac_mf, tndiff)/2 
   L=area(navtgate_mac_mf) / W
]
DEVICE MN(nch_avt_mac) navtgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(navtgate_mac_sf, tndiff ) + perimeter_inside(navtgate_mac_sf, tndiff)) / 2 
   L=area(navtgate_mac_sf) / W
]

nchvgate_mac_sf = nchvgate_mac INTERACT gate1_sf
nchvgate_mac_mk = mdiff_nf ENCLOSE nchvgate_mac
nchvgate_mac_mf = nchvgate_mac INSIDE nchvgate_mac_mk
DEVICE MN(nch_chvt_mac) nchvgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nchvgate_mac_mf> [
   property W,L,NF
   NF=count(nchvgate_mac_mf) 
   W=perimeter_coincide(nchvgate_mac_mf, tndiff)/2 
   L=area(nchvgate_mac_mf) / W
]
DEVICE MN(nch_chvt_mac) nchvgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nchvgate_mac_sf, tndiff ) + perimeter_inside(nchvgate_mac_sf, tndiff)) / 2 
   L=area(nchvgate_mac_sf) / W
]

ngate_edc_mac_sf = ngate_edc_mac INTERACT gate1_sf
ngate_edc_mac_mk = mdiff_nf ENCLOSE ngate_edc_mac
ngate_edc_mac_mf = ngate_edc_mac INSIDE ngate_edc_mac_mk
DEVICE MN(nch_edc_mac) ngate_edc_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_edc_mac_mf> [
   property W,L,NF
   NF=count(ngate_edc_mac_mf) 
   W=perimeter_coincide(ngate_edc_mac_mf, tndiff)/2 
   L=area(ngate_edc_mac_mf) / W
]
DEVICE MN(nch_edc_mac) ngate_edc_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_edc_mac_sf, tndiff ) + perimeter_inside(ngate_edc_mac_sf, tndiff)) / 2 
   L=area(ngate_edc_mac_sf) / W
]

nehvgate_mac_sf = nehvgate_mac INTERACT gate1_sf
nehvgate_mac_mk = mdiff_nf ENCLOSE nehvgate_mac
nehvgate_mac_mf = nehvgate_mac INSIDE nehvgate_mac_mk
DEVICE MN(nch_ehvt_mac) nehvgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nehvgate_mac_mf> [
   property W,L,NF
   NF=count(nehvgate_mac_mf) 
   W=perimeter_coincide(nehvgate_mac_mf, tndiff)/2 
   L=area(nehvgate_mac_mf) / W
]
DEVICE MN(nch_ehvt_mac) nehvgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nehvgate_mac_sf, tndiff ) + perimeter_inside(nehvgate_mac_sf, tndiff)) / 2 
   L=area(nehvgate_mac_sf) / W
]

nelvgate_mac_sf = nelvgate_mac INTERACT gate1_sf
nelvgate_mac_mk = mdiff_nf ENCLOSE nelvgate_mac
nelvgate_mac_mf = nelvgate_mac INSIDE nelvgate_mac_mk
DEVICE MN(nch_elvt_mac) nelvgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nelvgate_mac_mf> [
   property W,L,NF
   NF=count(nelvgate_mac_mf) 
   W=perimeter_coincide(nelvgate_mac_mf, tndiff)/2 
   L=area(nelvgate_mac_mf) / W
]
DEVICE MN(nch_elvt_mac) nelvgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nelvgate_mac_sf, tndiff ) + perimeter_inside(nelvgate_mac_sf, tndiff)) / 2 
   L=area(nelvgate_mac_sf) / W
]

ngate_hg_mac_sf = ngate_hg_mac INTERACT gate1_sf
ngate_hg_mac_mk = mdiff_nf ENCLOSE ngate_hg_mac
ngate_hg_mac_mf = ngate_hg_mac INSIDE ngate_hg_mac_mk
DEVICE MN(nch_hg_mac) ngate_hg_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hg_mac_mf> [
   property W,L,NF
   NF=count(ngate_hg_mac_mf) 
   W=perimeter_coincide(ngate_hg_mac_mf, tndiff)/2 
   L=area(ngate_hg_mac_mf) / W
]
DEVICE MN(nch_hg_mac) ngate_hg_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hg_mac_sf, tndiff ) + perimeter_inside(ngate_hg_mac_sf, tndiff)) / 2 
   L=area(ngate_hg_mac_sf) / W
]

nuhvgate_hg_mac_sf = nuhvgate_hg_mac INTERACT gate1_sf
nuhvgate_hg_mac_mk = mdiff_nf ENCLOSE nuhvgate_hg_mac
nuhvgate_hg_mac_mf = nuhvgate_hg_mac INSIDE nuhvgate_hg_mac_mk
DEVICE MN(nch_hguhvt_mac) nuhvgate_hg_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nuhvgate_hg_mac_mf> [
   property W,L,NF
   NF=count(nuhvgate_hg_mac_mf) 
   W=perimeter_coincide(nuhvgate_hg_mac_mf, tndiff)/2 
   L=area(nuhvgate_hg_mac_mf) / W
]
DEVICE MN(nch_hguhvt_mac) nuhvgate_hg_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nuhvgate_hg_mac_sf, tndiff ) + perimeter_inside(nuhvgate_hg_mac_sf, tndiff)) / 2 
   L=area(nuhvgate_hg_mac_sf) / W
]

ngate_hia15_mac_sf = ngate_hia15_mac INTERACT gate1_sf
ngate_hia15_mac_mk = mdiff_nf ENCLOSE ngate_hia15_mac
ngate_hia15_mac_mf = ngate_hia15_mac INSIDE ngate_hia15_mac_mk
DEVICE MN(nch_hia15_mac) ngate_hia15_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hia15_mac_mf> [
   property W,L,NF
   NF=count(ngate_hia15_mac_mf) 
   W=perimeter_coincide(ngate_hia15_mac_mf, tndiff)/2 
   L=area(ngate_hia15_mac_mf) / W
]
DEVICE MN(nch_hia15_mac) ngate_hia15_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hia15_mac_sf, tndiff ) + perimeter_inside(ngate_hia15_mac_sf, tndiff)) / 2 
   L=area(ngate_hia15_mac_sf) / W
]

ngate_hia18_mac_sf = ngate_hia18_mac INTERACT gate1_sf
ngate_hia18_mac_mk = mdiff_nf ENCLOSE ngate_hia18_mac
ngate_hia18_mac_mf = ngate_hia18_mac INSIDE ngate_hia18_mac_mk
DEVICE MN(nch_hia18_mac) ngate_hia18_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hia18_mac_mf> [
   property W,L,NF
   NF=count(ngate_hia18_mac_mf) 
   W=perimeter_coincide(ngate_hia18_mac_mf, tndiff)/2 
   L=area(ngate_hia18_mac_mf) / W
]
DEVICE MN(nch_hia18_mac) ngate_hia18_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hia18_mac_sf, tndiff ) + perimeter_inside(ngate_hia18_mac_sf, tndiff)) / 2 
   L=area(ngate_hia18_mac_sf) / W
]

ngate_hia25_mac_sf = ngate_hia25_mac INTERACT gate1_sf
ngate_hia25_mac_mk = mdiff_nf ENCLOSE ngate_hia25_mac
ngate_hia25_mac_mf = ngate_hia25_mac INSIDE ngate_hia25_mac_mk
DEVICE MN(nch_hia25_mac) ngate_hia25_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hia25_mac_mf> [
   property W,L,NF
   NF=count(ngate_hia25_mac_mf) 
   W=perimeter_coincide(ngate_hia25_mac_mf, tndiff)/2 
   L=area(ngate_hia25_mac_mf) / W
]
DEVICE MN(nch_hia25_mac) ngate_hia25_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hia25_mac_sf, tndiff ) + perimeter_inside(ngate_hia25_mac_sf, tndiff)) / 2 
   L=area(ngate_hia25_mac_sf) / W
]

ngate_hia_mac_sf = ngate_hia_mac INTERACT gate1_sf
ngate_hia_mac_mk = mdiff_nf ENCLOSE ngate_hia_mac
ngate_hia_mac_mf = ngate_hia_mac INSIDE ngate_hia_mac_mk
DEVICE MN(nch_hia_mac) ngate_hia_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hia_mac_mf> [
   property W,L,NF
   NF=count(ngate_hia_mac_mf) 
   W=perimeter_coincide(ngate_hia_mac_mf, tndiff)/2 
   L=area(ngate_hia_mac_mf) / W
]
DEVICE MN(nch_hia_mac) ngate_hia_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hia_mac_sf, tndiff ) + perimeter_inside(ngate_hia_mac_sf, tndiff)) / 2 
   L=area(ngate_hia_mac_sf) / W
]

ngate_lpqrpsr_sf = ngate_lpqrpsr INTERACT gate1_sf
ngate_lpqrpsr_mk = mdiff_nf ENCLOSE ngate_lpqrpsr
ngate_lpqrpsr_mf = ngate_lpqrpsr INSIDE ngate_lpqrpsr_mk
DEVICE MN(nch_hlqrpsr) ngate_lpqrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_lpqrpsr_mf> [
   property W,L,NF
   NF=count(ngate_lpqrpsr_mf) 
   W=perimeter_coincide(ngate_lpqrpsr_mf, tndiff)/2 
   L=area(ngate_lpqrpsr_mf) / W
]
DEVICE MN(nch_hlqrpsr) ngate_lpqrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_lpqrpsr_sf, tndiff ) + perimeter_inside(ngate_lpqrpsr_sf, tndiff)) / 2 
   L=area(ngate_lpqrpsr_sf) / W
]

ngate_lprpsr_sf = ngate_lprpsr INTERACT gate1_sf
ngate_lprpsr_mk = mdiff_nf ENCLOSE ngate_lprpsr
ngate_lprpsr_mf = ngate_lprpsr INSIDE ngate_lprpsr_mk
DEVICE MN(nch_hlrpsr) ngate_lprpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_lprpsr_mf> [
   property W,L,NF
   NF=count(ngate_lprpsr_mf) 
   W=perimeter_coincide(ngate_lprpsr_mf, tndiff)/2 
   L=area(ngate_lprpsr_mf) / W
]
DEVICE MN(nch_hlrpsr) ngate_lprpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_lprpsr_sf, tndiff ) + perimeter_inside(ngate_lprpsr_sf, tndiff)) / 2 
   L=area(ngate_lprpsr_sf) / W
]

ngate_hlsvtqrpsr_sf = ngate_hlsvtqrpsr INTERACT gate1_sf
ngate_hlsvtqrpsr_mk = mdiff_nf ENCLOSE ngate_hlsvtqrpsr
ngate_hlsvtqrpsr_mf = ngate_hlsvtqrpsr INSIDE ngate_hlsvtqrpsr_mk
DEVICE MN(nch_hlsvtrpsr) ngate_hlsvtqrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hlsvtqrpsr_mf> [
   property W,L,NF
   NF=count(ngate_hlsvtqrpsr_mf) 
   W=perimeter_coincide(ngate_hlsvtqrpsr_mf, tndiff)/2 
   L=area(ngate_hlsvtqrpsr_mf) / W
]
DEVICE MN(nch_hlsvtrpsr) ngate_hlsvtqrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hlsvtqrpsr_sf, tndiff ) + perimeter_inside(ngate_hlsvtqrpsr_sf, tndiff)) / 2 
   L=area(ngate_hlsvtqrpsr_sf) / W
]

ngate_hltrpsr_sf = ngate_hltrpsr INTERACT gate1_sf
ngate_hltrpsr_mk = mdiff_nf ENCLOSE ngate_hltrpsr
ngate_hltrpsr_mf = ngate_hltrpsr INSIDE ngate_hltrpsr_mk
DEVICE MN(nch_hltrpsr) ngate_hltrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hltrpsr_mf> [
   property W,L,NF
   NF=count(ngate_hltrpsr_mf) 
   W=perimeter_coincide(ngate_hltrpsr_mf, tndiff)/2 
   L=area(ngate_hltrpsr_mf) / W
]
DEVICE MN(nch_hltrpsr) ngate_hltrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hltrpsr_sf, tndiff ) + perimeter_inside(ngate_hltrpsr_sf, tndiff)) / 2 
   L=area(ngate_hltrpsr_sf) / W
]

nhvgate_mac_sf = nhvgate_mac INTERACT gate1_sf
nhvgate_mac_mk = mdiff_nf ENCLOSE nhvgate_mac
nhvgate_mac_mf = nhvgate_mac INSIDE nhvgate_mac_mk
DEVICE MN(nch_hvt_mac) nhvgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nhvgate_mac_mf> [
   property W,L,NF
   NF=count(nhvgate_mac_mf) 
   W=perimeter_coincide(nhvgate_mac_mf, tndiff)/2 
   L=area(nhvgate_mac_mf) / W
]
DEVICE MN(nch_hvt_mac) nhvgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nhvgate_mac_sf, tndiff ) + perimeter_inside(nhvgate_mac_sf, tndiff)) / 2 
   L=area(nhvgate_mac_sf) / W
]

ngate_hvtllrpsr_sf = ngate_hvtllrpsr INTERACT gate1_sf
ngate_hvtllrpsr_mk = mdiff_nf ENCLOSE ngate_hvtllrpsr
ngate_hvtllrpsr_mf = ngate_hvtllrpsr INSIDE ngate_hvtllrpsr_mk
DEVICE MN(nch_hvtllrpsr) ngate_hvtllrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hvtllrpsr_mf> [
   property W,L,NF
   NF=count(ngate_hvtllrpsr_mf) 
   W=perimeter_coincide(ngate_hvtllrpsr_mf, tndiff)/2 
   L=area(ngate_hvtllrpsr_mf) / W
]
DEVICE MN(nch_hvtllrpsr) ngate_hvtllrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hvtllrpsr_sf, tndiff ) + perimeter_inside(ngate_hvtllrpsr_sf, tndiff)) / 2 
   L=area(ngate_hvtllrpsr_sf) / W
]

ngate_hvtrpsr_sf = ngate_hvtrpsr INTERACT gate1_sf
ngate_hvtrpsr_mk = mdiff_nf ENCLOSE ngate_hvtrpsr
ngate_hvtrpsr_mf = ngate_hvtrpsr INSIDE ngate_hvtrpsr_mk
DEVICE MN(nch_hvtrpsr) ngate_hvtrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hvtrpsr_mf> [
   property W,L,NF
   NF=count(ngate_hvtrpsr_mf) 
   W=perimeter_coincide(ngate_hvtrpsr_mf, tndiff)/2 
   L=area(ngate_hvtrpsr_mf) / W
]
DEVICE MN(nch_hvtrpsr) ngate_hvtrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hvtrpsr_sf, tndiff ) + perimeter_inside(ngate_hvtrpsr_sf, tndiff)) / 2 
   L=area(ngate_hvtrpsr_sf) / W
]

ngate_io_lvt_mac_sf = ngate_io_lvt_mac INTERACT gate1_sf
ngate_io_lvt_mac_mk = mdiff_nf ENCLOSE ngate_io_lvt_mac
ngate_io_lvt_mac_mf = ngate_io_lvt_mac INSIDE ngate_io_lvt_mac_mk
DEVICE MN(nch_io_lvt_mac) ngate_io_lvt_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_io_lvt_mac_mf> [
   property W,L,NF
   NF=count(ngate_io_lvt_mac_mf) 
   W=perimeter_coincide(ngate_io_lvt_mac_mf, tndiff)/2 
   L=area(ngate_io_lvt_mac_mf) / W
]
DEVICE MN(nch_io_lvt_mac) ngate_io_lvt_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_io_lvt_mac_sf, tndiff ) + perimeter_inside(ngate_io_lvt_mac_sf, tndiff)) / 2 
   L=area(ngate_io_lvt_mac_sf) / W
]

ngate_llrpsr_sf = ngate_llrpsr INTERACT gate1_sf
ngate_llrpsr_mk = mdiff_nf ENCLOSE ngate_llrpsr
ngate_llrpsr_mf = ngate_llrpsr INSIDE ngate_llrpsr_mk
DEVICE MN(nch_llrpsr) ngate_llrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_llrpsr_mf> [
   property W,L,NF
   NF=count(ngate_llrpsr_mf) 
   W=perimeter_coincide(ngate_llrpsr_mf, tndiff)/2 
   L=area(ngate_llrpsr_mf) / W
]
DEVICE MN(nch_llrpsr) ngate_llrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_llrpsr_sf, tndiff ) + perimeter_inside(ngate_llrpsr_sf, tndiff)) / 2 
   L=area(ngate_llrpsr_sf) / W
]

ngate_lvt18ud12_mac_sf = ngate_lvt18ud12_mac INTERACT gate1_sf
ngate_lvt18ud12_mac_mk = mdiff_nf ENCLOSE ngate_lvt18ud12_mac
ngate_lvt18ud12_mac_mf = ngate_lvt18ud12_mac INSIDE ngate_lvt18ud12_mac_mk
DEVICE MN(nch_lvt18ud12_mac) ngate_lvt18ud12_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_lvt18ud12_mac_mf> [
   property W,L,NF
   NF=count(ngate_lvt18ud12_mac_mf) 
   W=perimeter_coincide(ngate_lvt18ud12_mac_mf, tndiff)/2 
   L=area(ngate_lvt18ud12_mac_mf) / W
]
DEVICE MN(nch_lvt18ud12_mac) ngate_lvt18ud12_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_lvt18ud12_mac_sf, tndiff ) + perimeter_inside(ngate_lvt18ud12_mac_sf, tndiff)) / 2 
   L=area(ngate_lvt18ud12_mac_sf) / W
]

nlvgate_mac_sf = nlvgate_mac INTERACT gate1_sf
nlvgate_mac_mk = mdiff_nf ENCLOSE nlvgate_mac
nlvgate_mac_mf = nlvgate_mac INSIDE nlvgate_mac_mk
DEVICE MN(nch_lvt_mac) nlvgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nlvgate_mac_mf> [
   property W,L,NF
   NF=count(nlvgate_mac_mf) 
   W=perimeter_coincide(nlvgate_mac_mf, tndiff)/2 
   L=area(nlvgate_mac_mf) / W
]
DEVICE MN(nch_lvt_mac) nlvgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nlvgate_mac_sf, tndiff ) + perimeter_inside(nlvgate_mac_sf, tndiff)) / 2 
   L=area(nlvgate_mac_sf) / W
]

ngate_lvtrpsr_sf = ngate_lvtrpsr INTERACT gate1_sf
ngate_lvtrpsr_mk = mdiff_nf ENCLOSE ngate_lvtrpsr
ngate_lvtrpsr_mf = ngate_lvtrpsr INSIDE ngate_lvtrpsr_mk
DEVICE MN(nch_lvtrpsr) ngate_lvtrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_lvtrpsr_mf> [
   property W,L,NF
   NF=count(ngate_lvtrpsr_mf) 
   W=perimeter_coincide(ngate_lvtrpsr_mf, tndiff)/2 
   L=area(ngate_lvtrpsr_mf) / W
]
DEVICE MN(nch_lvtrpsr) ngate_lvtrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_lvtrpsr_sf, tndiff ) + perimeter_inside(ngate_lvtrpsr_sf, tndiff)) / 2 
   L=area(ngate_lvtrpsr_sf) / W
]

ngate_mac_sf = ngate_mac INTERACT gate1_sf
ngate_mac_mk = mdiff_nf ENCLOSE ngate_mac
ngate_mac_mf = ngate_mac INSIDE ngate_mac_mk
DEVICE MN(nch_mac) ngate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_mac_mf> [
   property W,L,NF
   NF=count(ngate_mac_mf) 
   W=perimeter_coincide(ngate_mac_mf, tndiff)/2 
   L=area(ngate_mac_mf) / W
]
DEVICE MN(nch_mac) ngate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_mac_sf, tndiff ) + perimeter_inside(ngate_mac_sf, tndiff)) / 2 
   L=area(ngate_mac_sf) / W
]

nilvtgate_mac_sf = nilvtgate_mac INTERACT gate1_sf
nilvtgate_mac_mk = mdiff_nf ENCLOSE nilvtgate_mac
nilvtgate_mac_mf = nilvtgate_mac INSIDE nilvtgate_mac_mk
DEVICE MN(nch_mlvt_mac) nilvtgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nilvtgate_mac_mf> [
   property W,L,NF
   NF=count(nilvtgate_mac_mf) 
   W=perimeter_coincide(nilvtgate_mac_mf, tndiff)/2 
   L=area(nilvtgate_mac_mf) / W
]
DEVICE MN(nch_mlvt_mac) nilvtgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nilvtgate_mac_sf, tndiff ) + perimeter_inside(nilvtgate_mac_sf, tndiff)) / 2 
   L=area(nilvtgate_mac_sf) / W
]

ngate_15na_mac_sf = ngate_15na_mac INTERACT gate1_sf
ngate_15na_mac_mk = mdiff_nf ENCLOSE ngate_15na_mac
ngate_15na_mac_mf = ngate_15na_mac INSIDE ngate_15na_mac_mk
DEVICE MN(nch_na15_mac) ngate_15na_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_15na_mac_mf> [
   property W,L,NF
   NF=count(ngate_15na_mac_mf) 
   W=perimeter_coincide(ngate_15na_mac_mf, tndiff)/2 
   L=area(ngate_15na_mac_mf) / W
]
DEVICE MN(nch_na15_mac) ngate_15na_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_15na_mac_sf, tndiff ) + perimeter_inside(ngate_15na_mac_sf, tndiff)) / 2 
   L=area(ngate_15na_mac_sf) / W
]

ngate_18na_mac_sf = ngate_18na_mac INTERACT gate1_sf
ngate_18na_mac_mk = mdiff_nf ENCLOSE ngate_18na_mac
ngate_18na_mac_mf = ngate_18na_mac INSIDE ngate_18na_mac_mk
DEVICE MN(nch_na18_mac) ngate_18na_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_18na_mac_mf> [
   property W,L,NF
   NF=count(ngate_18na_mac_mf) 
   W=perimeter_coincide(ngate_18na_mac_mf, tndiff)/2 
   L=area(ngate_18na_mac_mf) / W
]
DEVICE MN(nch_na18_mac) ngate_18na_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_18na_mac_sf, tndiff ) + perimeter_inside(ngate_18na_mac_sf, tndiff)) / 2 
   L=area(ngate_18na_mac_sf) / W
]

ngate_18naud15_mac_sf = ngate_18naud15_mac INTERACT gate1_sf
ngate_18naud15_mac_mk = mdiff_nf ENCLOSE ngate_18naud15_mac
ngate_18naud15_mac_mf = ngate_18naud15_mac INSIDE ngate_18naud15_mac_mk
DEVICE MN(nch_na18ud15_mac) ngate_18naud15_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_18naud15_mac_mf> [
   property W,L,NF
   NF=count(ngate_18naud15_mac_mf) 
   W=perimeter_coincide(ngate_18naud15_mac_mf, tndiff)/2 
   L=area(ngate_18naud15_mac_mf) / W
]
DEVICE MN(nch_na18ud15_mac) ngate_18naud15_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_18naud15_mac_sf, tndiff ) + perimeter_inside(ngate_18naud15_mac_sf, tndiff)) / 2 
   L=area(ngate_18naud15_mac_sf) / W
]

ngate_25na_mac_sf = ngate_25na_mac INTERACT gate1_sf
ngate_25na_mac_mk = mdiff_nf ENCLOSE ngate_25na_mac
ngate_25na_mac_mf = ngate_25na_mac INSIDE ngate_25na_mac_mk
DEVICE MN(nch_na25_mac) ngate_25na_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_25na_mac_mf> [
   property W,L,NF
   NF=count(ngate_25na_mac_mf) 
   W=perimeter_coincide(ngate_25na_mac_mf, tndiff)/2 
   L=area(ngate_25na_mac_mf) / W
]
DEVICE MN(nch_na25_mac) ngate_25na_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_25na_mac_sf, tndiff ) + perimeter_inside(ngate_25na_mac_sf, tndiff)) / 2 
   L=area(ngate_25na_mac_sf) / W
]

ngate_25naod_mac_sf = ngate_25naod_mac INTERACT gate1_sf
ngate_25naod_mac_mk = mdiff_nf ENCLOSE ngate_25naod_mac
ngate_25naod_mac_mf = ngate_25naod_mac INSIDE ngate_25naod_mac_mk
DEVICE MN(nch_na25od33_mac) ngate_25naod_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_25naod_mac_mf> [
   property W,L,NF
   NF=count(ngate_25naod_mac_mf) 
   W=perimeter_coincide(ngate_25naod_mac_mf, tndiff)/2 
   L=area(ngate_25naod_mac_mf) / W
]
DEVICE MN(nch_na25od33_mac) ngate_25naod_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_25naod_mac_sf, tndiff ) + perimeter_inside(ngate_25naod_mac_sf, tndiff)) / 2 
   L=area(ngate_25naod_mac_sf) / W
]

ngate_25naud_mac_sf = ngate_25naud_mac INTERACT gate1_sf
ngate_25naud_mac_mk = mdiff_nf ENCLOSE ngate_25naud_mac
ngate_25naud_mac_mf = ngate_25naud_mac INSIDE ngate_25naud_mac_mk
DEVICE MN(nch_na25ud18_mac) ngate_25naud_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_25naud_mac_mf> [
   property W,L,NF
   NF=count(ngate_25naud_mac_mf) 
   W=perimeter_coincide(ngate_25naud_mac_mf, tndiff)/2 
   L=area(ngate_25naud_mac_mf) / W
]
DEVICE MN(nch_na25ud18_mac) ngate_25naud_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_25naud_mac_sf, tndiff ) + perimeter_inside(ngate_25naud_mac_sf, tndiff)) / 2 
   L=area(ngate_25naud_mac_sf) / W
]

ngate_33na_mac_sf = ngate_33na_mac INTERACT gate1_sf
ngate_33na_mac_mk = mdiff_nf ENCLOSE ngate_33na_mac
ngate_33na_mac_mf = ngate_33na_mac INSIDE ngate_33na_mac_mk
DEVICE MN(nch_na33_mac) ngate_33na_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_33na_mac_mf> [
   property W,L,NF
   NF=count(ngate_33na_mac_mf) 
   W=perimeter_coincide(ngate_33na_mac_mf, tndiff)/2 
   L=area(ngate_33na_mac_mf) / W
]
DEVICE MN(nch_na33_mac) ngate_33na_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_33na_mac_sf, tndiff ) + perimeter_inside(ngate_33na_mac_sf, tndiff)) / 2 
   L=area(ngate_33na_mac_sf) / W
]

nlgate_mac_sf = nlgate_mac INTERACT gate1_sf
nlgate_mac_mk = mdiff_nf ENCLOSE nlgate_mac
nlgate_mac_mf = nlgate_mac INSIDE nlgate_mac_mk
DEVICE MN(nch_na_mac) nlgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nlgate_mac_mf> [
   property W,L,NF
   NF=count(nlgate_mac_mf) 
   W=perimeter_coincide(nlgate_mac_mf, tndiff)/2 
   L=area(nlgate_mac_mf) / W
]
DEVICE MN(nch_na_mac) nlgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nlgate_mac_sf, tndiff ) + perimeter_inside(nlgate_mac_sf, tndiff)) / 2 
   L=area(nlgate_mac_sf) / W
]

ngate_qrpsr_sf = ngate_qrpsr INTERACT gate1_sf
ngate_qrpsr_mk = mdiff_nf ENCLOSE ngate_qrpsr
ngate_qrpsr_mf = ngate_qrpsr INSIDE ngate_qrpsr_mk
DEVICE MN(nch_qrpsr) ngate_qrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_qrpsr_mf> [
   property W,L,NF
   NF=count(ngate_qrpsr_mf) 
   W=perimeter_coincide(ngate_qrpsr_mf, tndiff)/2 
   L=area(ngate_qrpsr_mf) / W
]
DEVICE MN(nch_qrpsr) ngate_qrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_qrpsr_sf, tndiff ) + perimeter_inside(ngate_qrpsr_sf, tndiff)) / 2 
   L=area(ngate_qrpsr_sf) / W
]

ngate_rom_sf = ngate_rom INTERACT gate1_sf
ngate_rom_mk = mdiff_nf ENCLOSE ngate_rom
ngate_rom_mf = ngate_rom INSIDE ngate_rom_mk
DEVICE MN(nch_rom) ngate_rom_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_rom_mf> [
   property W,L,NF
   NF=count(ngate_rom_mf) 
   W=perimeter_coincide(ngate_rom_mf, tndiff)/2 
   L=area(ngate_rom_mf) / W
]
DEVICE MN(nch_rom) ngate_rom_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_rom_sf, tndiff ) + perimeter_inside(ngate_rom_sf, tndiff)) / 2 
   L=area(ngate_rom_sf) / W
]

ngate_rpsr_sf = ngate_rpsr INTERACT gate1_sf
ngate_rpsr_mk = mdiff_nf ENCLOSE ngate_rpsr
ngate_rpsr_mf = ngate_rpsr INSIDE ngate_rpsr_mk
DEVICE MN(nch_rpsr) ngate_rpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_rpsr_mf> [
   property W,L,NF
   NF=count(ngate_rpsr_mf) 
   W=perimeter_coincide(ngate_rpsr_mf, tndiff)/2 
   L=area(ngate_rpsr_mf) / W
]
DEVICE MN(nch_rpsr) ngate_rpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_rpsr_sf, tndiff ) + perimeter_inside(ngate_rpsr_sf, tndiff)) / 2 
   L=area(ngate_rpsr_sf) / W
]

ngate_svt_sp_mac_sf = ngate_svt_sp_mac INTERACT gate1_sf
ngate_svt_sp_mac_mk = mdiff_nf ENCLOSE ngate_svt_sp_mac
ngate_svt_sp_mac_mf = ngate_svt_sp_mac INSIDE ngate_svt_sp_mac_mk
DEVICE MN(nch_svt_sp_mac) ngate_svt_sp_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_svt_sp_mac_mf> [
   property W,L,NF
   NF=count(ngate_svt_sp_mac_mf) 
   W=perimeter_coincide(ngate_svt_sp_mac_mf, tndiff)/2 
   L=area(ngate_svt_sp_mac_mf) / W
]
DEVICE MN(nch_svt_sp_mac) ngate_svt_sp_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_svt_sp_mac_sf, tndiff ) + perimeter_inside(ngate_svt_sp_mac_sf, tndiff)) / 2 
   L=area(ngate_svt_sp_mac_sf) / W
]

ngate_svtllrpsr_sf = ngate_svtllrpsr INTERACT gate1_sf
ngate_svtllrpsr_mk = mdiff_nf ENCLOSE ngate_svtllrpsr
ngate_svtllrpsr_mf = ngate_svtllrpsr INSIDE ngate_svtllrpsr_mk
DEVICE MN(nch_svtllrpsr) ngate_svtllrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_svtllrpsr_mf> [
   property W,L,NF
   NF=count(ngate_svtllrpsr_mf) 
   W=perimeter_coincide(ngate_svtllrpsr_mf, tndiff)/2 
   L=area(ngate_svtllrpsr_mf) / W
]
DEVICE MN(nch_svtllrpsr) ngate_svtllrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_svtllrpsr_sf, tndiff ) + perimeter_inside(ngate_svtllrpsr_sf, tndiff)) / 2 
   L=area(ngate_svtllrpsr_sf) / W
]

ngate_svtrpsr_sf = ngate_svtrpsr INTERACT gate1_sf
ngate_svtrpsr_mk = mdiff_nf ENCLOSE ngate_svtrpsr
ngate_svtrpsr_mf = ngate_svtrpsr INSIDE ngate_svtrpsr_mk
DEVICE MN(nch_svtrpsr) ngate_svtrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_svtrpsr_mf> [
   property W,L,NF
   NF=count(ngate_svtrpsr_mf) 
   W=perimeter_coincide(ngate_svtrpsr_mf, tndiff)/2 
   L=area(ngate_svtrpsr_mf) / W
]
DEVICE MN(nch_svtrpsr) ngate_svtrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_svtrpsr_sf, tndiff ) + perimeter_inside(ngate_svtrpsr_sf, tndiff)) / 2 
   L=area(ngate_svtrpsr_sf) / W
]

nuhvgate_mac_sf = nuhvgate_mac INTERACT gate1_sf
nuhvgate_mac_mk = mdiff_nf ENCLOSE nuhvgate_mac
nuhvgate_mac_mf = nuhvgate_mac INSIDE nuhvgate_mac_mk
DEVICE MN(nch_uhvt_mac) nuhvgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nuhvgate_mac_mf> [
   property W,L,NF
   NF=count(nuhvgate_mac_mf) 
   W=perimeter_coincide(nuhvgate_mac_mf, tndiff)/2 
   L=area(nuhvgate_mac_mf) / W
]
DEVICE MN(nch_uhvt_mac) nuhvgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nuhvgate_mac_sf, tndiff ) + perimeter_inside(nuhvgate_mac_sf, tndiff)) / 2 
   L=area(nuhvgate_mac_sf) / W
]

ngate_ullrpsr_sf = ngate_ullrpsr INTERACT gate1_sf
ngate_ullrpsr_mk = mdiff_nf ENCLOSE ngate_ullrpsr
ngate_ullrpsr_mf = ngate_ullrpsr INSIDE ngate_ullrpsr_mk
DEVICE MN(nch_ullrpsr) ngate_ullrpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_ullrpsr_mf> [
   property W,L,NF
   NF=count(ngate_ullrpsr_mf) 
   W=perimeter_coincide(ngate_ullrpsr_mf, tndiff)/2 
   L=area(ngate_ullrpsr_mf) / W
]
DEVICE MN(nch_ullrpsr) ngate_ullrpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_ullrpsr_sf, tndiff ) + perimeter_inside(ngate_ullrpsr_sf, tndiff)) / 2 
   L=area(ngate_ullrpsr_sf) / W
]

nuvgate_mac_sf = nuvgate_mac INTERACT gate1_sf
nuvgate_mac_mk = mdiff_nf ENCLOSE nuvgate_mac
nuvgate_mac_mf = nuvgate_mac INSIDE nuvgate_mac_mk
DEVICE MN(nch_ulvt_mac) nuvgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nuvgate_mac_mf> [
   property W,L,NF
   NF=count(nuvgate_mac_mf) 
   W=perimeter_coincide(nuvgate_mac_mf, tndiff)/2 
   L=area(nuvgate_mac_mf) / W
]
DEVICE MN(nch_ulvt_mac) nuvgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nuvgate_mac_sf, tndiff ) + perimeter_inside(nuvgate_mac_sf, tndiff)) / 2 
   L=area(nuvgate_mac_sf) / W
]

nzvgate_mac_sf = nzvgate_mac INTERACT gate1_sf
nzvgate_mac_mk = mdiff_nf ENCLOSE nzvgate_mac
nzvgate_mac_mf = nzvgate_mac INSIDE nzvgate_mac_mk
DEVICE MN(nch_zvt_mac) nzvgate_mac_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <nzvgate_mac_mf> [
   property W,L,NF
   NF=count(nzvgate_mac_mf) 
   W=perimeter_coincide(nzvgate_mac_mf, tndiff)/2 
   L=area(nzvgate_mac_mf) / W
]
DEVICE MN(nch_zvt_mac) nzvgate_mac_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(nzvgate_mac_sf, tndiff ) + perimeter_inside(nzvgate_mac_sf, tndiff)) / 2 
   L=area(nzvgate_mac_sf) / W
]

ngate_sdppd_sf = ngate_sdppd INTERACT gate1_sf
ngate_sdppd_mk = mdiff_nf ENCLOSE ngate_sdppd
ngate_sdppd_mf = ngate_sdppd INSIDE ngate_sdppd_mk
DEVICE MN(nchpd_dpsr) ngate_sdppd_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_sdppd_mf> [
   property W,L,NF
   NF=count(ngate_sdppd_mf) 
   W=perimeter_coincide(ngate_sdppd_mf, tndiff)/2 
   L=area(ngate_sdppd_mf) / W
]
DEVICE MN(nchpd_dpsr) ngate_sdppd_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_sdppd_sf, tndiff ) + perimeter_inside(ngate_sdppd_sf, tndiff)) / 2 
   L=area(ngate_sdppd_sf) / W
]

ngate_pd_lpdpsr_sf = ngate_pd_lpdpsr INTERACT gate1_sf
ngate_pd_lpdpsr_mk = mdiff_nf ENCLOSE ngate_pd_lpdpsr
ngate_pd_lpdpsr_mf = ngate_pd_lpdpsr INSIDE ngate_pd_lpdpsr_mk
DEVICE MN(nchpd_hldpsr) ngate_pd_lpdpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pd_lpdpsr_mf> [
   property W,L,NF
   NF=count(ngate_pd_lpdpsr_mf) 
   W=perimeter_coincide(ngate_pd_lpdpsr_mf, tndiff)/2 
   L=area(ngate_pd_lpdpsr_mf) / W
]
DEVICE MN(nchpd_hldpsr) ngate_pd_lpdpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pd_lpdpsr_sf, tndiff ) + perimeter_inside(ngate_pd_lpdpsr_sf, tndiff)) / 2 
   L=area(ngate_pd_lpdpsr_sf) / W
]

ngate_pd_lpsr_sf = ngate_pd_lpsr INTERACT gate1_sf
ngate_pd_lpsr_mk = mdiff_nf ENCLOSE ngate_pd_lpsr
ngate_pd_lpsr_mf = ngate_pd_lpsr INSIDE ngate_pd_lpsr_mk
DEVICE MN(nchpd_hlsr) ngate_pd_lpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pd_lpsr_mf> [
   property W,L,NF
   NF=count(ngate_pd_lpsr_mf) 
   W=perimeter_coincide(ngate_pd_lpsr_mf, tndiff)/2 
   L=area(ngate_pd_lpsr_mf) / W
]
DEVICE MN(nchpd_hlsr) ngate_pd_lpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pd_lpsr_sf, tndiff ) + perimeter_inside(ngate_pd_lpsr_sf, tndiff)) / 2 
   L=area(ngate_pd_lpsr_sf) / W
]

ngate_pd_hltsr_sf = ngate_pd_hltsr INTERACT gate1_sf
ngate_pd_hltsr_mk = mdiff_nf ENCLOSE ngate_pd_hltsr
ngate_pd_hltsr_mf = ngate_pd_hltsr INSIDE ngate_pd_hltsr_mk
DEVICE MN(nchpd_hltsr) ngate_pd_hltsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pd_hltsr_mf> [
   property W,L,NF
   NF=count(ngate_pd_hltsr_mf) 
   W=perimeter_coincide(ngate_pd_hltsr_mf, tndiff)/2 
   L=area(ngate_pd_hltsr_mf) / W
]
DEVICE MN(nchpd_hltsr) ngate_pd_hltsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pd_hltsr_sf, tndiff ) + perimeter_inside(ngate_pd_hltsr_sf, tndiff)) / 2 
   L=area(ngate_pd_hltsr_sf) / W
]

ngate_hvspd_sf = ngate_hvspd INTERACT gate1_sf
ngate_hvspd_mk = mdiff_nf ENCLOSE ngate_hvspd
ngate_hvspd_mf = ngate_hvspd INSIDE ngate_hvspd_mk
DEVICE MN(nchpd_hvtsr) ngate_hvspd_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hvspd_mf> [
   property W,L,NF
   NF=count(ngate_hvspd_mf) 
   W=perimeter_coincide(ngate_hvspd_mf, tndiff)/2 
   L=area(ngate_hvspd_mf) / W
]
DEVICE MN(nchpd_hvtsr) ngate_hvspd_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hvspd_sf, tndiff ) + perimeter_inside(ngate_hvspd_sf, tndiff)) / 2 
   L=area(ngate_hvspd_sf) / W
]

ngate_siopd_sf = ngate_siopd INTERACT gate1_sf
ngate_siopd_mk = mdiff_nf ENCLOSE ngate_siopd
ngate_siopd_mf = ngate_siopd INSIDE ngate_siopd_mk
DEVICE MN(nchpd_iosr_mac) ngate_siopd_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_siopd_mf> [
   property W,L,NF
   NF=count(ngate_siopd_mf) 
   W=perimeter_coincide(ngate_siopd_mf, tndiff)/2 
   L=area(ngate_siopd_mf) / W
]
DEVICE MN(nchpd_iosr_mac) ngate_siopd_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_siopd_sf, tndiff ) + perimeter_inside(ngate_siopd_sf, tndiff)) / 2 
   L=area(ngate_siopd_sf) / W
]

ngate_pd_lldpsr_sf = ngate_pd_lldpsr INTERACT gate1_sf
ngate_pd_lldpsr_mk = mdiff_nf ENCLOSE ngate_pd_lldpsr
ngate_pd_lldpsr_mf = ngate_pd_lldpsr INSIDE ngate_pd_lldpsr_mk
DEVICE MN(nchpd_lldpsr) ngate_pd_lldpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pd_lldpsr_mf> [
   property W,L,NF
   NF=count(ngate_pd_lldpsr_mf) 
   W=perimeter_coincide(ngate_pd_lldpsr_mf, tndiff)/2 
   L=area(ngate_pd_lldpsr_mf) / W
]
DEVICE MN(nchpd_lldpsr) ngate_pd_lldpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pd_lldpsr_sf, tndiff ) + perimeter_inside(ngate_pd_lldpsr_sf, tndiff)) / 2 
   L=area(ngate_pd_lldpsr_sf) / W
]

ngate_pd_llsr_sf = ngate_pd_llsr INTERACT gate1_sf
ngate_pd_llsr_mk = mdiff_nf ENCLOSE ngate_pd_llsr
ngate_pd_llsr_mf = ngate_pd_llsr INSIDE ngate_pd_llsr_mk
DEVICE MN(nchpd_llsr) ngate_pd_llsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pd_llsr_mf> [
   property W,L,NF
   NF=count(ngate_pd_llsr_mf) 
   W=perimeter_coincide(ngate_pd_llsr_mf, tndiff)/2 
   L=area(ngate_pd_llsr_mf) / W
]
DEVICE MN(nchpd_llsr) ngate_pd_llsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pd_llsr_sf, tndiff ) + perimeter_inside(ngate_pd_llsr_sf, tndiff)) / 2 
   L=area(ngate_pd_llsr_sf) / W
]

ngate_spd_sf = ngate_spd INTERACT gate1_sf
ngate_spd_mk = mdiff_nf ENCLOSE ngate_spd
ngate_spd_mf = ngate_spd INSIDE ngate_spd_mk
DEVICE MN(nchpd_sr) ngate_spd_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_spd_mf> [
   property W,L,NF
   NF=count(ngate_spd_mf) 
   W=perimeter_coincide(ngate_spd_mf, tndiff)/2 
   L=area(ngate_spd_mf) / W
]
DEVICE MN(nchpd_sr) ngate_spd_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_spd_sf, tndiff ) + perimeter_inside(ngate_spd_sf, tndiff)) / 2 
   L=area(ngate_spd_sf) / W
]

ngate_stgopd_sf = ngate_stgopd INTERACT gate1_sf
ngate_stgopd_mk = mdiff_nf ENCLOSE ngate_stgopd
ngate_stgopd_mf = ngate_stgopd INSIDE ngate_stgopd_mk
DEVICE MN(nchpd_tgosr) ngate_stgopd_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_stgopd_mf> [
   property W,L,NF
   NF=count(ngate_stgopd_mf) 
   W=perimeter_coincide(ngate_stgopd_mf, tndiff)/2 
   L=area(ngate_stgopd_mf) / W
]
DEVICE MN(nchpd_tgosr) ngate_stgopd_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_stgopd_sf, tndiff ) + perimeter_inside(ngate_stgopd_sf, tndiff)) / 2 
   L=area(ngate_stgopd_sf) / W
]

ngate_pd_ulldpsr_sf = ngate_pd_ulldpsr INTERACT gate1_sf
ngate_pd_ulldpsr_mk = mdiff_nf ENCLOSE ngate_pd_ulldpsr
ngate_pd_ulldpsr_mf = ngate_pd_ulldpsr INSIDE ngate_pd_ulldpsr_mk
DEVICE MN(nchpd_ulldpsr) ngate_pd_ulldpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pd_ulldpsr_mf> [
   property W,L,NF
   NF=count(ngate_pd_ulldpsr_mf) 
   W=perimeter_coincide(ngate_pd_ulldpsr_mf, tndiff)/2 
   L=area(ngate_pd_ulldpsr_mf) / W
]
DEVICE MN(nchpd_ulldpsr) ngate_pd_ulldpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pd_ulldpsr_sf, tndiff ) + perimeter_inside(ngate_pd_ulldpsr_sf, tndiff)) / 2 
   L=area(ngate_pd_ulldpsr_sf) / W
]

ngate_pd_ullsr_sf = ngate_pd_ullsr INTERACT gate1_sf
ngate_pd_ullsr_mk = mdiff_nf ENCLOSE ngate_pd_ullsr
ngate_pd_ullsr_mf = ngate_pd_ullsr INSIDE ngate_pd_ullsr_mk
DEVICE MN(nchpd_ullsr) ngate_pd_ullsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pd_ullsr_mf> [
   property W,L,NF
   NF=count(ngate_pd_ullsr_mf) 
   W=perimeter_coincide(ngate_pd_ullsr_mf, tndiff)/2 
   L=area(ngate_pd_ullsr_mf) / W
]
DEVICE MN(nchpd_ullsr) ngate_pd_ullsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pd_ullsr_sf, tndiff ) + perimeter_inside(ngate_pd_ullsr_sf, tndiff)) / 2 
   L=area(ngate_pd_ullsr_sf) / W
]

ngate_sdppg_sf = ngate_sdppg INTERACT gate1_sf
ngate_sdppg_mk = mdiff_nf ENCLOSE ngate_sdppg
ngate_sdppg_mf = ngate_sdppg INSIDE ngate_sdppg_mk
DEVICE MN(nchpg_dpsr) ngate_sdppg_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_sdppg_mf> [
   property W,L,NF
   NF=count(ngate_sdppg_mf) 
   W=perimeter_coincide(ngate_sdppg_mf, tndiff)/2 
   L=area(ngate_sdppg_mf) / W
]
DEVICE MN(nchpg_dpsr) ngate_sdppg_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_sdppg_sf, tndiff ) + perimeter_inside(ngate_sdppg_sf, tndiff)) / 2 
   L=area(ngate_sdppg_sf) / W
]

ngate_pg_lpdpsr_sf = ngate_pg_lpdpsr INTERACT gate1_sf
ngate_pg_lpdpsr_mk = mdiff_nf ENCLOSE ngate_pg_lpdpsr
ngate_pg_lpdpsr_mf = ngate_pg_lpdpsr INSIDE ngate_pg_lpdpsr_mk
DEVICE MN(nchpg_hldpsr) ngate_pg_lpdpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pg_lpdpsr_mf> [
   property W,L,NF
   NF=count(ngate_pg_lpdpsr_mf) 
   W=perimeter_coincide(ngate_pg_lpdpsr_mf, tndiff)/2 
   L=area(ngate_pg_lpdpsr_mf) / W
]
DEVICE MN(nchpg_hldpsr) ngate_pg_lpdpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pg_lpdpsr_sf, tndiff ) + perimeter_inside(ngate_pg_lpdpsr_sf, tndiff)) / 2 
   L=area(ngate_pg_lpdpsr_sf) / W
]

ngate_pg_lpsr_sf = ngate_pg_lpsr INTERACT gate1_sf
ngate_pg_lpsr_mk = mdiff_nf ENCLOSE ngate_pg_lpsr
ngate_pg_lpsr_mf = ngate_pg_lpsr INSIDE ngate_pg_lpsr_mk
DEVICE MN(nchpg_hlsr) ngate_pg_lpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pg_lpsr_mf> [
   property W,L,NF
   NF=count(ngate_pg_lpsr_mf) 
   W=perimeter_coincide(ngate_pg_lpsr_mf, tndiff)/2 
   L=area(ngate_pg_lpsr_mf) / W
]
DEVICE MN(nchpg_hlsr) ngate_pg_lpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pg_lpsr_sf, tndiff ) + perimeter_inside(ngate_pg_lpsr_sf, tndiff)) / 2 
   L=area(ngate_pg_lpsr_sf) / W
]

ngate_pg_hltsr_sf = ngate_pg_hltsr INTERACT gate1_sf
ngate_pg_hltsr_mk = mdiff_nf ENCLOSE ngate_pg_hltsr
ngate_pg_hltsr_mf = ngate_pg_hltsr INSIDE ngate_pg_hltsr_mk
DEVICE MN(nchpg_hltsr) ngate_pg_hltsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pg_hltsr_mf> [
   property W,L,NF
   NF=count(ngate_pg_hltsr_mf) 
   W=perimeter_coincide(ngate_pg_hltsr_mf, tndiff)/2 
   L=area(ngate_pg_hltsr_mf) / W
]
DEVICE MN(nchpg_hltsr) ngate_pg_hltsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pg_hltsr_sf, tndiff ) + perimeter_inside(ngate_pg_hltsr_sf, tndiff)) / 2 
   L=area(ngate_pg_hltsr_sf) / W
]

ngate_hvspg_sf = ngate_hvspg INTERACT gate1_sf
ngate_hvspg_mk = mdiff_nf ENCLOSE ngate_hvspg
ngate_hvspg_mf = ngate_hvspg INSIDE ngate_hvspg_mk
DEVICE MN(nchpg_hvtsr) ngate_hvspg_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_hvspg_mf> [
   property W,L,NF
   NF=count(ngate_hvspg_mf) 
   W=perimeter_coincide(ngate_hvspg_mf, tndiff)/2 
   L=area(ngate_hvspg_mf) / W
]
DEVICE MN(nchpg_hvtsr) ngate_hvspg_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_hvspg_sf, tndiff ) + perimeter_inside(ngate_hvspg_sf, tndiff)) / 2 
   L=area(ngate_hvspg_sf) / W
]

ngate_siopg_sf = ngate_siopg INTERACT gate1_sf
ngate_siopg_mk = mdiff_nf ENCLOSE ngate_siopg
ngate_siopg_mf = ngate_siopg INSIDE ngate_siopg_mk
DEVICE MN(nchpg_iosr_mac) ngate_siopg_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_siopg_mf> [
   property W,L,NF
   NF=count(ngate_siopg_mf) 
   W=perimeter_coincide(ngate_siopg_mf, tndiff)/2 
   L=area(ngate_siopg_mf) / W
]
DEVICE MN(nchpg_iosr_mac) ngate_siopg_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_siopg_sf, tndiff ) + perimeter_inside(ngate_siopg_sf, tndiff)) / 2 
   L=area(ngate_siopg_sf) / W
]

ngate_pg_lldpsr_sf = ngate_pg_lldpsr INTERACT gate1_sf
ngate_pg_lldpsr_mk = mdiff_nf ENCLOSE ngate_pg_lldpsr
ngate_pg_lldpsr_mf = ngate_pg_lldpsr INSIDE ngate_pg_lldpsr_mk
DEVICE MN(nchpg_lldpsr) ngate_pg_lldpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pg_lldpsr_mf> [
   property W,L,NF
   NF=count(ngate_pg_lldpsr_mf) 
   W=perimeter_coincide(ngate_pg_lldpsr_mf, tndiff)/2 
   L=area(ngate_pg_lldpsr_mf) / W
]
DEVICE MN(nchpg_lldpsr) ngate_pg_lldpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pg_lldpsr_sf, tndiff ) + perimeter_inside(ngate_pg_lldpsr_sf, tndiff)) / 2 
   L=area(ngate_pg_lldpsr_sf) / W
]

ngate_pg_llsr_sf = ngate_pg_llsr INTERACT gate1_sf
ngate_pg_llsr_mk = mdiff_nf ENCLOSE ngate_pg_llsr
ngate_pg_llsr_mf = ngate_pg_llsr INSIDE ngate_pg_llsr_mk
DEVICE MN(nchpg_llsr) ngate_pg_llsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pg_llsr_mf> [
   property W,L,NF
   NF=count(ngate_pg_llsr_mf) 
   W=perimeter_coincide(ngate_pg_llsr_mf, tndiff)/2 
   L=area(ngate_pg_llsr_mf) / W
]
DEVICE MN(nchpg_llsr) ngate_pg_llsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pg_llsr_sf, tndiff ) + perimeter_inside(ngate_pg_llsr_sf, tndiff)) / 2 
   L=area(ngate_pg_llsr_sf) / W
]

ngate_spg_sf = ngate_spg INTERACT gate1_sf
ngate_spg_mk = mdiff_nf ENCLOSE ngate_spg
ngate_spg_mf = ngate_spg INSIDE ngate_spg_mk
DEVICE MN(nchpg_sr) ngate_spg_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_spg_mf> [
   property W,L,NF
   NF=count(ngate_spg_mf) 
   W=perimeter_coincide(ngate_spg_mf, tndiff)/2 
   L=area(ngate_spg_mf) / W
]
DEVICE MN(nchpg_sr) ngate_spg_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_spg_sf, tndiff ) + perimeter_inside(ngate_spg_sf, tndiff)) / 2 
   L=area(ngate_spg_sf) / W
]

ngate_stgopg_sf = ngate_stgopg INTERACT gate1_sf
ngate_stgopg_mk = mdiff_nf ENCLOSE ngate_stgopg
ngate_stgopg_mf = ngate_stgopg INSIDE ngate_stgopg_mk
DEVICE MN(nchpg_tgosr) ngate_stgopg_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_stgopg_mf> [
   property W,L,NF
   NF=count(ngate_stgopg_mf) 
   W=perimeter_coincide(ngate_stgopg_mf, tndiff)/2 
   L=area(ngate_stgopg_mf) / W
]
DEVICE MN(nchpg_tgosr) ngate_stgopg_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_stgopg_sf, tndiff ) + perimeter_inside(ngate_stgopg_sf, tndiff)) / 2 
   L=area(ngate_stgopg_sf) / W
]

ngate_pg_ulldpsr_sf = ngate_pg_ulldpsr INTERACT gate1_sf
ngate_pg_ulldpsr_mk = mdiff_nf ENCLOSE ngate_pg_ulldpsr
ngate_pg_ulldpsr_mf = ngate_pg_ulldpsr INSIDE ngate_pg_ulldpsr_mk
DEVICE MN(nchpg_ulldpsr) ngate_pg_ulldpsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pg_ulldpsr_mf> [
   property W,L,NF
   NF=count(ngate_pg_ulldpsr_mf) 
   W=perimeter_coincide(ngate_pg_ulldpsr_mf, tndiff)/2 
   L=area(ngate_pg_ulldpsr_mf) / W
]
DEVICE MN(nchpg_ulldpsr) ngate_pg_ulldpsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pg_ulldpsr_sf, tndiff ) + perimeter_inside(ngate_pg_ulldpsr_sf, tndiff)) / 2 
   L=area(ngate_pg_ulldpsr_sf) / W
]

ngate_pg_ullsr_sf = ngate_pg_ullsr INTERACT gate1_sf
ngate_pg_ullsr_mk = mdiff_nf ENCLOSE ngate_pg_ullsr
ngate_pg_ullsr_mf = ngate_pg_ullsr INSIDE ngate_pg_ullsr_mk
DEVICE MN(nchpg_ullsr) ngate_pg_ullsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_pg_ullsr_mf> [
   property W,L,NF
   NF=count(ngate_pg_ullsr_mf) 
   W=perimeter_coincide(ngate_pg_ullsr_mf, tndiff)/2 
   L=area(ngate_pg_ullsr_mf) / W
]
DEVICE MN(nchpg_ullsr) ngate_pg_ullsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_pg_ullsr_sf, tndiff ) + perimeter_inside(ngate_pg_ullsr_sf, tndiff)) / 2 
   L=area(ngate_pg_ullsr_sf) / W
]

ngate_rpdsr_sf = ngate_rpdsr INTERACT gate1_sf
ngate_rpdsr_mk = mdiff_nf ENCLOSE ngate_rpdsr
ngate_rpdsr_mf = ngate_rpdsr INSIDE ngate_rpdsr_mk
DEVICE MN(nchrpd_sr) ngate_rpdsr_mk n_poly(G) tndiff(S) tndiff(D) psub(B)  <ngate_rpdsr_mf> [
   property W,L,NF
   NF=count(ngate_rpdsr_mf) 
   W=perimeter_coincide(ngate_rpdsr_mf, tndiff)/2 
   L=area(ngate_rpdsr_mf) / W
]
DEVICE MN(nchrpd_sr) ngate_rpdsr_sf n_poly(G) tndiff(S) tndiff(D) psub(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(ngate_rpdsr_sf, tndiff ) + perimeter_inside(ngate_rpdsr_sf, tndiff)) / 2 
   L=area(ngate_rpdsr_sf) / W
]

pgate_15_mac_sf = pgate_15_mac INTERACT gate1_sf
pgate_15_mac_mk = mdiff_nf ENCLOSE pgate_15_mac
pgate_15_mac_mf = pgate_15_mac INSIDE pgate_15_mac_mk
DEVICE MP(pch_15_mac) pgate_15_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_15_mac_mf> [
   property W,L,NF
   NF=count(pgate_15_mac_mf) 
   W=perimeter_coincide(pgate_15_mac_mf, tpdiff)/2 
   L=area(pgate_15_mac_mf) / W
]
DEVICE MP(pch_15_mac) pgate_15_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_15_mac_sf, tpdiff ) + perimeter_inside(pgate_15_mac_sf, tpdiff)) / 2 
   L=area(pgate_15_mac_sf) / W
]

pgate_15od18_mac_sf = pgate_15od18_mac INTERACT gate1_sf
pgate_15od18_mac_mk = mdiff_nf ENCLOSE pgate_15od18_mac
pgate_15od18_mac_mf = pgate_15od18_mac INSIDE pgate_15od18_mac_mk
DEVICE MP(pch_15od18_mac) pgate_15od18_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_15od18_mac_mf> [
   property W,L,NF
   NF=count(pgate_15od18_mac_mf) 
   W=perimeter_coincide(pgate_15od18_mac_mf, tpdiff)/2 
   L=area(pgate_15od18_mac_mf) / W
]
DEVICE MP(pch_15od18_mac) pgate_15od18_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_15od18_mac_sf, tpdiff ) + perimeter_inside(pgate_15od18_mac_sf, tpdiff)) / 2 
   L=area(pgate_15od18_mac_sf) / W
]

pgate_18_mac_sf = pgate_18_mac INTERACT gate1_sf
pgate_18_mac_mk = mdiff_nf ENCLOSE pgate_18_mac
pgate_18_mac_mf = pgate_18_mac INSIDE pgate_18_mac_mk
DEVICE MP(pch_18_mac) pgate_18_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_18_mac_mf> [
   property W,L,NF
   NF=count(pgate_18_mac_mf) 
   W=perimeter_coincide(pgate_18_mac_mf, tpdiff)/2 
   L=area(pgate_18_mac_mf) / W
]
DEVICE MP(pch_18_mac) pgate_18_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_18_mac_sf, tpdiff ) + perimeter_inside(pgate_18_mac_sf, tpdiff)) / 2 
   L=area(pgate_18_mac_sf) / W
]

pgate_18ud12_mac_sf = pgate_18ud12_mac INTERACT gate1_sf
pgate_18ud12_mac_mk = mdiff_nf ENCLOSE pgate_18ud12_mac
pgate_18ud12_mac_mf = pgate_18ud12_mac INSIDE pgate_18ud12_mac_mk
DEVICE MP(pch_18ud12_mac) pgate_18ud12_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_18ud12_mac_mf> [
   property W,L,NF
   NF=count(pgate_18ud12_mac_mf) 
   W=perimeter_coincide(pgate_18ud12_mac_mf, tpdiff)/2 
   L=area(pgate_18ud12_mac_mf) / W
]
DEVICE MP(pch_18ud12_mac) pgate_18ud12_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_18ud12_mac_sf, tpdiff ) + perimeter_inside(pgate_18ud12_mac_sf, tpdiff)) / 2 
   L=area(pgate_18ud12_mac_sf) / W
]

pgate_18ud15_mac_sf = pgate_18ud15_mac INTERACT gate1_sf
pgate_18ud15_mac_mk = mdiff_nf ENCLOSE pgate_18ud15_mac
pgate_18ud15_mac_mf = pgate_18ud15_mac INSIDE pgate_18ud15_mac_mk
DEVICE MP(pch_18ud15_mac) pgate_18ud15_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_18ud15_mac_mf> [
   property W,L,NF
   NF=count(pgate_18ud15_mac_mf) 
   W=perimeter_coincide(pgate_18ud15_mac_mf, tpdiff)/2 
   L=area(pgate_18ud15_mac_mf) / W
]
DEVICE MP(pch_18ud15_mac) pgate_18ud15_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_18ud15_mac_sf, tpdiff ) + perimeter_inside(pgate_18ud15_mac_sf, tpdiff)) / 2 
   L=area(pgate_18ud15_mac_sf) / W
]

pgate_25_mac_sf = pgate_25_mac INTERACT gate1_sf
pgate_25_mac_mk = mdiff_nf ENCLOSE pgate_25_mac
pgate_25_mac_mf = pgate_25_mac INSIDE pgate_25_mac_mk
DEVICE MP(pch_25_mac) pgate_25_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_25_mac_mf> [
   property W,L,NF
   NF=count(pgate_25_mac_mf) 
   W=perimeter_coincide(pgate_25_mac_mf, tpdiff)/2 
   L=area(pgate_25_mac_mf) / W
]
DEVICE MP(pch_25_mac) pgate_25_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_25_mac_sf, tpdiff ) + perimeter_inside(pgate_25_mac_sf, tpdiff)) / 2 
   L=area(pgate_25_mac_sf) / W
]

pgate_25od_mac_sf = pgate_25od_mac INTERACT gate1_sf
pgate_25od_mac_mk = mdiff_nf ENCLOSE pgate_25od_mac
pgate_25od_mac_mf = pgate_25od_mac INSIDE pgate_25od_mac_mk
DEVICE MP(pch_25od33_mac) pgate_25od_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_25od_mac_mf> [
   property W,L,NF
   NF=count(pgate_25od_mac_mf) 
   W=perimeter_coincide(pgate_25od_mac_mf, tpdiff)/2 
   L=area(pgate_25od_mac_mf) / W
]
DEVICE MP(pch_25od33_mac) pgate_25od_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_25od_mac_sf, tpdiff ) + perimeter_inside(pgate_25od_mac_sf, tpdiff)) / 2 
   L=area(pgate_25od_mac_sf) / W
]

pgate_25ud_mac_sf = pgate_25ud_mac INTERACT gate1_sf
pgate_25ud_mac_mk = mdiff_nf ENCLOSE pgate_25ud_mac
pgate_25ud_mac_mf = pgate_25ud_mac INSIDE pgate_25ud_mac_mk
DEVICE MP(pch_25ud18_mac) pgate_25ud_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_25ud_mac_mf> [
   property W,L,NF
   NF=count(pgate_25ud_mac_mf) 
   W=perimeter_coincide(pgate_25ud_mac_mf, tpdiff)/2 
   L=area(pgate_25ud_mac_mf) / W
]
DEVICE MP(pch_25ud18_mac) pgate_25ud_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_25ud_mac_sf, tpdiff ) + perimeter_inside(pgate_25ud_mac_sf, tpdiff)) / 2 
   L=area(pgate_25ud_mac_sf) / W
]

pgate_33_mac_sf = pgate_33_mac INTERACT gate1_sf
pgate_33_mac_mk = mdiff_nf ENCLOSE pgate_33_mac
pgate_33_mac_mf = pgate_33_mac INSIDE pgate_33_mac_mk
DEVICE MP(pch_33_mac) pgate_33_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_33_mac_mf> [
   property W,L,NF
   NF=count(pgate_33_mac_mf) 
   W=perimeter_coincide(pgate_33_mac_mf, tpdiff)/2 
   L=area(pgate_33_mac_mf) / W
]
DEVICE MP(pch_33_mac) pgate_33_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_33_mac_sf, tpdiff ) + perimeter_inside(pgate_33_mac_sf, tpdiff)) / 2 
   L=area(pgate_33_mac_sf) / W
]

alvtpgate_mac_sf = alvtpgate_mac INTERACT gate1_sf
alvtpgate_mac_mk = mdiff_nf ENCLOSE alvtpgate_mac
alvtpgate_mac_mf = alvtpgate_mac INSIDE alvtpgate_mac_mk
DEVICE MP(pch_alvt_mac) alvtpgate_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <alvtpgate_mac_mf> [
   property W,L,NF
   NF=count(alvtpgate_mac_mf) 
   W=perimeter_coincide(alvtpgate_mac_mf, tpdiff)/2 
   L=area(alvtpgate_mac_mf) / W
]
DEVICE MP(pch_alvt_mac) alvtpgate_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(alvtpgate_mac_sf, tpdiff ) + perimeter_inside(alvtpgate_mac_sf, tpdiff)) / 2 
   L=area(alvtpgate_mac_sf) / W
]

pehvgate_mac_sf = pehvgate_mac INTERACT gate1_sf
pehvgate_mac_mk = mdiff_nf ENCLOSE pehvgate_mac
pehvgate_mac_mf = pehvgate_mac INSIDE pehvgate_mac_mk
DEVICE MP(pch_ehvt_mac) pehvgate_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pehvgate_mac_mf> [
   property W,L,NF
   NF=count(pehvgate_mac_mf) 
   W=perimeter_coincide(pehvgate_mac_mf, tpdiff)/2 
   L=area(pehvgate_mac_mf) / W
]
DEVICE MP(pch_ehvt_mac) pehvgate_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pehvgate_mac_sf, tpdiff ) + perimeter_inside(pehvgate_mac_sf, tpdiff)) / 2 
   L=area(pehvgate_mac_sf) / W
]

pelvgate_mac_sf = pelvgate_mac INTERACT gate1_sf
pelvgate_mac_mk = mdiff_nf ENCLOSE pelvgate_mac
pelvgate_mac_mf = pelvgate_mac INSIDE pelvgate_mac_mk
DEVICE MP(pch_elvt_mac) pelvgate_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pelvgate_mac_mf> [
   property W,L,NF
   NF=count(pelvgate_mac_mf) 
   W=perimeter_coincide(pelvgate_mac_mf, tpdiff)/2 
   L=area(pelvgate_mac_mf) / W
]
DEVICE MP(pch_elvt_mac) pelvgate_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pelvgate_mac_sf, tpdiff ) + perimeter_inside(pelvgate_mac_sf, tpdiff)) / 2 
   L=area(pelvgate_mac_sf) / W
]

pgate_hg_mac_sf = pgate_hg_mac INTERACT gate1_sf
pgate_hg_mac_mk = mdiff_nf ENCLOSE pgate_hg_mac
pgate_hg_mac_mf = pgate_hg_mac INSIDE pgate_hg_mac_mk
DEVICE MP(pch_hg_mac) pgate_hg_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_hg_mac_mf> [
   property W,L,NF
   NF=count(pgate_hg_mac_mf) 
   W=perimeter_coincide(pgate_hg_mac_mf, tpdiff)/2 
   L=area(pgate_hg_mac_mf) / W
]
DEVICE MP(pch_hg_mac) pgate_hg_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_hg_mac_sf, tpdiff ) + perimeter_inside(pgate_hg_mac_sf, tpdiff)) / 2 
   L=area(pgate_hg_mac_sf) / W
]

puhvgate_hg_mac_sf = puhvgate_hg_mac INTERACT gate1_sf
puhvgate_hg_mac_mk = mdiff_nf ENCLOSE puhvgate_hg_mac
puhvgate_hg_mac_mf = puhvgate_hg_mac INSIDE puhvgate_hg_mac_mk
DEVICE MP(pch_hguhvt_mac) puhvgate_hg_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <puhvgate_hg_mac_mf> [
   property W,L,NF
   NF=count(puhvgate_hg_mac_mf) 
   W=perimeter_coincide(puhvgate_hg_mac_mf, tpdiff)/2 
   L=area(puhvgate_hg_mac_mf) / W
]
DEVICE MP(pch_hguhvt_mac) puhvgate_hg_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(puhvgate_hg_mac_sf, tpdiff ) + perimeter_inside(puhvgate_hg_mac_sf, tpdiff)) / 2 
   L=area(puhvgate_hg_mac_sf) / W
]

phvgate_mac_sf = phvgate_mac INTERACT gate1_sf
phvgate_mac_mk = mdiff_nf ENCLOSE phvgate_mac
phvgate_mac_mf = phvgate_mac INSIDE phvgate_mac_mk
DEVICE MP(pch_hvt_mac) phvgate_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <phvgate_mac_mf> [
   property W,L,NF
   NF=count(phvgate_mac_mf) 
   W=perimeter_coincide(phvgate_mac_mf, tpdiff)/2 
   L=area(phvgate_mac_mf) / W
]
DEVICE MP(pch_hvt_mac) phvgate_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(phvgate_mac_sf, tpdiff ) + perimeter_inside(phvgate_mac_sf, tpdiff)) / 2 
   L=area(phvgate_mac_sf) / W
]

plvgate_mac_sf = plvgate_mac INTERACT gate1_sf
plvgate_mac_mk = mdiff_nf ENCLOSE plvgate_mac
plvgate_mac_mf = plvgate_mac INSIDE plvgate_mac_mk
DEVICE MP(pch_lvt_mac) plvgate_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <plvgate_mac_mf> [
   property W,L,NF
   NF=count(plvgate_mac_mf) 
   W=perimeter_coincide(plvgate_mac_mf, tpdiff)/2 
   L=area(plvgate_mac_mf) / W
]
DEVICE MP(pch_lvt_mac) plvgate_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(plvgate_mac_sf, tpdiff ) + perimeter_inside(plvgate_mac_sf, tpdiff)) / 2 
   L=area(plvgate_mac_sf) / W
]

pgate_mac_sf = pgate_mac INTERACT gate1_sf
pgate_mac_mk = mdiff_nf ENCLOSE pgate_mac
pgate_mac_mf = pgate_mac INSIDE pgate_mac_mk
DEVICE MP(pch_mac) pgate_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_mac_mf> [
   property W,L,NF
   NF=count(pgate_mac_mf) 
   W=perimeter_coincide(pgate_mac_mf, tpdiff)/2 
   L=area(pgate_mac_mf) / W
]
DEVICE MP(pch_mac) pgate_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_mac_sf, tpdiff ) + perimeter_inside(pgate_mac_sf, tpdiff)) / 2 
   L=area(pgate_mac_sf) / W
]

pilvtgate_mac_sf = pilvtgate_mac INTERACT gate1_sf
pilvtgate_mac_mk = mdiff_nf ENCLOSE pilvtgate_mac
pilvtgate_mac_mf = pilvtgate_mac INSIDE pilvtgate_mac_mk
DEVICE MP(pch_mlvt_mac) pilvtgate_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pilvtgate_mac_mf> [
   property W,L,NF
   NF=count(pilvtgate_mac_mf) 
   W=perimeter_coincide(pilvtgate_mac_mf, tpdiff)/2 
   L=area(pilvtgate_mac_mf) / W
]
DEVICE MP(pch_mlvt_mac) pilvtgate_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pilvtgate_mac_sf, tpdiff ) + perimeter_inside(pilvtgate_mac_sf, tpdiff)) / 2 
   L=area(pilvtgate_mac_sf) / W
]

pgate_svt_sp_mac_sf = pgate_svt_sp_mac INTERACT gate1_sf
pgate_svt_sp_mac_mk = mdiff_nf ENCLOSE pgate_svt_sp_mac
pgate_svt_sp_mac_mf = pgate_svt_sp_mac INSIDE pgate_svt_sp_mac_mk
DEVICE MP(pch_svt_sp_mac) pgate_svt_sp_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_svt_sp_mac_mf> [
   property W,L,NF
   NF=count(pgate_svt_sp_mac_mf) 
   W=perimeter_coincide(pgate_svt_sp_mac_mf, tpdiff)/2 
   L=area(pgate_svt_sp_mac_mf) / W
]
DEVICE MP(pch_svt_sp_mac) pgate_svt_sp_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_svt_sp_mac_sf, tpdiff ) + perimeter_inside(pgate_svt_sp_mac_sf, tpdiff)) / 2 
   L=area(pgate_svt_sp_mac_sf) / W
]

puhvgate_mac_sf = puhvgate_mac INTERACT gate1_sf
puhvgate_mac_mk = mdiff_nf ENCLOSE puhvgate_mac
puhvgate_mac_mf = puhvgate_mac INSIDE puhvgate_mac_mk
DEVICE MP(pch_uhvt_mac) puhvgate_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <puhvgate_mac_mf> [
   property W,L,NF
   NF=count(puhvgate_mac_mf) 
   W=perimeter_coincide(puhvgate_mac_mf, tpdiff)/2 
   L=area(puhvgate_mac_mf) / W
]
DEVICE MP(pch_uhvt_mac) puhvgate_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(puhvgate_mac_sf, tpdiff ) + perimeter_inside(puhvgate_mac_sf, tpdiff)) / 2 
   L=area(puhvgate_mac_sf) / W
]

puvgate_mac_sf = puvgate_mac INTERACT gate1_sf
puvgate_mac_mk = mdiff_nf ENCLOSE puvgate_mac
puvgate_mac_mf = puvgate_mac INSIDE puvgate_mac_mk
DEVICE MP(pch_ulvt_mac) puvgate_mac_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <puvgate_mac_mf> [
   property W,L,NF
   NF=count(puvgate_mac_mf) 
   W=perimeter_coincide(puvgate_mac_mf, tpdiff)/2 
   L=area(puvgate_mac_mf) / W
]
DEVICE MP(pch_ulvt_mac) puvgate_mac_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(puvgate_mac_sf, tpdiff ) + perimeter_inside(puvgate_mac_sf, tpdiff)) / 2 
   L=area(puvgate_mac_sf) / W
]

pgate_s_2psr_sf = pgate_s_2psr INTERACT gate1_sf
pgate_s_2psr_mk = mdiff_nf ENCLOSE pgate_s_2psr
pgate_s_2psr_mf = pgate_s_2psr INSIDE pgate_s_2psr_mk
DEVICE MP(pchpu_2psr) pgate_s_2psr_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_s_2psr_mf> [
   property W,L,NF
   NF=count(pgate_s_2psr_mf) 
   W=perimeter_coincide(pgate_s_2psr_mf, tpdiff)/2 
   L=area(pgate_s_2psr_mf) / W
]
DEVICE MP(pchpu_2psr) pgate_s_2psr_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_s_2psr_sf, tpdiff ) + perimeter_inside(pgate_s_2psr_sf, tpdiff)) / 2 
   L=area(pgate_s_2psr_sf) / W
]

pgate_sdp_sf = pgate_sdp INTERACT gate1_sf
pgate_sdp_mk = mdiff_nf ENCLOSE pgate_sdp
pgate_sdp_mf = pgate_sdp INSIDE pgate_sdp_mk
DEVICE MP(pchpu_dpsr) pgate_sdp_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_sdp_mf> [
   property W,L,NF
   NF=count(pgate_sdp_mf) 
   W=perimeter_coincide(pgate_sdp_mf, tpdiff)/2 
   L=area(pgate_sdp_mf) / W
]
DEVICE MP(pchpu_dpsr) pgate_sdp_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_sdp_sf, tpdiff ) + perimeter_inside(pgate_sdp_sf, tpdiff)) / 2 
   L=area(pgate_sdp_sf) / W
]

pgate_pu_lpdpsr_sf = pgate_pu_lpdpsr INTERACT gate1_sf
pgate_pu_lpdpsr_mk = mdiff_nf ENCLOSE pgate_pu_lpdpsr
pgate_pu_lpdpsr_mf = pgate_pu_lpdpsr INSIDE pgate_pu_lpdpsr_mk
DEVICE MP(pchpu_hldpsr) pgate_pu_lpdpsr_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_pu_lpdpsr_mf> [
   property W,L,NF
   NF=count(pgate_pu_lpdpsr_mf) 
   W=perimeter_coincide(pgate_pu_lpdpsr_mf, tpdiff)/2 
   L=area(pgate_pu_lpdpsr_mf) / W
]
DEVICE MP(pchpu_hldpsr) pgate_pu_lpdpsr_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_pu_lpdpsr_sf, tpdiff ) + perimeter_inside(pgate_pu_lpdpsr_sf, tpdiff)) / 2 
   L=area(pgate_pu_lpdpsr_sf) / W
]

pgate_pu_lpsr_sf = pgate_pu_lpsr INTERACT gate1_sf
pgate_pu_lpsr_mk = mdiff_nf ENCLOSE pgate_pu_lpsr
pgate_pu_lpsr_mf = pgate_pu_lpsr INSIDE pgate_pu_lpsr_mk
DEVICE MP(pchpu_hlsr) pgate_pu_lpsr_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_pu_lpsr_mf> [
   property W,L,NF
   NF=count(pgate_pu_lpsr_mf) 
   W=perimeter_coincide(pgate_pu_lpsr_mf, tpdiff)/2 
   L=area(pgate_pu_lpsr_mf) / W
]
DEVICE MP(pchpu_hlsr) pgate_pu_lpsr_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_pu_lpsr_sf, tpdiff ) + perimeter_inside(pgate_pu_lpsr_sf, tpdiff)) / 2 
   L=area(pgate_pu_lpsr_sf) / W
]

pgate_pu_hltsr_sf = pgate_pu_hltsr INTERACT gate1_sf
pgate_pu_hltsr_mk = mdiff_nf ENCLOSE pgate_pu_hltsr
pgate_pu_hltsr_mf = pgate_pu_hltsr INSIDE pgate_pu_hltsr_mk
DEVICE MP(pchpu_hltsr) pgate_pu_hltsr_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_pu_hltsr_mf> [
   property W,L,NF
   NF=count(pgate_pu_hltsr_mf) 
   W=perimeter_coincide(pgate_pu_hltsr_mf, tpdiff)/2 
   L=area(pgate_pu_hltsr_mf) / W
]
DEVICE MP(pchpu_hltsr) pgate_pu_hltsr_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_pu_hltsr_sf, tpdiff ) + perimeter_inside(pgate_pu_hltsr_sf, tpdiff)) / 2 
   L=area(pgate_pu_hltsr_sf) / W
]

pgate_hvs_sf = pgate_hvs INTERACT gate1_sf
pgate_hvs_mk = mdiff_nf ENCLOSE pgate_hvs
pgate_hvs_mf = pgate_hvs INSIDE pgate_hvs_mk
DEVICE MP(pchpu_hvtsr) pgate_hvs_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_hvs_mf> [
   property W,L,NF
   NF=count(pgate_hvs_mf) 
   W=perimeter_coincide(pgate_hvs_mf, tpdiff)/2 
   L=area(pgate_hvs_mf) / W
]
DEVICE MP(pchpu_hvtsr) pgate_hvs_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_hvs_sf, tpdiff ) + perimeter_inside(pgate_hvs_sf, tpdiff)) / 2 
   L=area(pgate_hvs_sf) / W
]

pgate_sio_sf = pgate_sio INTERACT gate1_sf
pgate_sio_mk = mdiff_nf ENCLOSE pgate_sio
pgate_sio_mf = pgate_sio INSIDE pgate_sio_mk
DEVICE MP(pchpu_iosr_mac) pgate_sio_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_sio_mf> [
   property W,L,NF
   NF=count(pgate_sio_mf) 
   W=perimeter_coincide(pgate_sio_mf, tpdiff)/2 
   L=area(pgate_sio_mf) / W
]
DEVICE MP(pchpu_iosr_mac) pgate_sio_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_sio_sf, tpdiff ) + perimeter_inside(pgate_sio_sf, tpdiff)) / 2 
   L=area(pgate_sio_sf) / W
]

pgate_pu_lldpsr_sf = pgate_pu_lldpsr INTERACT gate1_sf
pgate_pu_lldpsr_mk = mdiff_nf ENCLOSE pgate_pu_lldpsr
pgate_pu_lldpsr_mf = pgate_pu_lldpsr INSIDE pgate_pu_lldpsr_mk
DEVICE MP(pchpu_lldpsr) pgate_pu_lldpsr_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_pu_lldpsr_mf> [
   property W,L,NF
   NF=count(pgate_pu_lldpsr_mf) 
   W=perimeter_coincide(pgate_pu_lldpsr_mf, tpdiff)/2 
   L=area(pgate_pu_lldpsr_mf) / W
]
DEVICE MP(pchpu_lldpsr) pgate_pu_lldpsr_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_pu_lldpsr_sf, tpdiff ) + perimeter_inside(pgate_pu_lldpsr_sf, tpdiff)) / 2 
   L=area(pgate_pu_lldpsr_sf) / W
]

pgate_pu_llsr_sf = pgate_pu_llsr INTERACT gate1_sf
pgate_pu_llsr_mk = mdiff_nf ENCLOSE pgate_pu_llsr
pgate_pu_llsr_mf = pgate_pu_llsr INSIDE pgate_pu_llsr_mk
DEVICE MP(pchpu_llsr) pgate_pu_llsr_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_pu_llsr_mf> [
   property W,L,NF
   NF=count(pgate_pu_llsr_mf) 
   W=perimeter_coincide(pgate_pu_llsr_mf, tpdiff)/2 
   L=area(pgate_pu_llsr_mf) / W
]
DEVICE MP(pchpu_llsr) pgate_pu_llsr_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_pu_llsr_sf, tpdiff ) + perimeter_inside(pgate_pu_llsr_sf, tpdiff)) / 2 
   L=area(pgate_pu_llsr_sf) / W
]

pgate_s_sf = pgate_s INTERACT gate1_sf
pgate_s_mk = mdiff_nf ENCLOSE pgate_s
pgate_s_mf = pgate_s INSIDE pgate_s_mk
DEVICE MP(pchpu_sr) pgate_s_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_s_mf> [
   property W,L,NF
   NF=count(pgate_s_mf) 
   W=perimeter_coincide(pgate_s_mf, tpdiff)/2 
   L=area(pgate_s_mf) / W
]
DEVICE MP(pchpu_sr) pgate_s_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_s_sf, tpdiff ) + perimeter_inside(pgate_s_sf, tpdiff)) / 2 
   L=area(pgate_s_sf) / W
]

pgate_stgo_sf = pgate_stgo INTERACT gate1_sf
pgate_stgo_mk = mdiff_nf ENCLOSE pgate_stgo
pgate_stgo_mf = pgate_stgo INSIDE pgate_stgo_mk
DEVICE MP(pchpu_tgosr) pgate_stgo_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_stgo_mf> [
   property W,L,NF
   NF=count(pgate_stgo_mf) 
   W=perimeter_coincide(pgate_stgo_mf, tpdiff)/2 
   L=area(pgate_stgo_mf) / W
]
DEVICE MP(pchpu_tgosr) pgate_stgo_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_stgo_sf, tpdiff ) + perimeter_inside(pgate_stgo_sf, tpdiff)) / 2 
   L=area(pgate_stgo_sf) / W
]

pgate_pu_ulldpsr_sf = pgate_pu_ulldpsr INTERACT gate1_sf
pgate_pu_ulldpsr_mk = mdiff_nf ENCLOSE pgate_pu_ulldpsr
pgate_pu_ulldpsr_mf = pgate_pu_ulldpsr INSIDE pgate_pu_ulldpsr_mk
DEVICE MP(pchpu_ulldpsr) pgate_pu_ulldpsr_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_pu_ulldpsr_mf> [
   property W,L,NF
   NF=count(pgate_pu_ulldpsr_mf) 
   W=perimeter_coincide(pgate_pu_ulldpsr_mf, tpdiff)/2 
   L=area(pgate_pu_ulldpsr_mf) / W
]
DEVICE MP(pchpu_ulldpsr) pgate_pu_ulldpsr_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_pu_ulldpsr_sf, tpdiff ) + perimeter_inside(pgate_pu_ulldpsr_sf, tpdiff)) / 2 
   L=area(pgate_pu_ulldpsr_sf) / W
]

pgate_pu_ullsr_sf = pgate_pu_ullsr INTERACT gate1_sf
pgate_pu_ullsr_mk = mdiff_nf ENCLOSE pgate_pu_ullsr
pgate_pu_ullsr_mf = pgate_pu_ullsr INSIDE pgate_pu_ullsr_mk
DEVICE MP(pchpu_ullsr) pgate_pu_ullsr_mk p_poly(G) tpdiff(S) tpdiff(D) nxwell(B)  <pgate_pu_ullsr_mf> [
   property W,L,NF
   NF=count(pgate_pu_ullsr_mf) 
   W=perimeter_coincide(pgate_pu_ullsr_mf, tpdiff)/2 
   L=area(pgate_pu_ullsr_mf) / W
]
DEVICE MP(pchpu_ullsr) pgate_pu_ullsr_sf p_poly(G) tpdiff(S) tpdiff(D) nxwell(B) [
#IFDEF MULTI_FINGER
   property W,L,NF
   NF=1
#ELSE
   property W,L
#ENDIF
   W=(perimeter_coincide(pgate_pu_ullsr_sf, tpdiff ) + perimeter_inside(pgate_pu_ullsr_sf, tpdiff)) / 2 
   L=area(pgate_pu_ullsr_sf) / W
]


#ENDIF

#ENDIF


#IFDEF LVS_DECK

#IFDEF MULTI_FINGER
LVS REDUCE LDDN PARALLEL YES
LVS REDUCE LDDP PARALLEL YES
LVS REDUCE MN PARALLEL YES [
  TOLERANCE NF 0 
  EFFECTIVE W, L, NF, MF_DEVICE_COUNT
  P = sum( W * L )
  Q = sum( W / L )
  W = sqrt( P * Q )
  L = sqrt( P / Q )
  NF = min( NF )
  MF_DEVICE_COUNT = sum( MF_DEVICE_COUNT )
]
LVS REDUCE MP PARALLEL YES [
  TOLERANCE NF 0 
  EFFECTIVE W, L, NF, MF_DEVICE_COUNT
  P = sum( W * L )
  Q = sum( W / L )
  W = sqrt( P * Q )
  L = sqrt( P / Q )
  NF = min( NF )
  MF_DEVICE_COUNT = sum( MF_DEVICE_COUNT )
]
#ELSE
LVS REDUCE PARALLEL MOS YES
#ENDIF

DMACRO LVS_MF_TRACE ELEMENT MODEL LTOL WTOL  {
#IFDEF MULTI_FINGER  
LVS PROPERTY INITIALIZE ELEMENT(MODEL) [
  PROPERTY W, L, NF, MF_DEVICE_COUNT
  W=INP_NUM_VAL(W)
  L=INP_NUM_VAL(L)
  in_NF=INP_NUM_VAL(NF)
  IF ( IS_MISSING( in_NF ) ) {
    NF = 1
  } ELSE {
    NF = in_NF
  }
  MF_DEVICE_COUNT = 1
]

TRACE PROPERTY ELEMENT(MODEL) 
[
  PROPERTY L, W, NF, MF_DEVICE_COUNT
  err = 0
  lNF = LAY_NUM_VAL( NF )
  sNF = SRC_NUM_VAL( NF )
  dNF = ABS( sNF - lNF )
  IF ( lNF != sNF ) {
    REP_NUM_DISC( NF, dNF*100/sNF )
    REP_MESSAGE( "MOS devices with different finger count cannot be matched!" )
    err = 1
  }
  lMF_DEVICE_COUNT = LAY_NUM_VAL( MF_DEVICE_COUNT )
  sMF_DEVICE_COUNT = SRC_NUM_VAL( MF_DEVICE_COUNT )
  dMF_DEVICE_COUNT = ABS( sMF_DEVICE_COUNT - lMF_DEVICE_COUNT )
  IF ( sNF != 1 && dMF_DEVICE_COUNT != 0 ) {
    REP_NUM_DISC( MF_DEVICE_COUNT, dMF_DEVICE_COUNT*100/sMF_DEVICE_COUNT )
    REP_MESSAGE( "Unbalanced multifinger devices - different counts in layout and source!" )
    err = 1
  }
  if ( err == 0 ) {
    lL = LAY_NUM_VAL( L )
    sL = SRC_NUM_VAL( L )
    dL = ABS( sL - lL )*100
    IF ( dL > sL*LTOL ) {
      REP_NUM_DISC( L, dL/sL )
    }
    lW = LAY_NUM_VAL( W )
    sW = SRC_NUM_VAL( W )
    dW = ABS( sW - lW )*100
    IF ( dW > sW*WTOL ) {
      REP_NUM_DISC( W, dW/sW )
    }
  }
]
#ELSE
TRACE PROPERTY ELEMENT(MODEL) L L LTOL
TRACE PROPERTY ELEMENT(MODEL) W W WTOL
#ENDIF    
}

TRACE PROPERTY LDDP(pch_hv18_mac) L L MOS_Lerr
TRACE PROPERTY LDDP(pch_hv18_mac) W W MOS_Werr
TRACE PROPERTY LDDP(pch_udm18_mac) L L MOS_Lerr
TRACE PROPERTY LDDP(pch_udm18_mac) W W MOS_Werr
TRACE PROPERTY LDDP(pch_udm18ud15_mac) L L MOS_Lerr
TRACE PROPERTY LDDP(pch_udm18ud15_mac) W W MOS_Werr
TRACE PROPERTY LDDP(pch_udm_mac) L L MOS_Lerr
TRACE PROPERTY LDDP(pch_udm_mac) W W MOS_Werr
TRACE PROPERTY LDDN(nch_hv18_mac) L L MOS_Lerr
TRACE PROPERTY LDDN(nch_hv18_mac) W W MOS_Werr
TRACE PROPERTY LDDN(nch_udm18_mac) L L MOS_Lerr
TRACE PROPERTY LDDN(nch_udm18_mac) W W MOS_Werr
TRACE PROPERTY LDDN(nch_udm18ud15_mac) L L MOS_Lerr
TRACE PROPERTY LDDN(nch_udm18ud15_mac) W W MOS_Werr
TRACE PROPERTY LDDN(nch_udm_mac) L L MOS_Lerr
TRACE PROPERTY LDDN(nch_udm_mac) W W MOS_Werr
CMACRO LVS_MF_TRACE MN nch_15_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_15od18_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_18_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_18ud12_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_18ud15_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_25_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_25od33_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_25ud18_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_33_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_avt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_chvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_edc_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_ehvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_elvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hg_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hguhvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hia15_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hia18_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hia25_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hia_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hlqrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hlrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hlsvtrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hltrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hvtllrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_hvtrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_io_lvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_llrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_lvt18ud12_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_lvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_lvtrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_mlvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_na15_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_na18_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_na18ud15_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_na25_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_na25od33_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_na25ud18_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_na33_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_na_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_qrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_rom MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_rpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_svt_sp_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_svtllrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_svtrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_uhvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_ullrpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_ulvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nch_zvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_dpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_hldpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_hlsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_hltsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_hvtsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_iosr_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_lldpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_llsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_sr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_tgosr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_ulldpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpd_ullsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_dpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_hldpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_hlsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_hltsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_hvtsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_iosr_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_lldpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_llsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_sr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_tgosr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_ulldpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchpg_ullsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MN nchrpd_sr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_15_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_15od18_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_18_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_18ud12_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_18ud15_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_25_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_25od33_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_25ud18_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_33_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_alvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_ehvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_elvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_hg_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_hguhvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_hvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_lvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_mlvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_svt_sp_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_uhvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pch_ulvt_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_2psr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_dpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_hldpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_hlsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_hltsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_hvtsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_iosr_mac MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_lldpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_llsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_sr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_tgosr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_ulldpsr MOS_Lerr MOS_Werr
CMACRO LVS_MF_TRACE MP pchpu_ullsr MOS_Lerr MOS_Werr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(npn10) cnemit10 ncoll1 cpbase1 cnemit1 netlist model npn10
#ELSE
  DEVICE Q(npn10) cnemit10 ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(npn10) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(npn10_mis) cnemit10_mac ncoll1 cpbase1 cnemit1 netlist element "X" netlist model npn10_mis
#ELSE
  DEVICE Q(npn10_mis) cnemit10_mac ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(npn10_mis) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(npn1d6) cnemit1d6 ncoll1 cpbase1 cnemit1 netlist model npn1d6
#ELSE
  DEVICE Q(npn1d6) cnemit1d6 ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(npn1d6) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(npn1d6_mis) cnemit1d6_mac ncoll1 cpbase1 cnemit1 netlist element "X" netlist model npn1d6_mis
#ELSE
  DEVICE Q(npn1d6_mis) cnemit1d6_mac ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(npn1d6_mis) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(npn2) cnemit2 ncoll1 cpbase1 cnemit1 netlist model npn2
#ELSE
  DEVICE Q(npn2) cnemit2 ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(npn2) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(npn2_mis) cnemit2_mac ncoll1 cpbase1 cnemit1 netlist element "X" netlist model npn2_mis
#ELSE
  DEVICE Q(npn2_mis) cnemit2_mac ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(npn2_mis) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(npn5) cnemit5 ncoll1 cpbase1 cnemit1 netlist model npn5
#ELSE
  DEVICE Q(npn5) cnemit5 ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(npn5) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(npn5_mis) cnemit5_mac ncoll1 cpbase1 cnemit1 netlist element "X" netlist model npn5_mis
#ELSE
  DEVICE Q(npn5_mis) cnemit5_mac ncoll1 cpbase1 cnemit1 [
		property A
		A = area(cnemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(npn5_mis) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(pnp10) cemit10 coll1 cnbase1 cemit1 netlist model pnp10
#ELSE
  DEVICE Q(pnp10) cemit10 coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(pnp10) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(pnp10_mis) cemit10_mac coll1 cnbase1 cemit1 netlist element "X" netlist model pnp10_mis
#ELSE
  DEVICE Q(pnp10_mis) cemit10_mac coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(pnp10_mis) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(pnp1d6) cemit1d6 coll1 cnbase1 cemit1 netlist model pnp1d6
#ELSE
  DEVICE Q(pnp1d6) cemit1d6 coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(pnp1d6) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(pnp1d6_mis) cemit1d6_mac coll1 cnbase1 cemit1 netlist element "X" netlist model pnp1d6_mis
#ELSE
  DEVICE Q(pnp1d6_mis) cemit1d6_mac coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(pnp1d6_mis) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(pnp2) cemit2 coll1 cnbase1 cemit1 netlist model pnp2
#ELSE
  DEVICE Q(pnp2) cemit2 coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(pnp2) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(pnp2_mis) cemit2_mac coll1 cnbase1 cemit1 netlist element "X" netlist model pnp2_mis
#ELSE
  DEVICE Q(pnp2_mis) cemit2_mac coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(pnp2_mis) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(pnp5) cemit5 coll1 cnbase1 cemit1 netlist model pnp5
#ELSE
  DEVICE Q(pnp5) cemit5 coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(pnp5) A A BJT_Aerr
#ENDIF

#IFNDEF LVS_DECK
DEVICE Q(pnp5_mis) cemit5_mac coll1 cnbase1 cemit1 netlist element "X" netlist model pnp5_mis
#ELSE
  DEVICE Q(pnp5_mis) cemit5_mac coll1 cnbase1 cemit1 [
		property A
		A = area(cemit1)
  ]
#ENDIF

#IFDEF LVS_DECK
  TRACE PROPERTY Q(pnp5_mis) A A BJT_Aerr
#ENDIF

DEVICE D(ndio) cndio psub tndiff netlist model ndio
  TRACE PROPERTY D(ndio) A A DIO_Aerr
DEVICE D(ndio_15) indio_15 psub tndiff netlist model ndio_15
  TRACE PROPERTY D(ndio_15) A A DIO_Aerr
DEVICE D(ndio_15od18) indio_15od psub tndiff netlist model ndio_15od18
  TRACE PROPERTY D(ndio_15od18) A A DIO_Aerr
DEVICE D(ndio_18) indio_18 psub tndiff netlist model ndio_18
  TRACE PROPERTY D(ndio_18) A A DIO_Aerr
DEVICE D(ndio_18ll) ndio18ll psub tndiff netlist model ndio_18ll
  TRACE PROPERTY D(ndio_18ll) A A DIO_Aerr
DEVICE D(ndio_18ud12) indio_18ud12 psub tndiff netlist model ndio_18ud12
  TRACE PROPERTY D(ndio_18ud12) A A DIO_Aerr
DEVICE D(ndio_18ud15) indio_18ud15 psub tndiff netlist model ndio_18ud15
  TRACE PROPERTY D(ndio_18ud15) A A DIO_Aerr
DEVICE D(ndio_25) indio_25 psub tndiff netlist model ndio_25
  TRACE PROPERTY D(ndio_25) A A DIO_Aerr
DEVICE D(ndio_25ll) ndio25ll psub tndiff netlist model ndio_25ll
  TRACE PROPERTY D(ndio_25ll) A A DIO_Aerr
DEVICE D(ndio_25od33) indio_25od psub tndiff netlist model ndio_25od33
  TRACE PROPERTY D(ndio_25od33) A A DIO_Aerr
DEVICE D(ndio_25ud18) indio_25ud psub tndiff netlist model ndio_25ud18
  TRACE PROPERTY D(ndio_25ud18) A A DIO_Aerr
DEVICE D(ndio_33) indio_33 psub tndiff netlist model ndio_33
  TRACE PROPERTY D(ndio_33) A A DIO_Aerr
DEVICE D(ndio_avt) ndioav psub tndiff netlist model ndio_avt
  TRACE PROPERTY D(ndio_avt) A A DIO_Aerr
DEVICE D(ndio_ehvt) ndioeh psub tndiff netlist model ndio_ehvt
  TRACE PROPERTY D(ndio_ehvt) A A DIO_Aerr
DEVICE D(ndio_elvt) ndioelvt psub tndiff netlist model ndio_elvt
  TRACE PROPERTY D(ndio_elvt) A A DIO_Aerr
DEVICE D(ndio_esd) ydio psub ydio_t netlist model ndio_esd
  TRACE PROPERTY D(ndio_esd) A A DIO_Aerr
DEVICE D(ndio_hg) ndiohg psub tndiff netlist model ndio_hg
  TRACE PROPERTY D(ndio_hg) A A DIO_Aerr
DEVICE D(ndio_hguhvt) ndiohguhvt psub tndiff netlist model ndio_hguhvt
  TRACE PROPERTY D(ndio_hguhvt) A A DIO_Aerr
DEVICE D(ndio_hvt) ndioh psub tndiff netlist model ndio_hvt
  TRACE PROPERTY D(ndio_hvt) A A DIO_Aerr
DEVICE D(ndio_io_lvt) ndio_io_lvt psub tndiff netlist model ndio_io_lvt
  TRACE PROPERTY D(ndio_io_lvt) A A DIO_Aerr
DEVICE D(ndio_ll) ndioll psub tndiff netlist model ndio_ll
  TRACE PROPERTY D(ndio_ll) A A DIO_Aerr
DEVICE D(ndio_lvt) ndiol psub tndiff netlist model ndio_lvt
  TRACE PROPERTY D(ndio_lvt) A A DIO_Aerr
DEVICE D(ndio_lvt18ud12) indio_lvt18ud12 psub tndiff netlist model ndio_lvt18ud12
  TRACE PROPERTY D(ndio_lvt18ud12) A A DIO_Aerr
DEVICE D(ndio_mlvt) cndioilvt psub tndiff netlist model ndio_mlvt
  TRACE PROPERTY D(ndio_mlvt) A A DIO_Aerr
DEVICE D(ndio_na) cndion psub tndiff netlist model ndio_na
  TRACE PROPERTY D(ndio_na) A A DIO_Aerr
DEVICE D(ndio_na15) ndio_15na psub tndiff netlist model ndio_na15
  TRACE PROPERTY D(ndio_na15) A A DIO_Aerr
DEVICE D(ndio_na18) ndio_18na psub tndiff netlist model ndio_na18
  TRACE PROPERTY D(ndio_na18) A A DIO_Aerr
DEVICE D(ndio_na18ud15) ndio_18ud15na psub tndiff netlist model ndio_na18ud15
  TRACE PROPERTY D(ndio_na18ud15) A A DIO_Aerr
DEVICE D(ndio_na25) ndio_25na psub tndiff netlist model ndio_na25
  TRACE PROPERTY D(ndio_na25) A A DIO_Aerr
DEVICE D(ndio_na25od33) ndio_25od33na psub tndiff netlist model ndio_na25od33
  TRACE PROPERTY D(ndio_na25od33) A A DIO_Aerr
DEVICE D(ndio_na33) ndio_33na psub tndiff netlist model ndio_na33
  TRACE PROPERTY D(ndio_na33) A A DIO_Aerr
DEVICE D(ndio_uhvt) ndiouh psub tndiff netlist model ndio_uhvt
  TRACE PROPERTY D(ndio_uhvt) A A DIO_Aerr
DEVICE D(ndio_ulvt) endio_sa psub tndiff netlist model ndio_ulvt
  TRACE PROPERTY D(ndio_ulvt) A A DIO_Aerr
DEVICE D(ndio_zvt) cndio_zvt psub tndiff netlist model ndio_zvt
  TRACE PROPERTY D(ndio_zvt) A A DIO_Aerr
DEVICE D(nwdio) cnwdio psub nxwell netlist model nwdio
  TRACE PROPERTY D(nwdio) A A DIO_Aerr
DEVICE D(pdio) cpdio tpdiff nxwell netlist model pdio
  TRACE PROPERTY D(pdio) A A DIO_Aerr
DEVICE D(pdio_15) ipdio_15 tpdiff nxwell netlist model pdio_15
  TRACE PROPERTY D(pdio_15) A A DIO_Aerr
DEVICE D(pdio_15od18) ipdio_15od tpdiff nxwell netlist model pdio_15od18
  TRACE PROPERTY D(pdio_15od18) A A DIO_Aerr
DEVICE D(pdio_18) ipdio_18 tpdiff nxwell netlist model pdio_18
  TRACE PROPERTY D(pdio_18) A A DIO_Aerr
DEVICE D(pdio_18ll) pdio18ll tpdiff nxwell netlist model pdio_18ll
  TRACE PROPERTY D(pdio_18ll) A A DIO_Aerr
DEVICE D(pdio_18ud12) ipdio_18ud12 tpdiff nxwell netlist model pdio_18ud12
  TRACE PROPERTY D(pdio_18ud12) A A DIO_Aerr
DEVICE D(pdio_18ud15) ipdio_18ud15 tpdiff nxwell netlist model pdio_18ud15
  TRACE PROPERTY D(pdio_18ud15) A A DIO_Aerr
DEVICE D(pdio_25) ipdio_25 tpdiff nxwell netlist model pdio_25
  TRACE PROPERTY D(pdio_25) A A DIO_Aerr
DEVICE D(pdio_25ll) pdio25ll tpdiff nxwell netlist model pdio_25ll
  TRACE PROPERTY D(pdio_25ll) A A DIO_Aerr
DEVICE D(pdio_25od33) ipdio_25od tpdiff nxwell netlist model pdio_25od33
  TRACE PROPERTY D(pdio_25od33) A A DIO_Aerr
DEVICE D(pdio_25ud18) ipdio_25ud tpdiff nxwell netlist model pdio_25ud18
  TRACE PROPERTY D(pdio_25ud18) A A DIO_Aerr
DEVICE D(pdio_33) ipdio_33 tpdiff nxwell netlist model pdio_33
  TRACE PROPERTY D(pdio_33) A A DIO_Aerr
DEVICE D(pdio_ehvt) pdioeh tpdiff nxwell netlist model pdio_ehvt
  TRACE PROPERTY D(pdio_ehvt) A A DIO_Aerr
DEVICE D(pdio_elvt) pdioelvt tpdiff nxwell netlist model pdio_elvt
  TRACE PROPERTY D(pdio_elvt) A A DIO_Aerr
DEVICE D(pdio_hg) pdiohg tpdiff nxwell netlist model pdio_hg
  TRACE PROPERTY D(pdio_hg) A A DIO_Aerr
DEVICE D(pdio_hguhvt) pdiohguhvt tpdiff nxwell netlist model pdio_hguhvt
  TRACE PROPERTY D(pdio_hguhvt) A A DIO_Aerr
DEVICE D(pdio_hvt) pdioh tpdiff nxwell netlist model pdio_hvt
  TRACE PROPERTY D(pdio_hvt) A A DIO_Aerr
DEVICE D(pdio_ll) pdioll tpdiff nxwell netlist model pdio_ll
  TRACE PROPERTY D(pdio_ll) A A DIO_Aerr
DEVICE D(pdio_lvt) pdiol tpdiff nxwell netlist model pdio_lvt
  TRACE PROPERTY D(pdio_lvt) A A DIO_Aerr
DEVICE D(pdio_mlvt) pdioilvt tpdiff nxwell netlist model pdio_mlvt
  TRACE PROPERTY D(pdio_mlvt) A A DIO_Aerr
DEVICE D(pdio_uhvt) pdiouh tpdiff nxwell netlist model pdio_uhvt
  TRACE PROPERTY D(pdio_uhvt) A A DIO_Aerr
DEVICE D(pdio_ulvt) epdio_sa tpdiff nxwell netlist model pdio_ulvt
  TRACE PROPERTY D(pdio_ulvt) A A DIO_Aerr
DEVICE C(cm) mim_r p3 crown
DEVICE C(cm_decap) mim_r_decap p3 crown

// User define devices 
MOMDMY_all = MOMDMY0 OR MOMDMY100
dmetal1 = ( M1 NOT INTERACT CO ) NOT INTERACT VIA1
dmetal2 = ( M2 NOT INTERACT VIA1 ) NOT INTERACT VIA2
dmetal3 = ( M3 NOT INTERACT VIA2 ) NOT INTERACT VIA3
dmetal4 = ( M4 NOT INTERACT VIA3 ) NOT INTERACT VIA4
dmetal5 = ( M5 NOT INTERACT VIA4 ) NOT INTERACT VIA5
dmetal6 = ( M6 NOT INTERACT VIA5 ) NOT INTERACT VIA6
dmetal7 = ( M7 NOT INTERACT VIA6 ) NOT INTERACT VIA7
dmetal8 = ( M8 NOT INTERACT VIA7 ) NOT INTERACT VIA8
dmetal9 = ( M9 NOT INTERACT VIA8 ) NOT INTERACT RV


MOM_dmetal1_0 = MOMDMY100 NOT ( SIZE MOMDMY100 BY 0.005 )



FM_edge1 = metal1i NOT MOM_field1
FM_len1_pre = MOM_field1 TOUCH EDGE FM_edge1
FM_len1a = MOMDMY1 TOUCH EDGE FM_len1_pre
FM_len1 = FM_edge1 COIN EDGE FM_len1a
FM_tip1_pre = EXT MOM_field1 FM_len1 < MIN_MOM_LR OPPOSITE REGION
FM_tip1 =  FM_tip1_pre AND MOMDMY1
MOM_tip1a = metal1i OR FM_tip1
MOM_tip1  = MOM_tip1a INTERACT MOMDMY100
MOM_hole1a = HOLES MOM_tip1 INNER
MOM_hole1 = MOM_hole1a INSIDE MOMDMY_all

MOM_dmetal1   = M1 INTERACT MOMDMY_all 
MOM_dmetal1_1 = MOM_dmetal1_0 OR MOM_dmetal1


FM_edge2 = metal2i NOT MOM_field2
FM_len2_pre = MOM_field2 TOUCH EDGE FM_edge2
FM_len2a = MOMDMY2 TOUCH EDGE FM_len2_pre
FM_len2 = FM_edge2 COIN EDGE FM_len2a
FM_tip2_pre = EXT MOM_field2 FM_len2 < MIN_MOM_LR OPPOSITE REGION
FM_tip2 =  FM_tip2_pre AND MOMDMY2
MOM_tip2a = metal2i OR FM_tip2
MOM_tip2  = MOM_tip2a INTERACT MOMDMY100
MOM_hole2a = HOLES MOM_tip2 INNER
MOM_hole2 = MOM_hole2a INSIDE MOMDMY_all

MOM_dmetal2   = M2 INTERACT MOMDMY_all 
MOM_dmetal1_2 = MOM_dmetal1_1 OR MOM_dmetal2


FM_edge3 = metal3i NOT MOM_field3
FM_len3_pre = MOM_field3 TOUCH EDGE FM_edge3
FM_len3a = MOMDMY3 TOUCH EDGE FM_len3_pre
FM_len3 = FM_edge3 COIN EDGE FM_len3a
FM_tip3_pre = EXT MOM_field3 FM_len3 < MIN_MOM_LR OPPOSITE REGION
FM_tip3 =  FM_tip3_pre AND MOMDMY3
MOM_tip3a = metal3i OR FM_tip3
MOM_tip3  = MOM_tip3a INTERACT MOMDMY100
MOM_hole3a = HOLES MOM_tip3 INNER
MOM_hole3 = MOM_hole3a INSIDE MOMDMY_all

MOM_dmetal3   = M3 INTERACT MOMDMY_all 
MOM_dmetal1_3 = MOM_dmetal1_2 OR MOM_dmetal3


FM_edge4 = metal4i NOT MOM_field4
FM_len4_pre = MOM_field4 TOUCH EDGE FM_edge4
FM_len4a = MOMDMY4 TOUCH EDGE FM_len4_pre
FM_len4 = FM_edge4 COIN EDGE FM_len4a
FM_tip4_pre = EXT MOM_field4 FM_len4 < MIN_MOM_LR OPPOSITE REGION
FM_tip4 =  FM_tip4_pre AND MOMDMY4
MOM_tip4a = metal4i OR FM_tip4
MOM_tip4  = MOM_tip4a INTERACT MOMDMY100
MOM_hole4a = HOLES MOM_tip4 INNER
MOM_hole4 = MOM_hole4a INSIDE MOMDMY_all

MOM_dmetal4   = M4 INTERACT MOMDMY_all 
MOM_dmetal1_4 = MOM_dmetal1_3 OR MOM_dmetal4


FM_edge5 = metal5i NOT MOM_field5
FM_len5_pre = MOM_field5 TOUCH EDGE FM_edge5
FM_len5a = MOMDMY5 TOUCH EDGE FM_len5_pre
FM_len5 = FM_edge5 COIN EDGE FM_len5a
FM_tip5_pre = EXT MOM_field5 FM_len5 < MIN_MOM_LR OPPOSITE REGION
FM_tip5 =  FM_tip5_pre AND MOMDMY5
MOM_tip5a = metal5i OR FM_tip5
MOM_tip5  = MOM_tip5a INTERACT MOMDMY100
MOM_hole5a = HOLES MOM_tip5 INNER
MOM_hole5 = MOM_hole5a INSIDE MOMDMY_all

MOM_dmetal5   = M5 INTERACT MOMDMY_all 
MOM_dmetal1_5 = MOM_dmetal1_4 OR MOM_dmetal5


FM_edge6 = metal6i NOT MOM_field6
FM_len6_pre = MOM_field6 TOUCH EDGE FM_edge6
FM_len6a = MOMDMY6 TOUCH EDGE FM_len6_pre
FM_len6 = FM_edge6 COIN EDGE FM_len6a
FM_tip6_pre = EXT MOM_field6 FM_len6 < MIN_MOM_LR OPPOSITE REGION
FM_tip6 =  FM_tip6_pre AND MOMDMY6
MOM_tip6a = metal6i OR FM_tip6
MOM_tip6  = MOM_tip6a INTERACT MOMDMY100
MOM_hole6a = HOLES MOM_tip6 INNER
MOM_hole6 = MOM_hole6a INSIDE MOMDMY_all

MOM_dmetal6   = M6 INTERACT MOMDMY_all 
MOM_dmetal1_6 = MOM_dmetal1_5 OR MOM_dmetal6


FM_edge7 = metal7i NOT MOM_field7
FM_len7_pre = MOM_field7 TOUCH EDGE FM_edge7
FM_len7a = MOMDMY7 TOUCH EDGE FM_len7_pre
FM_len7 = FM_edge7 COIN EDGE FM_len7a
FM_tip7_pre = EXT MOM_field7 FM_len7 < MIN_MOM_LR OPPOSITE REGION
FM_tip7 =  FM_tip7_pre AND MOMDMY7
MOM_tip7a = metal7i OR FM_tip7
MOM_tip7  = MOM_tip7a INTERACT MOMDMY100
MOM_hole7a = HOLES MOM_tip7 INNER
MOM_hole7 = MOM_hole7a INSIDE MOMDMY_all

MOM_dmetal7   = M7 INTERACT MOMDMY_all 
MOM_dmetal1_7 = MOM_dmetal1_6 OR MOM_dmetal7


FM_edge8 = metal8i NOT MOM_field8
FM_len8_pre = MOM_field8 TOUCH EDGE FM_edge8
FM_len8a = MOMDMY8 TOUCH EDGE FM_len8_pre
FM_len8 = FM_edge8 COIN EDGE FM_len8a
FM_tip8_pre = EXT MOM_field8 FM_len8 < MIN_MOM_LR OPPOSITE REGION
FM_tip8 =  FM_tip8_pre AND MOMDMY8
MOM_tip8a = metal8i OR FM_tip8
MOM_tip8  = MOM_tip8a INTERACT MOMDMY100
MOM_hole8a = HOLES MOM_tip8 INNER
MOM_hole8 = MOM_hole8a INSIDE MOMDMY_all

MOM_dmetal8   = M8 INTERACT MOMDMY_all 
MOM_dmetal1_8 = MOM_dmetal1_7 OR MOM_dmetal8








mom13_1 = MOMDMY3 INTERACT MOM_field1

mom13_2 = mom13_1 INTERACT MOM_field2

mom13_3 = mom13_2 INTERACT MOM_field3


mom13_idt = MOM_field3 NOT MOM_field2

mom13_Left4 = mom13_3 NOT INTERACT MOM_field4
mom13_Left5 = mom13_Left4 NOT INTERACT MOM_field5
mom13_Left6 = mom13_Left5 NOT INTERACT MOM_field6
mom13_Left7 = mom13_Left6 NOT INTERACT MOM_field7
mom13_Left8 = mom13_Left7 NOT INTERACT MOM_field8



mom13_reg1     = mom13_Left8 INTERACT mom13_idt
mom13_reg2     = mom13_reg1 INTERACT MOMDMY0
mom13_reg3     = mom13_reg2 NOT INTERACT MOMDMY22
mom13_reg4     = mom13_reg3 NOT INTERACT RFDMY
mom13_reg5     = mom13_reg4 NOT INTERACT MOMDMY27
mom13_reg6     = mom13_reg5 NOT INTERACT MOMDMY31
mom13_reg7     = mom13_reg6 NOT INTERACT MOMDMY32
mom13_reg      = mom13_reg7 NOT INTERACT MOMDMY33
 
mom13_reg_n    = mom13_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom13_reg_p    = mom13_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom13_reg_2t   = mom13_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom13_reg_nw1  = mom13_reg5 INTERACT MOMDMY31
mom13_reg_nw   = mom13_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom13_reg_pw1  = mom13_reg6 INTERACT MOMDMY32
mom13_reg_pw   = mom13_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom13_reg_ntn1 = mom13_reg7 INTERACT MOMDMY33
mom13_reg_ntn  = mom13_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom13_mx_reg1  = MOMDMY22 INTERACT mom13_Left8
mom13_mx_reg2  = mom13_mx_reg1 INTERACT mom13_idt
mom13_mx_reg3  = mom13_mx_reg2 INTERACT MOMDMY0
mom13_mx_reg   = mom13_mx_reg3 INTERACT poly


fmom13_reg1        = mom13_Left8 NOT INTERACT mom13_idt
fmom13_reg2        = fmom13_reg1 INTERACT MOMDMY100
fmom13_reg3        = fmom13_reg2 NOT INTERACT MOMDMY22
fmom13_reg4        = fmom13_reg3 NOT INTERACT RFDMY
fmom13_reg5        = fmom13_reg4 NOT INTERACT MOMDMY27
fmom13_reg6        = fmom13_reg5 NOT INTERACT MOMDMY31
fmom13_reg7        = fmom13_reg6 NOT INTERACT MOMDMY32
fmom13_reg         = fmom13_reg7 NOT INTERACT MOMDMY33
 
fmom13_reg_n1      = fmom13_reg INTERACT n_poly                    
fmom13_reg_n       = fmom13_reg_n1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi N+poly shield wo DM
fmom13_reg_n_dm    = fmom13_reg_n1 INTERACT MOM_dmetal1_0           // FMOM 3T wi N+poly shield wi DM

fmom13_reg_p1      = fmom13_reg INTERACT p_poly                     
fmom13_reg_p       = fmom13_reg_p1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi P+poly shield wo DM
fmom13_reg_p_dm    = fmom13_reg_p1 INTERACT MOM_dmetal1_0           // FMOM 3T wi P+poly shield wi DM

fmom13_reg_2t      = fmom13_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom13_reg_nw1     = fmom13_reg5 INTERACT MOMDMY31
fmom13_reg_nw2     = fmom13_reg_nw1 INTERACT nxwell
fmom13_reg_nw      = fmom13_reg_nw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi NW shield wo DM
fmom13_reg_nw_dm   = fmom13_reg_nw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi NW shield wi DM
 
fmom13_reg_pw1     = fmom13_reg6 INTERACT MOMDMY32
fmom13_reg_pw2     = fmom13_reg_pw1 INTERACT psub
fmom13_reg_pw      = fmom13_reg_pw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi PW shield wo DM
fmom13_reg_pw_dm   = fmom13_reg_pw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi PW shield wi DM

fmom13_reg_ntn1    = fmom13_reg7 INTERACT MOMDMY33
fmom13_reg_ntn2    = fmom13_reg_ntn1 INTERACT NT_N
fmom13_reg_ntn3    = fmom13_reg_ntn2 NOT INTERACT MOMDMY28
fmom13_reg_ntn     = fmom13_reg_ntn3 NOT INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo DM
fmom13_reg_ntn_dm  = fmom13_reg_ntn3 INTERACT MOM_dmetal1_0         // FMOM 3T wi NTN shield wi DM

fmom13_reg_ntn_wo_pring1   = fmom13_reg_ntn2 INTERACT MOMDMY28             
fmom13_reg_ntn_wo_pring    = fmom13_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_0 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom13_reg_ntn_wo_pring_dm = fmom13_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom13_mx_reg1     = MOMDMY22 INTERACT mom13_Left8
fmom13_mx_reg2     = fmom13_mx_reg1 NOT INTERACT mom13_idt
fmom13_mx_reg3     = fmom13_mx_reg2 INTERACT MOMDMY100
fmom13_mx_reg4     = fmom13_mx_reg3 NOT INTERACT MOMDMY27
fmom13_mx_reg5     = fmom13_mx_reg4 NOT INTERACT MOMDMY31
fmom13_mx_reg6     = fmom13_mx_reg5 NOT INTERACT MOMDMY32
fmom13_mx_reg      = fmom13_mx_reg6 NOT INTERACT MOMDMY33

fmom13_mx_reg_n1   = fmom13_mx_reg  INTERACT n_poly
fmom13_mx_reg_n    = fmom13_mx_reg_n1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi N+poly shield wo DM
fmom13_mx_reg_n_dm = fmom13_mx_reg_n1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi N+poly shield wi DM

fmom13_mx_reg_p1   = fmom13_mx_reg  INTERACT p_poly
fmom13_mx_reg_p    = fmom13_mx_reg_p1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi P+poly shield wo DM
fmom13_mx_reg_p_dm = fmom13_mx_reg_p1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi P+poly shield wi DM

fmom13_mx_reg_4t   = fmom13_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom13_mx_reg_nw1   = fmom13_mx_reg4 INTERACT MOMDMY31              
fmom13_mx_reg_nw2   = fmom13_mx_reg_nw1 INTERACT nxwell              
fmom13_mx_reg_nw    = fmom13_mx_reg_nw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi NW shield wo DM
fmom13_mx_reg_nw_dm = fmom13_mx_reg_nw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi NW shield wi DM

fmom13_mx_reg_pw1   = fmom13_mx_reg5 INTERACT MOMDMY32
fmom13_mx_reg_pw2   = fmom13_mx_reg_pw1 INTERACT psub
fmom13_mx_reg_pw    = fmom13_mx_reg_pw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi PW shield wo DM
fmom13_mx_reg_pw_dm = fmom13_mx_reg_pw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi PW shield wi DM

fmom13_mx_reg_ntn1   = fmom13_mx_reg6 INTERACT MOMDMY33
fmom13_mx_reg_ntn2   = fmom13_mx_reg_ntn1 INTERACT NT_N
fmom13_mx_reg_ntn    = fmom13_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM MX 5T wi NTN shield wo DM
fmom13_mx_reg_ntn_dm = fmom13_mx_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM MX 5T wi NTN shield wi DM

fmom13_rf_reg1     = mom13_Left8 NOT INTERACT mom13_idt
fmom13_rf_reg2     = fmom13_rf_reg1 INTERACT MOMDMY100
fmom13_rf_reg3     = fmom13_rf_reg2 NOT INTERACT MOMDMY22
fmom13_rf_reg4     = fmom13_rf_reg3 INTERACT RFDMY
fmom13_rf_reg5     = fmom13_rf_reg4 NOT INTERACT MOMDMY27
fmom13_rf_reg6     = fmom13_rf_reg5 NOT INTERACT MOMDMY31
fmom13_rf_reg7     = fmom13_rf_reg6 NOT INTERACT MOMDMY32
fmom13_rf_reg8     = fmom13_rf_reg7 NOT INTERACT MOMDMY33

fmom13_rf_reg_nw1   = fmom13_rf_reg5 INTERACT MOMDMY31
fmom13_rf_reg_nw2   = fmom13_rf_reg_nw1 INTERACT nxwell              
fmom13_rf_reg_nw    = fmom13_rf_reg_nw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi NW shield wo DM
fmom13_rf_reg_nw_dm = fmom13_rf_reg_nw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi NW shield wi DM

fmom13_rf_reg_pw1   = fmom13_rf_reg6 INTERACT MOMDMY32
fmom13_rf_reg_pw2   = fmom13_rf_reg_pw1 INTERACT psub                
fmom13_rf_reg_pw    = fmom13_rf_reg_pw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi PW shield wo DM
fmom13_rf_reg_pw_dm = fmom13_rf_reg_pw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi PW shield wi DM

fmom13_rf_reg_ntn1   = fmom13_rf_reg7 INTERACT MOMDMY33
fmom13_rf_reg_ntn2   = fmom13_rf_reg_ntn1 INTERACT NT_N
fmom13_rf_reg_ntn    = fmom13_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM 3T RF wi NTN shield wo DM
fmom13_rf_reg_ntn_dm = fmom13_rf_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM 3T RF wi NTN shield wi DM

mom13_mx_aux   = mom13_Left8 AND MOMDMY22
mom13_extc = FM_tip3 NOT INTERACT MOM_field3 > 2

DEVICE cfmom fmom13_reg_n M3(PLUS) M3(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_n)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    dmflag = 0
]
DEVICE cfmom fmom13_reg_p M3(PLUS) M3(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_p)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    dmflag = 0
]
DEVICE cfmom fmom13_reg_n_dm M3(PLUS) M3(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom13_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_n_dm)/ nr
    ftip = area(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom13_reg_p_dm M3(PLUS) M3(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom13_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_p_dm)/ nr
    ftip = area(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom13_reg_nw M3(PLUS) M3(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_nw)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom13_reg_pw M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_pw)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom13_reg_ntn M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_ntn)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom13_reg_ntn_wo_pring M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_ntn_wo_pring)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom13_reg_nw_dm M3(PLUS) M3(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom13_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_nw_dm)/ nr
    ftip = area(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom13_reg_pw_dm M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_pw_dm)/ nr
    ftip = area(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom13_reg_ntn_dm M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_ntn_dm)/ nr
    ftip = area(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom13_reg_ntn_wo_pring_dm M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom13_reg_2t M3(PLUS) M3(MINUS) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_reg_2t)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
]


DEVICE cfmom_mx_4t fmom13_mx_reg_4t mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2)  <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
]


DEVICE cfmom_wo_rf fmom13_rf_reg_nw M3(PLUS) M3(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_rf_reg_nw)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom13_rf_reg_pw M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_rf_reg_pw)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom13_rf_reg_ntn M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_rf_reg_ntn)/ nr
    ftip = area(mom13_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom13_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom13_rf_reg_nw_dm M3(PLUS) M3(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom13_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_rf_reg_nw_dm)/ nr
    ftip = area(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom13_rf_reg_pw_dm M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_rf_reg_pw_dm)/ nr
    ftip = area(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom13_rf_reg_ntn_dm M3(PLUS) M3(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom13_rf_reg_ntn_dm)/ nr
    ftip = area(mom13_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom13_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 3
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom13_mx_reg_n mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    dmflag = 0
]
DEVICE cfmom_mx fmom13_mx_reg_p mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom13_mx_reg_nw mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom13_mx_reg_pw mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom13_mx_reg_ntn mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom13_mx_reg_n_dm mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom13_mx_reg_p_dm mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom13_mx_reg_nw_dm mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom13_mx_reg_pw_dm mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom13_mx_reg_ntn_dm mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom13_mx_aux> <M3> <mom13_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M3)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom13_mx_aux)/ (nr*mf1)
    ftip = area(mom13_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom13_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 3
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom14_1 = MOMDMY4 INTERACT MOM_field1

mom14_2 = mom14_1 INTERACT MOM_field2

mom14_3 = mom14_2 INTERACT MOM_field3

mom14_4 = mom14_3 INTERACT MOM_field4


mom14_idt = MOM_field4 NOT MOM_field3

mom14_Left5 = mom14_4 NOT INTERACT MOM_field5
mom14_Left6 = mom14_Left5 NOT INTERACT MOM_field6
mom14_Left7 = mom14_Left6 NOT INTERACT MOM_field7
mom14_Left8 = mom14_Left7 NOT INTERACT MOM_field8



mom14_reg1     = mom14_Left8 INTERACT mom14_idt
mom14_reg2     = mom14_reg1 INTERACT MOMDMY0
mom14_reg3     = mom14_reg2 NOT INTERACT MOMDMY22
mom14_reg4     = mom14_reg3 NOT INTERACT RFDMY
mom14_reg5     = mom14_reg4 NOT INTERACT MOMDMY27
mom14_reg6     = mom14_reg5 NOT INTERACT MOMDMY31
mom14_reg7     = mom14_reg6 NOT INTERACT MOMDMY32
mom14_reg      = mom14_reg7 NOT INTERACT MOMDMY33
 
mom14_reg_n    = mom14_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom14_reg_p    = mom14_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom14_reg_2t   = mom14_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom14_reg_nw1  = mom14_reg5 INTERACT MOMDMY31
mom14_reg_nw   = mom14_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom14_reg_pw1  = mom14_reg6 INTERACT MOMDMY32
mom14_reg_pw   = mom14_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom14_reg_ntn1 = mom14_reg7 INTERACT MOMDMY33
mom14_reg_ntn  = mom14_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom14_mx_reg1  = MOMDMY22 INTERACT mom14_Left8
mom14_mx_reg2  = mom14_mx_reg1 INTERACT mom14_idt
mom14_mx_reg3  = mom14_mx_reg2 INTERACT MOMDMY0
mom14_mx_reg   = mom14_mx_reg3 INTERACT poly


fmom14_reg1        = mom14_Left8 NOT INTERACT mom14_idt
fmom14_reg2        = fmom14_reg1 INTERACT MOMDMY100
fmom14_reg3        = fmom14_reg2 NOT INTERACT MOMDMY22
fmom14_reg4        = fmom14_reg3 NOT INTERACT RFDMY
fmom14_reg5        = fmom14_reg4 NOT INTERACT MOMDMY27
fmom14_reg6        = fmom14_reg5 NOT INTERACT MOMDMY31
fmom14_reg7        = fmom14_reg6 NOT INTERACT MOMDMY32
fmom14_reg         = fmom14_reg7 NOT INTERACT MOMDMY33
 
fmom14_reg_n1      = fmom14_reg INTERACT n_poly                    
fmom14_reg_n       = fmom14_reg_n1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi N+poly shield wo DM
fmom14_reg_n_dm    = fmom14_reg_n1 INTERACT MOM_dmetal1_0           // FMOM 3T wi N+poly shield wi DM

fmom14_reg_p1      = fmom14_reg INTERACT p_poly                     
fmom14_reg_p       = fmom14_reg_p1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi P+poly shield wo DM
fmom14_reg_p_dm    = fmom14_reg_p1 INTERACT MOM_dmetal1_0           // FMOM 3T wi P+poly shield wi DM

fmom14_reg_2t      = fmom14_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom14_reg_nw1     = fmom14_reg5 INTERACT MOMDMY31
fmom14_reg_nw2     = fmom14_reg_nw1 INTERACT nxwell
fmom14_reg_nw      = fmom14_reg_nw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi NW shield wo DM
fmom14_reg_nw_dm   = fmom14_reg_nw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi NW shield wi DM
 
fmom14_reg_pw1     = fmom14_reg6 INTERACT MOMDMY32
fmom14_reg_pw2     = fmom14_reg_pw1 INTERACT psub
fmom14_reg_pw      = fmom14_reg_pw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi PW shield wo DM
fmom14_reg_pw_dm   = fmom14_reg_pw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi PW shield wi DM

fmom14_reg_ntn1    = fmom14_reg7 INTERACT MOMDMY33
fmom14_reg_ntn2    = fmom14_reg_ntn1 INTERACT NT_N
fmom14_reg_ntn3    = fmom14_reg_ntn2 NOT INTERACT MOMDMY28
fmom14_reg_ntn     = fmom14_reg_ntn3 NOT INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo DM
fmom14_reg_ntn_dm  = fmom14_reg_ntn3 INTERACT MOM_dmetal1_0         // FMOM 3T wi NTN shield wi DM

fmom14_reg_ntn_wo_pring1   = fmom14_reg_ntn2 INTERACT MOMDMY28             
fmom14_reg_ntn_wo_pring    = fmom14_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_0 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom14_reg_ntn_wo_pring_dm = fmom14_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom14_mx_reg1     = MOMDMY22 INTERACT mom14_Left8
fmom14_mx_reg2     = fmom14_mx_reg1 NOT INTERACT mom14_idt
fmom14_mx_reg3     = fmom14_mx_reg2 INTERACT MOMDMY100
fmom14_mx_reg4     = fmom14_mx_reg3 NOT INTERACT MOMDMY27
fmom14_mx_reg5     = fmom14_mx_reg4 NOT INTERACT MOMDMY31
fmom14_mx_reg6     = fmom14_mx_reg5 NOT INTERACT MOMDMY32
fmom14_mx_reg      = fmom14_mx_reg6 NOT INTERACT MOMDMY33

fmom14_mx_reg_n1   = fmom14_mx_reg  INTERACT n_poly
fmom14_mx_reg_n    = fmom14_mx_reg_n1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi N+poly shield wo DM
fmom14_mx_reg_n_dm = fmom14_mx_reg_n1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi N+poly shield wi DM

fmom14_mx_reg_p1   = fmom14_mx_reg  INTERACT p_poly
fmom14_mx_reg_p    = fmom14_mx_reg_p1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi P+poly shield wo DM
fmom14_mx_reg_p_dm = fmom14_mx_reg_p1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi P+poly shield wi DM

fmom14_mx_reg_4t   = fmom14_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom14_mx_reg_nw1   = fmom14_mx_reg4 INTERACT MOMDMY31              
fmom14_mx_reg_nw2   = fmom14_mx_reg_nw1 INTERACT nxwell              
fmom14_mx_reg_nw    = fmom14_mx_reg_nw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi NW shield wo DM
fmom14_mx_reg_nw_dm = fmom14_mx_reg_nw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi NW shield wi DM

fmom14_mx_reg_pw1   = fmom14_mx_reg5 INTERACT MOMDMY32
fmom14_mx_reg_pw2   = fmom14_mx_reg_pw1 INTERACT psub
fmom14_mx_reg_pw    = fmom14_mx_reg_pw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi PW shield wo DM
fmom14_mx_reg_pw_dm = fmom14_mx_reg_pw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi PW shield wi DM

fmom14_mx_reg_ntn1   = fmom14_mx_reg6 INTERACT MOMDMY33
fmom14_mx_reg_ntn2   = fmom14_mx_reg_ntn1 INTERACT NT_N
fmom14_mx_reg_ntn    = fmom14_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM MX 5T wi NTN shield wo DM
fmom14_mx_reg_ntn_dm = fmom14_mx_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM MX 5T wi NTN shield wi DM

fmom14_rf_reg1     = mom14_Left8 NOT INTERACT mom14_idt
fmom14_rf_reg2     = fmom14_rf_reg1 INTERACT MOMDMY100
fmom14_rf_reg3     = fmom14_rf_reg2 NOT INTERACT MOMDMY22
fmom14_rf_reg4     = fmom14_rf_reg3 INTERACT RFDMY
fmom14_rf_reg5     = fmom14_rf_reg4 NOT INTERACT MOMDMY27
fmom14_rf_reg6     = fmom14_rf_reg5 NOT INTERACT MOMDMY31
fmom14_rf_reg7     = fmom14_rf_reg6 NOT INTERACT MOMDMY32
fmom14_rf_reg8     = fmom14_rf_reg7 NOT INTERACT MOMDMY33

fmom14_rf_reg_nw1   = fmom14_rf_reg5 INTERACT MOMDMY31
fmom14_rf_reg_nw2   = fmom14_rf_reg_nw1 INTERACT nxwell              
fmom14_rf_reg_nw    = fmom14_rf_reg_nw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi NW shield wo DM
fmom14_rf_reg_nw_dm = fmom14_rf_reg_nw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi NW shield wi DM

fmom14_rf_reg_pw1   = fmom14_rf_reg6 INTERACT MOMDMY32
fmom14_rf_reg_pw2   = fmom14_rf_reg_pw1 INTERACT psub                
fmom14_rf_reg_pw    = fmom14_rf_reg_pw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi PW shield wo DM
fmom14_rf_reg_pw_dm = fmom14_rf_reg_pw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi PW shield wi DM

fmom14_rf_reg_ntn1   = fmom14_rf_reg7 INTERACT MOMDMY33
fmom14_rf_reg_ntn2   = fmom14_rf_reg_ntn1 INTERACT NT_N
fmom14_rf_reg_ntn    = fmom14_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM 3T RF wi NTN shield wo DM
fmom14_rf_reg_ntn_dm = fmom14_rf_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM 3T RF wi NTN shield wi DM

mom14_mx_aux   = mom14_Left8 AND MOMDMY22
mom14_extc = FM_tip4 NOT INTERACT MOM_field4 > 2

DEVICE cfmom fmom14_reg_n M4(PLUS) M4(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_n)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    dmflag = 0
]
DEVICE cfmom fmom14_reg_p M4(PLUS) M4(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_p)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    dmflag = 0
]
DEVICE cfmom fmom14_reg_n_dm M4(PLUS) M4(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom14_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_n_dm)/ nr
    ftip = area(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom14_reg_p_dm M4(PLUS) M4(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom14_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_p_dm)/ nr
    ftip = area(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom14_reg_nw M4(PLUS) M4(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_nw)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom14_reg_pw M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_pw)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom14_reg_ntn M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_ntn)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom14_reg_ntn_wo_pring M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_ntn_wo_pring)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom14_reg_nw_dm M4(PLUS) M4(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom14_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_nw_dm)/ nr
    ftip = area(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom14_reg_pw_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_pw_dm)/ nr
    ftip = area(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom14_reg_ntn_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_ntn_dm)/ nr
    ftip = area(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom14_reg_ntn_wo_pring_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom14_reg_2t M4(PLUS) M4(MINUS) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_reg_2t)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
]


DEVICE cfmom_mx_4t fmom14_mx_reg_4t mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2)  <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
]


DEVICE cfmom_wo_rf fmom14_rf_reg_nw M4(PLUS) M4(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_rf_reg_nw)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom14_rf_reg_pw M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_rf_reg_pw)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom14_rf_reg_ntn M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_rf_reg_ntn)/ nr
    ftip = area(mom14_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom14_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom14_rf_reg_nw_dm M4(PLUS) M4(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom14_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_rf_reg_nw_dm)/ nr
    ftip = area(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom14_rf_reg_pw_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_rf_reg_pw_dm)/ nr
    ftip = area(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom14_rf_reg_ntn_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom14_rf_reg_ntn_dm)/ nr
    ftip = area(mom14_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom14_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 4
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom14_mx_reg_n mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    dmflag = 0
]
DEVICE cfmom_mx fmom14_mx_reg_p mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom14_mx_reg_nw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom14_mx_reg_pw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom14_mx_reg_ntn mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom14_mx_reg_n_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom14_mx_reg_p_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom14_mx_reg_nw_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom14_mx_reg_pw_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom14_mx_reg_ntn_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom14_mx_aux> <M4> <mom14_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom14_mx_aux)/ (nr*mf1)
    ftip = area(mom14_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom14_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 4
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom15_1 = MOMDMY5 INTERACT MOM_field1

mom15_2 = mom15_1 INTERACT MOM_field2

mom15_3 = mom15_2 INTERACT MOM_field3

mom15_4 = mom15_3 INTERACT MOM_field4

mom15_5 = mom15_4 INTERACT MOM_field5


mom15_idt = MOM_field5 NOT MOM_field4

mom15_Left6 = mom15_5 NOT INTERACT MOM_field6
mom15_Left7 = mom15_Left6 NOT INTERACT MOM_field7
mom15_Left8 = mom15_Left7 NOT INTERACT MOM_field8



mom15_reg1     = mom15_Left8 INTERACT mom15_idt
mom15_reg2     = mom15_reg1 INTERACT MOMDMY0
mom15_reg3     = mom15_reg2 NOT INTERACT MOMDMY22
mom15_reg4     = mom15_reg3 NOT INTERACT RFDMY
mom15_reg5     = mom15_reg4 NOT INTERACT MOMDMY27
mom15_reg6     = mom15_reg5 NOT INTERACT MOMDMY31
mom15_reg7     = mom15_reg6 NOT INTERACT MOMDMY32
mom15_reg      = mom15_reg7 NOT INTERACT MOMDMY33
 
mom15_reg_n    = mom15_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom15_reg_p    = mom15_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom15_reg_2t   = mom15_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom15_reg_nw1  = mom15_reg5 INTERACT MOMDMY31
mom15_reg_nw   = mom15_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom15_reg_pw1  = mom15_reg6 INTERACT MOMDMY32
mom15_reg_pw   = mom15_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom15_reg_ntn1 = mom15_reg7 INTERACT MOMDMY33
mom15_reg_ntn  = mom15_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom15_mx_reg1  = MOMDMY22 INTERACT mom15_Left8
mom15_mx_reg2  = mom15_mx_reg1 INTERACT mom15_idt
mom15_mx_reg3  = mom15_mx_reg2 INTERACT MOMDMY0
mom15_mx_reg   = mom15_mx_reg3 INTERACT poly


fmom15_reg1        = mom15_Left8 NOT INTERACT mom15_idt
fmom15_reg2        = fmom15_reg1 INTERACT MOMDMY100
fmom15_reg3        = fmom15_reg2 NOT INTERACT MOMDMY22
fmom15_reg4        = fmom15_reg3 NOT INTERACT RFDMY
fmom15_reg5        = fmom15_reg4 NOT INTERACT MOMDMY27
fmom15_reg6        = fmom15_reg5 NOT INTERACT MOMDMY31
fmom15_reg7        = fmom15_reg6 NOT INTERACT MOMDMY32
fmom15_reg         = fmom15_reg7 NOT INTERACT MOMDMY33
 
fmom15_reg_n1      = fmom15_reg INTERACT n_poly                    
fmom15_reg_n       = fmom15_reg_n1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi N+poly shield wo DM
fmom15_reg_n_dm    = fmom15_reg_n1 INTERACT MOM_dmetal1_0           // FMOM 3T wi N+poly shield wi DM

fmom15_reg_p1      = fmom15_reg INTERACT p_poly                     
fmom15_reg_p       = fmom15_reg_p1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi P+poly shield wo DM
fmom15_reg_p_dm    = fmom15_reg_p1 INTERACT MOM_dmetal1_0           // FMOM 3T wi P+poly shield wi DM

fmom15_reg_2t      = fmom15_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom15_reg_nw1     = fmom15_reg5 INTERACT MOMDMY31
fmom15_reg_nw2     = fmom15_reg_nw1 INTERACT nxwell
fmom15_reg_nw      = fmom15_reg_nw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi NW shield wo DM
fmom15_reg_nw_dm   = fmom15_reg_nw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi NW shield wi DM
 
fmom15_reg_pw1     = fmom15_reg6 INTERACT MOMDMY32
fmom15_reg_pw2     = fmom15_reg_pw1 INTERACT psub
fmom15_reg_pw      = fmom15_reg_pw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi PW shield wo DM
fmom15_reg_pw_dm   = fmom15_reg_pw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi PW shield wi DM

fmom15_reg_ntn1    = fmom15_reg7 INTERACT MOMDMY33
fmom15_reg_ntn2    = fmom15_reg_ntn1 INTERACT NT_N
fmom15_reg_ntn3    = fmom15_reg_ntn2 NOT INTERACT MOMDMY28
fmom15_reg_ntn     = fmom15_reg_ntn3 NOT INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo DM
fmom15_reg_ntn_dm  = fmom15_reg_ntn3 INTERACT MOM_dmetal1_0         // FMOM 3T wi NTN shield wi DM

fmom15_reg_ntn_wo_pring1   = fmom15_reg_ntn2 INTERACT MOMDMY28             
fmom15_reg_ntn_wo_pring    = fmom15_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_0 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom15_reg_ntn_wo_pring_dm = fmom15_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom15_mx_reg1     = MOMDMY22 INTERACT mom15_Left8
fmom15_mx_reg2     = fmom15_mx_reg1 NOT INTERACT mom15_idt
fmom15_mx_reg3     = fmom15_mx_reg2 INTERACT MOMDMY100
fmom15_mx_reg4     = fmom15_mx_reg3 NOT INTERACT MOMDMY27
fmom15_mx_reg5     = fmom15_mx_reg4 NOT INTERACT MOMDMY31
fmom15_mx_reg6     = fmom15_mx_reg5 NOT INTERACT MOMDMY32
fmom15_mx_reg      = fmom15_mx_reg6 NOT INTERACT MOMDMY33

fmom15_mx_reg_n1   = fmom15_mx_reg  INTERACT n_poly
fmom15_mx_reg_n    = fmom15_mx_reg_n1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi N+poly shield wo DM
fmom15_mx_reg_n_dm = fmom15_mx_reg_n1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi N+poly shield wi DM

fmom15_mx_reg_p1   = fmom15_mx_reg  INTERACT p_poly
fmom15_mx_reg_p    = fmom15_mx_reg_p1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi P+poly shield wo DM
fmom15_mx_reg_p_dm = fmom15_mx_reg_p1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi P+poly shield wi DM

fmom15_mx_reg_4t   = fmom15_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom15_mx_reg_nw1   = fmom15_mx_reg4 INTERACT MOMDMY31              
fmom15_mx_reg_nw2   = fmom15_mx_reg_nw1 INTERACT nxwell              
fmom15_mx_reg_nw    = fmom15_mx_reg_nw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi NW shield wo DM
fmom15_mx_reg_nw_dm = fmom15_mx_reg_nw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi NW shield wi DM

fmom15_mx_reg_pw1   = fmom15_mx_reg5 INTERACT MOMDMY32
fmom15_mx_reg_pw2   = fmom15_mx_reg_pw1 INTERACT psub
fmom15_mx_reg_pw    = fmom15_mx_reg_pw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi PW shield wo DM
fmom15_mx_reg_pw_dm = fmom15_mx_reg_pw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi PW shield wi DM

fmom15_mx_reg_ntn1   = fmom15_mx_reg6 INTERACT MOMDMY33
fmom15_mx_reg_ntn2   = fmom15_mx_reg_ntn1 INTERACT NT_N
fmom15_mx_reg_ntn    = fmom15_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM MX 5T wi NTN shield wo DM
fmom15_mx_reg_ntn_dm = fmom15_mx_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM MX 5T wi NTN shield wi DM

fmom15_rf_reg1     = mom15_Left8 NOT INTERACT mom15_idt
fmom15_rf_reg2     = fmom15_rf_reg1 INTERACT MOMDMY100
fmom15_rf_reg3     = fmom15_rf_reg2 NOT INTERACT MOMDMY22
fmom15_rf_reg4     = fmom15_rf_reg3 INTERACT RFDMY
fmom15_rf_reg5     = fmom15_rf_reg4 NOT INTERACT MOMDMY27
fmom15_rf_reg6     = fmom15_rf_reg5 NOT INTERACT MOMDMY31
fmom15_rf_reg7     = fmom15_rf_reg6 NOT INTERACT MOMDMY32
fmom15_rf_reg8     = fmom15_rf_reg7 NOT INTERACT MOMDMY33

fmom15_rf_reg_nw1   = fmom15_rf_reg5 INTERACT MOMDMY31
fmom15_rf_reg_nw2   = fmom15_rf_reg_nw1 INTERACT nxwell              
fmom15_rf_reg_nw    = fmom15_rf_reg_nw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi NW shield wo DM
fmom15_rf_reg_nw_dm = fmom15_rf_reg_nw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi NW shield wi DM

fmom15_rf_reg_pw1   = fmom15_rf_reg6 INTERACT MOMDMY32
fmom15_rf_reg_pw2   = fmom15_rf_reg_pw1 INTERACT psub                
fmom15_rf_reg_pw    = fmom15_rf_reg_pw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi PW shield wo DM
fmom15_rf_reg_pw_dm = fmom15_rf_reg_pw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi PW shield wi DM

fmom15_rf_reg_ntn1   = fmom15_rf_reg7 INTERACT MOMDMY33
fmom15_rf_reg_ntn2   = fmom15_rf_reg_ntn1 INTERACT NT_N
fmom15_rf_reg_ntn    = fmom15_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM 3T RF wi NTN shield wo DM
fmom15_rf_reg_ntn_dm = fmom15_rf_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM 3T RF wi NTN shield wi DM

mom15_mx_aux   = mom15_Left8 AND MOMDMY22
mom15_extc = FM_tip5 NOT INTERACT MOM_field5 > 2

DEVICE cfmom fmom15_reg_n M5(PLUS) M5(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_n)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    dmflag = 0
]
DEVICE cfmom fmom15_reg_p M5(PLUS) M5(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_p)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    dmflag = 0
]
DEVICE cfmom fmom15_reg_n_dm M5(PLUS) M5(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom15_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_n_dm)/ nr
    ftip = area(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom15_reg_p_dm M5(PLUS) M5(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom15_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_p_dm)/ nr
    ftip = area(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom15_reg_nw M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_nw)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom15_reg_pw M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_pw)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom15_reg_ntn M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_ntn)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom15_reg_ntn_wo_pring M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_ntn_wo_pring)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom15_reg_nw_dm M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom15_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_nw_dm)/ nr
    ftip = area(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom15_reg_pw_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_pw_dm)/ nr
    ftip = area(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom15_reg_ntn_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_ntn_dm)/ nr
    ftip = area(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom15_reg_ntn_wo_pring_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom15_reg_2t M5(PLUS) M5(MINUS) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_reg_2t)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
]


DEVICE cfmom_mx_4t fmom15_mx_reg_4t mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2)  <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
]


DEVICE cfmom_wo_rf fmom15_rf_reg_nw M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_rf_reg_nw)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom15_rf_reg_pw M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_rf_reg_pw)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom15_rf_reg_ntn M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_rf_reg_ntn)/ nr
    ftip = area(mom15_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom15_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom15_rf_reg_nw_dm M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom15_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_rf_reg_nw_dm)/ nr
    ftip = area(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom15_rf_reg_pw_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_rf_reg_pw_dm)/ nr
    ftip = area(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom15_rf_reg_ntn_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom15_rf_reg_ntn_dm)/ nr
    ftip = area(mom15_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom15_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 5
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom15_mx_reg_n mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    dmflag = 0
]
DEVICE cfmom_mx fmom15_mx_reg_p mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom15_mx_reg_nw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom15_mx_reg_pw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom15_mx_reg_ntn mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom15_mx_reg_n_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom15_mx_reg_p_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom15_mx_reg_nw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom15_mx_reg_pw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom15_mx_reg_ntn_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom15_mx_aux> <M5> <mom15_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom15_mx_aux)/ (nr*mf1)
    ftip = area(mom15_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom15_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 5
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom16_1 = MOMDMY6 INTERACT MOM_field1

mom16_2 = mom16_1 INTERACT MOM_field2

mom16_3 = mom16_2 INTERACT MOM_field3

mom16_4 = mom16_3 INTERACT MOM_field4

mom16_5 = mom16_4 INTERACT MOM_field5

mom16_6 = mom16_5 INTERACT MOM_field6


mom16_idt = MOM_field6 NOT MOM_field5

mom16_Left7 = mom16_6 NOT INTERACT MOM_field7
mom16_Left8 = mom16_Left7 NOT INTERACT MOM_field8



mom16_reg1     = mom16_Left8 INTERACT mom16_idt
mom16_reg2     = mom16_reg1 INTERACT MOMDMY0
mom16_reg3     = mom16_reg2 NOT INTERACT MOMDMY22
mom16_reg4     = mom16_reg3 NOT INTERACT RFDMY
mom16_reg5     = mom16_reg4 NOT INTERACT MOMDMY27
mom16_reg6     = mom16_reg5 NOT INTERACT MOMDMY31
mom16_reg7     = mom16_reg6 NOT INTERACT MOMDMY32
mom16_reg      = mom16_reg7 NOT INTERACT MOMDMY33
 
mom16_reg_n    = mom16_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom16_reg_p    = mom16_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom16_reg_2t   = mom16_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom16_reg_nw1  = mom16_reg5 INTERACT MOMDMY31
mom16_reg_nw   = mom16_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom16_reg_pw1  = mom16_reg6 INTERACT MOMDMY32
mom16_reg_pw   = mom16_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom16_reg_ntn1 = mom16_reg7 INTERACT MOMDMY33
mom16_reg_ntn  = mom16_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom16_mx_reg1  = MOMDMY22 INTERACT mom16_Left8
mom16_mx_reg2  = mom16_mx_reg1 INTERACT mom16_idt
mom16_mx_reg3  = mom16_mx_reg2 INTERACT MOMDMY0
mom16_mx_reg   = mom16_mx_reg3 INTERACT poly


fmom16_reg1        = mom16_Left8 NOT INTERACT mom16_idt
fmom16_reg2        = fmom16_reg1 INTERACT MOMDMY100
fmom16_reg3        = fmom16_reg2 NOT INTERACT MOMDMY22
fmom16_reg4        = fmom16_reg3 NOT INTERACT RFDMY
fmom16_reg5        = fmom16_reg4 NOT INTERACT MOMDMY27
fmom16_reg6        = fmom16_reg5 NOT INTERACT MOMDMY31
fmom16_reg7        = fmom16_reg6 NOT INTERACT MOMDMY32
fmom16_reg         = fmom16_reg7 NOT INTERACT MOMDMY33
 
fmom16_reg_n1      = fmom16_reg INTERACT n_poly                    
fmom16_reg_n       = fmom16_reg_n1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi N+poly shield wo DM
fmom16_reg_n_dm    = fmom16_reg_n1 INTERACT MOM_dmetal1_0           // FMOM 3T wi N+poly shield wi DM

fmom16_reg_p1      = fmom16_reg INTERACT p_poly                     
fmom16_reg_p       = fmom16_reg_p1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi P+poly shield wo DM
fmom16_reg_p_dm    = fmom16_reg_p1 INTERACT MOM_dmetal1_0           // FMOM 3T wi P+poly shield wi DM

fmom16_reg_2t      = fmom16_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom16_reg_nw1     = fmom16_reg5 INTERACT MOMDMY31
fmom16_reg_nw2     = fmom16_reg_nw1 INTERACT nxwell
fmom16_reg_nw      = fmom16_reg_nw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi NW shield wo DM
fmom16_reg_nw_dm   = fmom16_reg_nw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi NW shield wi DM
 
fmom16_reg_pw1     = fmom16_reg6 INTERACT MOMDMY32
fmom16_reg_pw2     = fmom16_reg_pw1 INTERACT psub
fmom16_reg_pw      = fmom16_reg_pw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi PW shield wo DM
fmom16_reg_pw_dm   = fmom16_reg_pw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi PW shield wi DM

fmom16_reg_ntn1    = fmom16_reg7 INTERACT MOMDMY33
fmom16_reg_ntn2    = fmom16_reg_ntn1 INTERACT NT_N
fmom16_reg_ntn3    = fmom16_reg_ntn2 NOT INTERACT MOMDMY28
fmom16_reg_ntn     = fmom16_reg_ntn3 NOT INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo DM
fmom16_reg_ntn_dm  = fmom16_reg_ntn3 INTERACT MOM_dmetal1_0         // FMOM 3T wi NTN shield wi DM

fmom16_reg_ntn_wo_pring1   = fmom16_reg_ntn2 INTERACT MOMDMY28             
fmom16_reg_ntn_wo_pring    = fmom16_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_0 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom16_reg_ntn_wo_pring_dm = fmom16_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom16_mx_reg1     = MOMDMY22 INTERACT mom16_Left8
fmom16_mx_reg2     = fmom16_mx_reg1 NOT INTERACT mom16_idt
fmom16_mx_reg3     = fmom16_mx_reg2 INTERACT MOMDMY100
fmom16_mx_reg4     = fmom16_mx_reg3 NOT INTERACT MOMDMY27
fmom16_mx_reg5     = fmom16_mx_reg4 NOT INTERACT MOMDMY31
fmom16_mx_reg6     = fmom16_mx_reg5 NOT INTERACT MOMDMY32
fmom16_mx_reg      = fmom16_mx_reg6 NOT INTERACT MOMDMY33

fmom16_mx_reg_n1   = fmom16_mx_reg  INTERACT n_poly
fmom16_mx_reg_n    = fmom16_mx_reg_n1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi N+poly shield wo DM
fmom16_mx_reg_n_dm = fmom16_mx_reg_n1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi N+poly shield wi DM

fmom16_mx_reg_p1   = fmom16_mx_reg  INTERACT p_poly
fmom16_mx_reg_p    = fmom16_mx_reg_p1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi P+poly shield wo DM
fmom16_mx_reg_p_dm = fmom16_mx_reg_p1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi P+poly shield wi DM

fmom16_mx_reg_4t   = fmom16_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom16_mx_reg_nw1   = fmom16_mx_reg4 INTERACT MOMDMY31              
fmom16_mx_reg_nw2   = fmom16_mx_reg_nw1 INTERACT nxwell              
fmom16_mx_reg_nw    = fmom16_mx_reg_nw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi NW shield wo DM
fmom16_mx_reg_nw_dm = fmom16_mx_reg_nw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi NW shield wi DM

fmom16_mx_reg_pw1   = fmom16_mx_reg5 INTERACT MOMDMY32
fmom16_mx_reg_pw2   = fmom16_mx_reg_pw1 INTERACT psub
fmom16_mx_reg_pw    = fmom16_mx_reg_pw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi PW shield wo DM
fmom16_mx_reg_pw_dm = fmom16_mx_reg_pw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi PW shield wi DM

fmom16_mx_reg_ntn1   = fmom16_mx_reg6 INTERACT MOMDMY33
fmom16_mx_reg_ntn2   = fmom16_mx_reg_ntn1 INTERACT NT_N
fmom16_mx_reg_ntn    = fmom16_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM MX 5T wi NTN shield wo DM
fmom16_mx_reg_ntn_dm = fmom16_mx_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM MX 5T wi NTN shield wi DM

fmom16_rf_reg1     = mom16_Left8 NOT INTERACT mom16_idt
fmom16_rf_reg2     = fmom16_rf_reg1 INTERACT MOMDMY100
fmom16_rf_reg3     = fmom16_rf_reg2 NOT INTERACT MOMDMY22
fmom16_rf_reg4     = fmom16_rf_reg3 INTERACT RFDMY
fmom16_rf_reg5     = fmom16_rf_reg4 NOT INTERACT MOMDMY27
fmom16_rf_reg6     = fmom16_rf_reg5 NOT INTERACT MOMDMY31
fmom16_rf_reg7     = fmom16_rf_reg6 NOT INTERACT MOMDMY32
fmom16_rf_reg8     = fmom16_rf_reg7 NOT INTERACT MOMDMY33

fmom16_rf_reg_nw1   = fmom16_rf_reg5 INTERACT MOMDMY31
fmom16_rf_reg_nw2   = fmom16_rf_reg_nw1 INTERACT nxwell              
fmom16_rf_reg_nw    = fmom16_rf_reg_nw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi NW shield wo DM
fmom16_rf_reg_nw_dm = fmom16_rf_reg_nw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi NW shield wi DM

fmom16_rf_reg_pw1   = fmom16_rf_reg6 INTERACT MOMDMY32
fmom16_rf_reg_pw2   = fmom16_rf_reg_pw1 INTERACT psub                
fmom16_rf_reg_pw    = fmom16_rf_reg_pw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi PW shield wo DM
fmom16_rf_reg_pw_dm = fmom16_rf_reg_pw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi PW shield wi DM

fmom16_rf_reg_ntn1   = fmom16_rf_reg7 INTERACT MOMDMY33
fmom16_rf_reg_ntn2   = fmom16_rf_reg_ntn1 INTERACT NT_N
fmom16_rf_reg_ntn    = fmom16_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM 3T RF wi NTN shield wo DM
fmom16_rf_reg_ntn_dm = fmom16_rf_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM 3T RF wi NTN shield wi DM

mom16_mx_aux   = mom16_Left8 AND MOMDMY22
mom16_extc = FM_tip6 NOT INTERACT MOM_field6 > 2

DEVICE cfmom fmom16_reg_n M6(PLUS) M6(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_n)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    dmflag = 0
]
DEVICE cfmom fmom16_reg_p M6(PLUS) M6(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_p)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    dmflag = 0
]
DEVICE cfmom fmom16_reg_n_dm M6(PLUS) M6(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom16_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_n_dm)/ nr
    ftip = area(mom16_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom16_reg_p_dm M6(PLUS) M6(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom16_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_p_dm)/ nr
    ftip = area(mom16_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom16_reg_nw M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_nw)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom16_reg_pw M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_pw)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom16_reg_ntn M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_ntn)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom16_reg_ntn_wo_pring M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_ntn_wo_pring)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom16_reg_nw_dm M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom16_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_nw_dm)/ nr
    ftip = area(mom16_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom16_reg_pw_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_pw_dm)/ nr
    ftip = area(mom16_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom16_reg_ntn_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_ntn_dm)/ nr
    ftip = area(mom16_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom16_reg_ntn_wo_pring_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom16_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom16_reg_2t M6(PLUS) M6(MINUS) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_reg_2t)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
]


DEVICE cfmom_mx_4t fmom16_mx_reg_4t mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2)  <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
]


DEVICE cfmom_wo_rf fmom16_rf_reg_nw M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_rf_reg_nw)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom16_rf_reg_pw M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_rf_reg_pw)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom16_rf_reg_ntn M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_rf_reg_ntn)/ nr
    ftip = area(mom16_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom16_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom16_rf_reg_nw_dm M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom16_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_rf_reg_nw_dm)/ nr
    ftip = area(mom16_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom16_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom16_rf_reg_pw_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_rf_reg_pw_dm)/ nr
    ftip = area(mom16_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom16_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom16_rf_reg_ntn_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom16_rf_reg_ntn_dm)/ nr
    ftip = area(mom16_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom16_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 6
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom16_mx_reg_n mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    dmflag = 0
]
DEVICE cfmom_mx fmom16_mx_reg_p mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom16_mx_reg_nw mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom16_mx_reg_pw mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom16_mx_reg_ntn mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom16_mx_reg_n_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom16_mx_reg_p_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom16_mx_reg_nw_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom16_mx_reg_pw_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom16_mx_reg_ntn_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom16_mx_aux> <M6> <mom16_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom16_mx_aux)/ (nr*mf1)
    ftip = area(mom16_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom16_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 6
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom17_1 = MOMDMY7 INTERACT MOM_field1

mom17_2 = mom17_1 INTERACT MOM_field2

mom17_3 = mom17_2 INTERACT MOM_field3

mom17_4 = mom17_3 INTERACT MOM_field4

mom17_5 = mom17_4 INTERACT MOM_field5

mom17_6 = mom17_5 INTERACT MOM_field6

mom17_7 = mom17_6 INTERACT MOM_field7


mom17_idt = MOM_field7 NOT MOM_field6

mom17_Left8 = mom17_7 NOT INTERACT MOM_field8



mom17_reg1     = mom17_Left8 INTERACT mom17_idt
mom17_reg2     = mom17_reg1 INTERACT MOMDMY0
mom17_reg3     = mom17_reg2 NOT INTERACT MOMDMY22
mom17_reg4     = mom17_reg3 NOT INTERACT RFDMY
mom17_reg5     = mom17_reg4 NOT INTERACT MOMDMY27
mom17_reg6     = mom17_reg5 NOT INTERACT MOMDMY31
mom17_reg7     = mom17_reg6 NOT INTERACT MOMDMY32
mom17_reg      = mom17_reg7 NOT INTERACT MOMDMY33
 
mom17_reg_n    = mom17_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom17_reg_p    = mom17_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom17_reg_2t   = mom17_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom17_reg_nw1  = mom17_reg5 INTERACT MOMDMY31
mom17_reg_nw   = mom17_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom17_reg_pw1  = mom17_reg6 INTERACT MOMDMY32
mom17_reg_pw   = mom17_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom17_reg_ntn1 = mom17_reg7 INTERACT MOMDMY33
mom17_reg_ntn  = mom17_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom17_mx_reg1  = MOMDMY22 INTERACT mom17_Left8
mom17_mx_reg2  = mom17_mx_reg1 INTERACT mom17_idt
mom17_mx_reg3  = mom17_mx_reg2 INTERACT MOMDMY0
mom17_mx_reg   = mom17_mx_reg3 INTERACT poly


fmom17_reg1        = mom17_Left8 NOT INTERACT mom17_idt
fmom17_reg2        = fmom17_reg1 INTERACT MOMDMY100
fmom17_reg3        = fmom17_reg2 NOT INTERACT MOMDMY22
fmom17_reg4        = fmom17_reg3 NOT INTERACT RFDMY
fmom17_reg5        = fmom17_reg4 NOT INTERACT MOMDMY27
fmom17_reg6        = fmom17_reg5 NOT INTERACT MOMDMY31
fmom17_reg7        = fmom17_reg6 NOT INTERACT MOMDMY32
fmom17_reg         = fmom17_reg7 NOT INTERACT MOMDMY33
 
fmom17_reg_n1      = fmom17_reg INTERACT n_poly                    
fmom17_reg_n       = fmom17_reg_n1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi N+poly shield wo DM
fmom17_reg_n_dm    = fmom17_reg_n1 INTERACT MOM_dmetal1_0           // FMOM 3T wi N+poly shield wi DM

fmom17_reg_p1      = fmom17_reg INTERACT p_poly                     
fmom17_reg_p       = fmom17_reg_p1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi P+poly shield wo DM
fmom17_reg_p_dm    = fmom17_reg_p1 INTERACT MOM_dmetal1_0           // FMOM 3T wi P+poly shield wi DM

fmom17_reg_2t      = fmom17_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom17_reg_nw1     = fmom17_reg5 INTERACT MOMDMY31
fmom17_reg_nw2     = fmom17_reg_nw1 INTERACT nxwell
fmom17_reg_nw      = fmom17_reg_nw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi NW shield wo DM
fmom17_reg_nw_dm   = fmom17_reg_nw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi NW shield wi DM
 
fmom17_reg_pw1     = fmom17_reg6 INTERACT MOMDMY32
fmom17_reg_pw2     = fmom17_reg_pw1 INTERACT psub
fmom17_reg_pw      = fmom17_reg_pw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi PW shield wo DM
fmom17_reg_pw_dm   = fmom17_reg_pw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi PW shield wi DM

fmom17_reg_ntn1    = fmom17_reg7 INTERACT MOMDMY33
fmom17_reg_ntn2    = fmom17_reg_ntn1 INTERACT NT_N
fmom17_reg_ntn3    = fmom17_reg_ntn2 NOT INTERACT MOMDMY28
fmom17_reg_ntn     = fmom17_reg_ntn3 NOT INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo DM
fmom17_reg_ntn_dm  = fmom17_reg_ntn3 INTERACT MOM_dmetal1_0         // FMOM 3T wi NTN shield wi DM

fmom17_reg_ntn_wo_pring1   = fmom17_reg_ntn2 INTERACT MOMDMY28             
fmom17_reg_ntn_wo_pring    = fmom17_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_0 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom17_reg_ntn_wo_pring_dm = fmom17_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom17_mx_reg1     = MOMDMY22 INTERACT mom17_Left8
fmom17_mx_reg2     = fmom17_mx_reg1 NOT INTERACT mom17_idt
fmom17_mx_reg3     = fmom17_mx_reg2 INTERACT MOMDMY100
fmom17_mx_reg4     = fmom17_mx_reg3 NOT INTERACT MOMDMY27
fmom17_mx_reg5     = fmom17_mx_reg4 NOT INTERACT MOMDMY31
fmom17_mx_reg6     = fmom17_mx_reg5 NOT INTERACT MOMDMY32
fmom17_mx_reg      = fmom17_mx_reg6 NOT INTERACT MOMDMY33

fmom17_mx_reg_n1   = fmom17_mx_reg  INTERACT n_poly
fmom17_mx_reg_n    = fmom17_mx_reg_n1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi N+poly shield wo DM
fmom17_mx_reg_n_dm = fmom17_mx_reg_n1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi N+poly shield wi DM

fmom17_mx_reg_p1   = fmom17_mx_reg  INTERACT p_poly
fmom17_mx_reg_p    = fmom17_mx_reg_p1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi P+poly shield wo DM
fmom17_mx_reg_p_dm = fmom17_mx_reg_p1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi P+poly shield wi DM

fmom17_mx_reg_4t   = fmom17_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom17_mx_reg_nw1   = fmom17_mx_reg4 INTERACT MOMDMY31              
fmom17_mx_reg_nw2   = fmom17_mx_reg_nw1 INTERACT nxwell              
fmom17_mx_reg_nw    = fmom17_mx_reg_nw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi NW shield wo DM
fmom17_mx_reg_nw_dm = fmom17_mx_reg_nw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi NW shield wi DM

fmom17_mx_reg_pw1   = fmom17_mx_reg5 INTERACT MOMDMY32
fmom17_mx_reg_pw2   = fmom17_mx_reg_pw1 INTERACT psub
fmom17_mx_reg_pw    = fmom17_mx_reg_pw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi PW shield wo DM
fmom17_mx_reg_pw_dm = fmom17_mx_reg_pw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi PW shield wi DM

fmom17_mx_reg_ntn1   = fmom17_mx_reg6 INTERACT MOMDMY33
fmom17_mx_reg_ntn2   = fmom17_mx_reg_ntn1 INTERACT NT_N
fmom17_mx_reg_ntn    = fmom17_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM MX 5T wi NTN shield wo DM
fmom17_mx_reg_ntn_dm = fmom17_mx_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM MX 5T wi NTN shield wi DM

fmom17_rf_reg1     = mom17_Left8 NOT INTERACT mom17_idt
fmom17_rf_reg2     = fmom17_rf_reg1 INTERACT MOMDMY100
fmom17_rf_reg3     = fmom17_rf_reg2 NOT INTERACT MOMDMY22
fmom17_rf_reg4     = fmom17_rf_reg3 INTERACT RFDMY
fmom17_rf_reg5     = fmom17_rf_reg4 NOT INTERACT MOMDMY27
fmom17_rf_reg6     = fmom17_rf_reg5 NOT INTERACT MOMDMY31
fmom17_rf_reg7     = fmom17_rf_reg6 NOT INTERACT MOMDMY32
fmom17_rf_reg8     = fmom17_rf_reg7 NOT INTERACT MOMDMY33

fmom17_rf_reg_nw1   = fmom17_rf_reg5 INTERACT MOMDMY31
fmom17_rf_reg_nw2   = fmom17_rf_reg_nw1 INTERACT nxwell              
fmom17_rf_reg_nw    = fmom17_rf_reg_nw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi NW shield wo DM
fmom17_rf_reg_nw_dm = fmom17_rf_reg_nw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi NW shield wi DM

fmom17_rf_reg_pw1   = fmom17_rf_reg6 INTERACT MOMDMY32
fmom17_rf_reg_pw2   = fmom17_rf_reg_pw1 INTERACT psub                
fmom17_rf_reg_pw    = fmom17_rf_reg_pw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi PW shield wo DM
fmom17_rf_reg_pw_dm = fmom17_rf_reg_pw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi PW shield wi DM

fmom17_rf_reg_ntn1   = fmom17_rf_reg7 INTERACT MOMDMY33
fmom17_rf_reg_ntn2   = fmom17_rf_reg_ntn1 INTERACT NT_N
fmom17_rf_reg_ntn    = fmom17_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM 3T RF wi NTN shield wo DM
fmom17_rf_reg_ntn_dm = fmom17_rf_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM 3T RF wi NTN shield wi DM

mom17_mx_aux   = mom17_Left8 AND MOMDMY22
mom17_extc = FM_tip7 NOT INTERACT MOM_field7 > 2

DEVICE cfmom fmom17_reg_n M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_n)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom17_reg_p M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_p)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom17_reg_n_dm M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom17_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_n_dm)/ nr
    ftip = area(mom17_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom17_reg_p_dm M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom17_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_p_dm)/ nr
    ftip = area(mom17_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom17_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_nw)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom17_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_pw)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom17_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_ntn)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom17_reg_ntn_wo_pring M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_ntn_wo_pring)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom17_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom17_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_nw_dm)/ nr
    ftip = area(mom17_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom17_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_pw_dm)/ nr
    ftip = area(mom17_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom17_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_ntn_dm)/ nr
    ftip = area(mom17_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom17_reg_ntn_wo_pring_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom17_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom17_reg_2t M7(PLUS) M7(MINUS) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_reg_2t)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
]


DEVICE cfmom_mx_4t fmom17_mx_reg_4t mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2)  <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
]


DEVICE cfmom_wo_rf fmom17_rf_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_rf_reg_nw)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom17_rf_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_rf_reg_pw)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom17_rf_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_rf_reg_ntn)/ nr
    ftip = area(mom17_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom17_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom17_rf_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom17_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_rf_reg_nw_dm)/ nr
    ftip = area(mom17_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom17_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom17_rf_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_rf_reg_pw_dm)/ nr
    ftip = area(mom17_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom17_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom17_rf_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom17_rf_reg_ntn_dm)/ nr
    ftip = area(mom17_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom17_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 7
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom17_mx_reg_n mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    dmflag = 0
]
DEVICE cfmom_mx fmom17_mx_reg_p mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom17_mx_reg_nw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom17_mx_reg_pw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom17_mx_reg_ntn mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom17_mx_reg_n_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom17_mx_reg_p_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom17_mx_reg_nw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom17_mx_reg_pw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom17_mx_reg_ntn_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom17_mx_aux> <M7> <mom17_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom17_mx_aux)/ (nr*mf1)
    ftip = area(mom17_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom17_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 7
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom18_1 = MOMDMY8 INTERACT MOM_field1

mom18_2 = mom18_1 INTERACT MOM_field2

mom18_3 = mom18_2 INTERACT MOM_field3

mom18_4 = mom18_3 INTERACT MOM_field4

mom18_5 = mom18_4 INTERACT MOM_field5

mom18_6 = mom18_5 INTERACT MOM_field6

mom18_7 = mom18_6 INTERACT MOM_field7

mom18_8 = mom18_7 INTERACT MOM_field8


mom18_idt = MOM_field8 NOT MOM_field7




mom18_reg1     = mom18_8 INTERACT mom18_idt
mom18_reg2     = mom18_reg1 INTERACT MOMDMY0
mom18_reg3     = mom18_reg2 NOT INTERACT MOMDMY22
mom18_reg4     = mom18_reg3 NOT INTERACT RFDMY
mom18_reg5     = mom18_reg4 NOT INTERACT MOMDMY27
mom18_reg6     = mom18_reg5 NOT INTERACT MOMDMY31
mom18_reg7     = mom18_reg6 NOT INTERACT MOMDMY32
mom18_reg      = mom18_reg7 NOT INTERACT MOMDMY33
 
mom18_reg_n    = mom18_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom18_reg_p    = mom18_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom18_reg_2t   = mom18_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom18_reg_nw1  = mom18_reg5 INTERACT MOMDMY31
mom18_reg_nw   = mom18_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom18_reg_pw1  = mom18_reg6 INTERACT MOMDMY32
mom18_reg_pw   = mom18_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom18_reg_ntn1 = mom18_reg7 INTERACT MOMDMY33
mom18_reg_ntn  = mom18_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom18_mx_reg1  = MOMDMY22 INTERACT mom18_8
mom18_mx_reg2  = mom18_mx_reg1 INTERACT mom18_idt
mom18_mx_reg3  = mom18_mx_reg2 INTERACT MOMDMY0
mom18_mx_reg   = mom18_mx_reg3 INTERACT poly


fmom18_reg1        = mom18_8 NOT INTERACT mom18_idt
fmom18_reg2        = fmom18_reg1 INTERACT MOMDMY100
fmom18_reg3        = fmom18_reg2 NOT INTERACT MOMDMY22
fmom18_reg4        = fmom18_reg3 NOT INTERACT RFDMY
fmom18_reg5        = fmom18_reg4 NOT INTERACT MOMDMY27
fmom18_reg6        = fmom18_reg5 NOT INTERACT MOMDMY31
fmom18_reg7        = fmom18_reg6 NOT INTERACT MOMDMY32
fmom18_reg         = fmom18_reg7 NOT INTERACT MOMDMY33
 
fmom18_reg_n1      = fmom18_reg INTERACT n_poly                    
fmom18_reg_n       = fmom18_reg_n1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi N+poly shield wo DM
fmom18_reg_n_dm    = fmom18_reg_n1 INTERACT MOM_dmetal1_0           // FMOM 3T wi N+poly shield wi DM

fmom18_reg_p1      = fmom18_reg INTERACT p_poly                     
fmom18_reg_p       = fmom18_reg_p1 NOT INTERACT MOM_dmetal1_0       // FMOM 3T wi P+poly shield wo DM
fmom18_reg_p_dm    = fmom18_reg_p1 INTERACT MOM_dmetal1_0           // FMOM 3T wi P+poly shield wi DM

fmom18_reg_2t      = fmom18_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom18_reg_nw1     = fmom18_reg5 INTERACT MOMDMY31
fmom18_reg_nw2     = fmom18_reg_nw1 INTERACT nxwell
fmom18_reg_nw      = fmom18_reg_nw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi NW shield wo DM
fmom18_reg_nw_dm   = fmom18_reg_nw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi NW shield wi DM
 
fmom18_reg_pw1     = fmom18_reg6 INTERACT MOMDMY32
fmom18_reg_pw2     = fmom18_reg_pw1 INTERACT psub
fmom18_reg_pw      = fmom18_reg_pw2 NOT INTERACT MOM_dmetal1_0      // FMOM 3T wi PW shield wo DM
fmom18_reg_pw_dm   = fmom18_reg_pw2 INTERACT MOM_dmetal1_0          // FMOM 3T wi PW shield wi DM

fmom18_reg_ntn1    = fmom18_reg7 INTERACT MOMDMY33
fmom18_reg_ntn2    = fmom18_reg_ntn1 INTERACT NT_N
fmom18_reg_ntn3    = fmom18_reg_ntn2 NOT INTERACT MOMDMY28
fmom18_reg_ntn     = fmom18_reg_ntn3 NOT INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo DM
fmom18_reg_ntn_dm  = fmom18_reg_ntn3 INTERACT MOM_dmetal1_0         // FMOM 3T wi NTN shield wi DM

fmom18_reg_ntn_wo_pring1   = fmom18_reg_ntn2 INTERACT MOMDMY28             
fmom18_reg_ntn_wo_pring    = fmom18_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_0 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom18_reg_ntn_wo_pring_dm = fmom18_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_0     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom18_mx_reg1     = MOMDMY22 INTERACT mom18_8
fmom18_mx_reg2     = fmom18_mx_reg1 NOT INTERACT mom18_idt
fmom18_mx_reg3     = fmom18_mx_reg2 INTERACT MOMDMY100
fmom18_mx_reg4     = fmom18_mx_reg3 NOT INTERACT MOMDMY27
fmom18_mx_reg5     = fmom18_mx_reg4 NOT INTERACT MOMDMY31
fmom18_mx_reg6     = fmom18_mx_reg5 NOT INTERACT MOMDMY32
fmom18_mx_reg      = fmom18_mx_reg6 NOT INTERACT MOMDMY33

fmom18_mx_reg_n1   = fmom18_mx_reg  INTERACT n_poly
fmom18_mx_reg_n    = fmom18_mx_reg_n1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi N+poly shield wo DM
fmom18_mx_reg_n_dm = fmom18_mx_reg_n1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi N+poly shield wi DM

fmom18_mx_reg_p1   = fmom18_mx_reg  INTERACT p_poly
fmom18_mx_reg_p    = fmom18_mx_reg_p1 NOT INTERACT MOM_dmetal1_0    // FMOM MX 5T wi P+poly shield wo DM
fmom18_mx_reg_p_dm = fmom18_mx_reg_p1 INTERACT MOM_dmetal1_0        // FMOM MX 5T wi P+poly shield wi DM

fmom18_mx_reg_4t   = fmom18_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom18_mx_reg_nw1   = fmom18_mx_reg4 INTERACT MOMDMY31              
fmom18_mx_reg_nw2   = fmom18_mx_reg_nw1 INTERACT nxwell              
fmom18_mx_reg_nw    = fmom18_mx_reg_nw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi NW shield wo DM
fmom18_mx_reg_nw_dm = fmom18_mx_reg_nw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi NW shield wi DM

fmom18_mx_reg_pw1   = fmom18_mx_reg5 INTERACT MOMDMY32
fmom18_mx_reg_pw2   = fmom18_mx_reg_pw1 INTERACT psub
fmom18_mx_reg_pw    = fmom18_mx_reg_pw2 NOT INTERACT MOM_dmetal1_0  // FMOM MX 5T wi PW shield wo DM
fmom18_mx_reg_pw_dm = fmom18_mx_reg_pw2 INTERACT MOM_dmetal1_0      // FMOM MX 5T wi PW shield wi DM

fmom18_mx_reg_ntn1   = fmom18_mx_reg6 INTERACT MOMDMY33
fmom18_mx_reg_ntn2   = fmom18_mx_reg_ntn1 INTERACT NT_N
fmom18_mx_reg_ntn    = fmom18_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM MX 5T wi NTN shield wo DM
fmom18_mx_reg_ntn_dm = fmom18_mx_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM MX 5T wi NTN shield wi DM

fmom18_rf_reg1     = mom18_8 NOT INTERACT mom18_idt
fmom18_rf_reg2     = fmom18_rf_reg1 INTERACT MOMDMY100
fmom18_rf_reg3     = fmom18_rf_reg2 NOT INTERACT MOMDMY22
fmom18_rf_reg4     = fmom18_rf_reg3 INTERACT RFDMY
fmom18_rf_reg5     = fmom18_rf_reg4 NOT INTERACT MOMDMY27
fmom18_rf_reg6     = fmom18_rf_reg5 NOT INTERACT MOMDMY31
fmom18_rf_reg7     = fmom18_rf_reg6 NOT INTERACT MOMDMY32
fmom18_rf_reg8     = fmom18_rf_reg7 NOT INTERACT MOMDMY33

fmom18_rf_reg_nw1   = fmom18_rf_reg5 INTERACT MOMDMY31
fmom18_rf_reg_nw2   = fmom18_rf_reg_nw1 INTERACT nxwell              
fmom18_rf_reg_nw    = fmom18_rf_reg_nw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi NW shield wo DM
fmom18_rf_reg_nw_dm = fmom18_rf_reg_nw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi NW shield wi DM

fmom18_rf_reg_pw1   = fmom18_rf_reg6 INTERACT MOMDMY32
fmom18_rf_reg_pw2   = fmom18_rf_reg_pw1 INTERACT psub                
fmom18_rf_reg_pw    = fmom18_rf_reg_pw2 NOT INTERACT MOM_dmetal1_0   // FMOM 3T RF wi PW shield wo DM
fmom18_rf_reg_pw_dm = fmom18_rf_reg_pw2 INTERACT MOM_dmetal1_0       // FMOM 3T RF wi PW shield wi DM

fmom18_rf_reg_ntn1   = fmom18_rf_reg7 INTERACT MOMDMY33
fmom18_rf_reg_ntn2   = fmom18_rf_reg_ntn1 INTERACT NT_N
fmom18_rf_reg_ntn    = fmom18_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_0 // FMOM 3T RF wi NTN shield wo DM
fmom18_rf_reg_ntn_dm = fmom18_rf_reg_ntn2 INTERACT MOM_dmetal1_0     // FMOM 3T RF wi NTN shield wi DM

mom18_mx_aux   = mom18_8 AND MOMDMY22
mom18_extc = FM_tip8 NOT INTERACT MOM_field8 > 2

DEVICE cfmom fmom18_reg_n M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_n)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom18_reg_p M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_p)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom18_reg_n_dm M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom18_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_n_dm)/ nr
    ftip = area(mom18_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom18_reg_p_dm M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom18_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_p_dm)/ nr
    ftip = area(mom18_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom18_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_nw)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom18_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_pw)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom18_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_ntn)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom18_reg_ntn_wo_pring M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_ntn_wo_pring)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom18_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom18_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_nw_dm)/ nr
    ftip = area(mom18_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom18_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_pw_dm)/ nr
    ftip = area(mom18_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom18_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_ntn_dm)/ nr
    ftip = area(mom18_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom18_reg_ntn_wo_pring_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom18_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 4
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom18_reg_2t M8(PLUS) M8(MINUS) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_reg_2t)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
]


DEVICE cfmom_mx_4t fmom18_mx_reg_4t mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2)  <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
]


DEVICE cfmom_wo_rf fmom18_rf_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_rf_reg_nw)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom18_rf_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_rf_reg_pw)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom18_rf_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_rf_reg_ntn)/ nr
    ftip = area(mom18_extc) / nr / w
    s   = perimeter_coincide(MOM_hole1, fmom18_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom18_rf_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom18_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_rf_reg_nw_dm)/ nr
    ftip = area(mom18_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom18_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom18_rf_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_rf_reg_pw_dm)/ nr
    ftip = area(mom18_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom18_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom18_rf_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_extc>   (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field1)
    w =  perimeter_coincide(MOM_field1,fmom18_rf_reg_ntn_dm)/ nr
    ftip = area(mom18_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole1, fmom18_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole1) / 2 / (nr-1) - s - 2 * ftip
    stm = 1
    spm = 8
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom18_mx_reg_n mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    dmflag = 0
]
DEVICE cfmom_mx fmom18_mx_reg_p mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom18_mx_reg_nw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom18_mx_reg_pw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom18_mx_reg_ntn mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom18_mx_reg_n_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom18_mx_reg_p_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom18_mx_reg_nw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    shield = 1
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom18_mx_reg_pw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    shield = 2
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom18_mx_reg_ntn_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field1> <MOM_hole1> <mom18_mx_aux> <M8> <mom18_extc> <MOMDMY100>   [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field1)/mf1
    w =  perimeter_coincide(MOM_field1,mom18_mx_aux)/ (nr*mf1)
    ftip = area(mom18_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole1, mom18_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole1) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 1
    spm = 8
    shield = 3
    dmmax = 0
    dmmin = 1
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom24_1 = MOMDMY4 NOT INTERACT MOM_field1


mom24_2 = mom24_1 INTERACT MOM_field2

mom24_3 = mom24_2 INTERACT MOM_field3

mom24_4 = mom24_3 INTERACT MOM_field4


mom24_idt = MOM_field4 NOT MOM_field3

mom24_Left5 = mom24_4 NOT INTERACT MOM_field5
mom24_Left6 = mom24_Left5 NOT INTERACT MOM_field6
mom24_Left7 = mom24_Left6 NOT INTERACT MOM_field7
mom24_Left8 = mom24_Left7 NOT INTERACT MOM_field8



mom24_reg1     = mom24_Left8 INTERACT mom24_idt
mom24_reg2     = mom24_reg1 INTERACT MOMDMY0
mom24_reg3     = mom24_reg2 NOT INTERACT MOMDMY22
mom24_reg4     = mom24_reg3 NOT INTERACT RFDMY
mom24_reg5     = mom24_reg4 NOT INTERACT MOMDMY27
mom24_reg6     = mom24_reg5 NOT INTERACT MOMDMY31
mom24_reg7     = mom24_reg6 NOT INTERACT MOMDMY32
mom24_reg      = mom24_reg7 NOT INTERACT MOMDMY33
 
mom24_reg_n    = mom24_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom24_reg_p    = mom24_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom24_reg_2t   = mom24_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom24_reg_nw1  = mom24_reg5 INTERACT MOMDMY31
mom24_reg_nw   = mom24_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom24_reg_pw1  = mom24_reg6 INTERACT MOMDMY32
mom24_reg_pw   = mom24_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom24_reg_ntn1 = mom24_reg7 INTERACT MOMDMY33
mom24_reg_ntn  = mom24_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom24_mx_reg1  = MOMDMY22 INTERACT mom24_Left8
mom24_mx_reg2  = mom24_mx_reg1 INTERACT mom24_idt
mom24_mx_reg3  = mom24_mx_reg2 INTERACT MOMDMY0
mom24_mx_reg   = mom24_mx_reg3 INTERACT poly


fmom24_reg1        = mom24_Left8 NOT INTERACT mom24_idt
fmom24_reg2        = fmom24_reg1 INTERACT MOMDMY100
fmom24_reg3        = fmom24_reg2 NOT INTERACT MOMDMY22
fmom24_reg4        = fmom24_reg3 NOT INTERACT RFDMY
fmom24_reg5        = fmom24_reg4 NOT INTERACT MOMDMY27
fmom24_reg6        = fmom24_reg5 NOT INTERACT MOMDMY31
fmom24_reg7        = fmom24_reg6 NOT INTERACT MOMDMY32
fmom24_reg         = fmom24_reg7 NOT INTERACT MOMDMY33
 
fmom24_reg_n1      = fmom24_reg INTERACT n_poly                    
fmom24_reg_n       = fmom24_reg_n1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi N+poly shield wo DM
fmom24_reg_n_dm    = fmom24_reg_n1 INTERACT MOM_dmetal1_1           // FMOM 3T wi N+poly shield wi DM

fmom24_reg_p1      = fmom24_reg INTERACT p_poly                     
fmom24_reg_p       = fmom24_reg_p1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi P+poly shield wo DM
fmom24_reg_p_dm    = fmom24_reg_p1 INTERACT MOM_dmetal1_1           // FMOM 3T wi P+poly shield wi DM

fmom24_reg_2t      = fmom24_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom24_reg_nw1     = fmom24_reg5 INTERACT MOMDMY31
fmom24_reg_nw2     = fmom24_reg_nw1 INTERACT nxwell
fmom24_reg_nw      = fmom24_reg_nw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi NW shield wo DM
fmom24_reg_nw_dm   = fmom24_reg_nw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi NW shield wi DM
 
fmom24_reg_pw1     = fmom24_reg6 INTERACT MOMDMY32
fmom24_reg_pw2     = fmom24_reg_pw1 INTERACT psub
fmom24_reg_pw      = fmom24_reg_pw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi PW shield wo DM
fmom24_reg_pw_dm   = fmom24_reg_pw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi PW shield wi DM

fmom24_reg_ntn1    = fmom24_reg7 INTERACT MOMDMY33
fmom24_reg_ntn2    = fmom24_reg_ntn1 INTERACT NT_N
fmom24_reg_ntn3    = fmom24_reg_ntn2 NOT INTERACT MOMDMY28
fmom24_reg_ntn     = fmom24_reg_ntn3 NOT INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo DM
fmom24_reg_ntn_dm  = fmom24_reg_ntn3 INTERACT MOM_dmetal1_1         // FMOM 3T wi NTN shield wi DM

fmom24_reg_ntn_wo_pring1   = fmom24_reg_ntn2 INTERACT MOMDMY28             
fmom24_reg_ntn_wo_pring    = fmom24_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_1 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom24_reg_ntn_wo_pring_dm = fmom24_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom24_mx_reg1     = MOMDMY22 INTERACT mom24_Left8
fmom24_mx_reg2     = fmom24_mx_reg1 NOT INTERACT mom24_idt
fmom24_mx_reg3     = fmom24_mx_reg2 INTERACT MOMDMY100
fmom24_mx_reg4     = fmom24_mx_reg3 NOT INTERACT MOMDMY27
fmom24_mx_reg5     = fmom24_mx_reg4 NOT INTERACT MOMDMY31
fmom24_mx_reg6     = fmom24_mx_reg5 NOT INTERACT MOMDMY32
fmom24_mx_reg      = fmom24_mx_reg6 NOT INTERACT MOMDMY33

fmom24_mx_reg_n1   = fmom24_mx_reg  INTERACT n_poly
fmom24_mx_reg_n    = fmom24_mx_reg_n1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi N+poly shield wo DM
fmom24_mx_reg_n_dm = fmom24_mx_reg_n1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi N+poly shield wi DM

fmom24_mx_reg_p1   = fmom24_mx_reg  INTERACT p_poly
fmom24_mx_reg_p    = fmom24_mx_reg_p1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi P+poly shield wo DM
fmom24_mx_reg_p_dm = fmom24_mx_reg_p1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi P+poly shield wi DM

fmom24_mx_reg_4t   = fmom24_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom24_mx_reg_nw1   = fmom24_mx_reg4 INTERACT MOMDMY31              
fmom24_mx_reg_nw2   = fmom24_mx_reg_nw1 INTERACT nxwell              
fmom24_mx_reg_nw    = fmom24_mx_reg_nw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi NW shield wo DM
fmom24_mx_reg_nw_dm = fmom24_mx_reg_nw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi NW shield wi DM

fmom24_mx_reg_pw1   = fmom24_mx_reg5 INTERACT MOMDMY32
fmom24_mx_reg_pw2   = fmom24_mx_reg_pw1 INTERACT psub
fmom24_mx_reg_pw    = fmom24_mx_reg_pw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi PW shield wo DM
fmom24_mx_reg_pw_dm = fmom24_mx_reg_pw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi PW shield wi DM

fmom24_mx_reg_ntn1   = fmom24_mx_reg6 INTERACT MOMDMY33
fmom24_mx_reg_ntn2   = fmom24_mx_reg_ntn1 INTERACT NT_N
fmom24_mx_reg_ntn    = fmom24_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM MX 5T wi NTN shield wo DM
fmom24_mx_reg_ntn_dm = fmom24_mx_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM MX 5T wi NTN shield wi DM

fmom24_rf_reg1     = mom24_Left8 NOT INTERACT mom24_idt
fmom24_rf_reg2     = fmom24_rf_reg1 INTERACT MOMDMY100
fmom24_rf_reg3     = fmom24_rf_reg2 NOT INTERACT MOMDMY22
fmom24_rf_reg4     = fmom24_rf_reg3 INTERACT RFDMY
fmom24_rf_reg5     = fmom24_rf_reg4 NOT INTERACT MOMDMY27
fmom24_rf_reg6     = fmom24_rf_reg5 NOT INTERACT MOMDMY31
fmom24_rf_reg7     = fmom24_rf_reg6 NOT INTERACT MOMDMY32
fmom24_rf_reg8     = fmom24_rf_reg7 NOT INTERACT MOMDMY33

fmom24_rf_reg_nw1   = fmom24_rf_reg5 INTERACT MOMDMY31
fmom24_rf_reg_nw2   = fmom24_rf_reg_nw1 INTERACT nxwell              
fmom24_rf_reg_nw    = fmom24_rf_reg_nw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi NW shield wo DM
fmom24_rf_reg_nw_dm = fmom24_rf_reg_nw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi NW shield wi DM

fmom24_rf_reg_pw1   = fmom24_rf_reg6 INTERACT MOMDMY32
fmom24_rf_reg_pw2   = fmom24_rf_reg_pw1 INTERACT psub                
fmom24_rf_reg_pw    = fmom24_rf_reg_pw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi PW shield wo DM
fmom24_rf_reg_pw_dm = fmom24_rf_reg_pw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi PW shield wi DM

fmom24_rf_reg_ntn1   = fmom24_rf_reg7 INTERACT MOMDMY33
fmom24_rf_reg_ntn2   = fmom24_rf_reg_ntn1 INTERACT NT_N
fmom24_rf_reg_ntn    = fmom24_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM 3T RF wi NTN shield wo DM
fmom24_rf_reg_ntn_dm = fmom24_rf_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM 3T RF wi NTN shield wi DM

mom24_mx_aux   = mom24_Left8 AND MOMDMY22
mom24_extc = FM_tip4 NOT INTERACT MOM_field4 > 2

DEVICE cfmom fmom24_reg_n M4(PLUS) M4(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_n)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    dmflag = 0
]
DEVICE cfmom fmom24_reg_p M4(PLUS) M4(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_p)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    dmflag = 0
]
DEVICE cfmom fmom24_reg_n_dm M4(PLUS) M4(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_n_dm)/ nr
    ftip = area(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    ftip = area(mom24_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom24_reg_p_dm M4(PLUS) M4(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_p_dm)/ nr
    ftip = area(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    ftip = area(mom24_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom24_reg_nw M4(PLUS) M4(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_nw)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom24_reg_pw M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_pw)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom24_reg_ntn M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_ntn)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom24_reg_ntn_wo_pring M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_ntn_wo_pring)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom24_reg_nw_dm M4(PLUS) M4(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_nw_dm)/ nr
    ftip = area(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 1
    ftip = area(mom24_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom24_reg_pw_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_pw_dm)/ nr
    ftip = area(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 2
    ftip = area(mom24_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom24_reg_ntn_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_ntn_dm)/ nr
    ftip = area(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 3
    ftip = area(mom24_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom24_reg_ntn_wo_pring_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 4
    ftip = area(mom24_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom24_reg_2t M4(PLUS) M4(MINUS) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_reg_2t)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
]


DEVICE cfmom_mx_4t fmom24_mx_reg_4t mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2)  <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
]


DEVICE cfmom_wo_rf fmom24_rf_reg_nw M4(PLUS) M4(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_rf_reg_nw)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom24_rf_reg_pw M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_rf_reg_pw)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom24_rf_reg_ntn M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_rf_reg_ntn)/ nr
    ftip = area(mom24_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom24_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom24_rf_reg_nw_dm M4(PLUS) M4(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_rf_reg_nw_dm)/ nr
    ftip = area(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 1
    ftip = area(mom24_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom24_rf_reg_pw_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_rf_reg_pw_dm)/ nr
    ftip = area(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 2
    ftip = area(mom24_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom24_rf_reg_ntn_dm M4(PLUS) M4(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom24_rf_reg_ntn_dm)/ nr
    ftip = area(mom24_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom24_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 4
    shield = 3
    ftip = area(mom24_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom24_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom24_mx_reg_n mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    dmflag = 0
]
DEVICE cfmom_mx fmom24_mx_reg_p mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom24_mx_reg_nw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom24_mx_reg_pw mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom24_mx_reg_ntn mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom24_mx_reg_n_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    ftip = area(mom24_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom24_mx_reg_p_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    ftip = area(mom24_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom24_mx_reg_nw_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    shield = 1
    ftip = area(mom24_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom24_mx_reg_pw_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    shield = 2
    ftip = area(mom24_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom24_mx_reg_ntn_dm mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom24_mx_aux> <M4> <mom24_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M4)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom24_mx_aux)/ (nr*mf1)
    ftip = area(mom24_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom24_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 4
    shield = 3
    ftip = area(mom24_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom25_1 = MOMDMY5 NOT INTERACT MOM_field1


mom25_2 = mom25_1 INTERACT MOM_field2

mom25_3 = mom25_2 INTERACT MOM_field3

mom25_4 = mom25_3 INTERACT MOM_field4

mom25_5 = mom25_4 INTERACT MOM_field5


mom25_idt = MOM_field5 NOT MOM_field4

mom25_Left6 = mom25_5 NOT INTERACT MOM_field6
mom25_Left7 = mom25_Left6 NOT INTERACT MOM_field7
mom25_Left8 = mom25_Left7 NOT INTERACT MOM_field8



mom25_reg1     = mom25_Left8 INTERACT mom25_idt
mom25_reg2     = mom25_reg1 INTERACT MOMDMY0
mom25_reg3     = mom25_reg2 NOT INTERACT MOMDMY22
mom25_reg4     = mom25_reg3 NOT INTERACT RFDMY
mom25_reg5     = mom25_reg4 NOT INTERACT MOMDMY27
mom25_reg6     = mom25_reg5 NOT INTERACT MOMDMY31
mom25_reg7     = mom25_reg6 NOT INTERACT MOMDMY32
mom25_reg      = mom25_reg7 NOT INTERACT MOMDMY33
 
mom25_reg_n    = mom25_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom25_reg_p    = mom25_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom25_reg_2t   = mom25_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom25_reg_nw1  = mom25_reg5 INTERACT MOMDMY31
mom25_reg_nw   = mom25_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom25_reg_pw1  = mom25_reg6 INTERACT MOMDMY32
mom25_reg_pw   = mom25_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom25_reg_ntn1 = mom25_reg7 INTERACT MOMDMY33
mom25_reg_ntn  = mom25_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom25_mx_reg1  = MOMDMY22 INTERACT mom25_Left8
mom25_mx_reg2  = mom25_mx_reg1 INTERACT mom25_idt
mom25_mx_reg3  = mom25_mx_reg2 INTERACT MOMDMY0
mom25_mx_reg   = mom25_mx_reg3 INTERACT poly


fmom25_reg1        = mom25_Left8 NOT INTERACT mom25_idt
fmom25_reg2        = fmom25_reg1 INTERACT MOMDMY100
fmom25_reg3        = fmom25_reg2 NOT INTERACT MOMDMY22
fmom25_reg4        = fmom25_reg3 NOT INTERACT RFDMY
fmom25_reg5        = fmom25_reg4 NOT INTERACT MOMDMY27
fmom25_reg6        = fmom25_reg5 NOT INTERACT MOMDMY31
fmom25_reg7        = fmom25_reg6 NOT INTERACT MOMDMY32
fmom25_reg         = fmom25_reg7 NOT INTERACT MOMDMY33
 
fmom25_reg_n1      = fmom25_reg INTERACT n_poly                    
fmom25_reg_n       = fmom25_reg_n1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi N+poly shield wo DM
fmom25_reg_n_dm    = fmom25_reg_n1 INTERACT MOM_dmetal1_1           // FMOM 3T wi N+poly shield wi DM

fmom25_reg_p1      = fmom25_reg INTERACT p_poly                     
fmom25_reg_p       = fmom25_reg_p1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi P+poly shield wo DM
fmom25_reg_p_dm    = fmom25_reg_p1 INTERACT MOM_dmetal1_1           // FMOM 3T wi P+poly shield wi DM

fmom25_reg_2t      = fmom25_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom25_reg_nw1     = fmom25_reg5 INTERACT MOMDMY31
fmom25_reg_nw2     = fmom25_reg_nw1 INTERACT nxwell
fmom25_reg_nw      = fmom25_reg_nw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi NW shield wo DM
fmom25_reg_nw_dm   = fmom25_reg_nw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi NW shield wi DM
 
fmom25_reg_pw1     = fmom25_reg6 INTERACT MOMDMY32
fmom25_reg_pw2     = fmom25_reg_pw1 INTERACT psub
fmom25_reg_pw      = fmom25_reg_pw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi PW shield wo DM
fmom25_reg_pw_dm   = fmom25_reg_pw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi PW shield wi DM

fmom25_reg_ntn1    = fmom25_reg7 INTERACT MOMDMY33
fmom25_reg_ntn2    = fmom25_reg_ntn1 INTERACT NT_N
fmom25_reg_ntn3    = fmom25_reg_ntn2 NOT INTERACT MOMDMY28
fmom25_reg_ntn     = fmom25_reg_ntn3 NOT INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo DM
fmom25_reg_ntn_dm  = fmom25_reg_ntn3 INTERACT MOM_dmetal1_1         // FMOM 3T wi NTN shield wi DM

fmom25_reg_ntn_wo_pring1   = fmom25_reg_ntn2 INTERACT MOMDMY28             
fmom25_reg_ntn_wo_pring    = fmom25_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_1 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom25_reg_ntn_wo_pring_dm = fmom25_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom25_mx_reg1     = MOMDMY22 INTERACT mom25_Left8
fmom25_mx_reg2     = fmom25_mx_reg1 NOT INTERACT mom25_idt
fmom25_mx_reg3     = fmom25_mx_reg2 INTERACT MOMDMY100
fmom25_mx_reg4     = fmom25_mx_reg3 NOT INTERACT MOMDMY27
fmom25_mx_reg5     = fmom25_mx_reg4 NOT INTERACT MOMDMY31
fmom25_mx_reg6     = fmom25_mx_reg5 NOT INTERACT MOMDMY32
fmom25_mx_reg      = fmom25_mx_reg6 NOT INTERACT MOMDMY33

fmom25_mx_reg_n1   = fmom25_mx_reg  INTERACT n_poly
fmom25_mx_reg_n    = fmom25_mx_reg_n1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi N+poly shield wo DM
fmom25_mx_reg_n_dm = fmom25_mx_reg_n1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi N+poly shield wi DM

fmom25_mx_reg_p1   = fmom25_mx_reg  INTERACT p_poly
fmom25_mx_reg_p    = fmom25_mx_reg_p1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi P+poly shield wo DM
fmom25_mx_reg_p_dm = fmom25_mx_reg_p1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi P+poly shield wi DM

fmom25_mx_reg_4t   = fmom25_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom25_mx_reg_nw1   = fmom25_mx_reg4 INTERACT MOMDMY31              
fmom25_mx_reg_nw2   = fmom25_mx_reg_nw1 INTERACT nxwell              
fmom25_mx_reg_nw    = fmom25_mx_reg_nw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi NW shield wo DM
fmom25_mx_reg_nw_dm = fmom25_mx_reg_nw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi NW shield wi DM

fmom25_mx_reg_pw1   = fmom25_mx_reg5 INTERACT MOMDMY32
fmom25_mx_reg_pw2   = fmom25_mx_reg_pw1 INTERACT psub
fmom25_mx_reg_pw    = fmom25_mx_reg_pw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi PW shield wo DM
fmom25_mx_reg_pw_dm = fmom25_mx_reg_pw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi PW shield wi DM

fmom25_mx_reg_ntn1   = fmom25_mx_reg6 INTERACT MOMDMY33
fmom25_mx_reg_ntn2   = fmom25_mx_reg_ntn1 INTERACT NT_N
fmom25_mx_reg_ntn    = fmom25_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM MX 5T wi NTN shield wo DM
fmom25_mx_reg_ntn_dm = fmom25_mx_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM MX 5T wi NTN shield wi DM

fmom25_rf_reg1     = mom25_Left8 NOT INTERACT mom25_idt
fmom25_rf_reg2     = fmom25_rf_reg1 INTERACT MOMDMY100
fmom25_rf_reg3     = fmom25_rf_reg2 NOT INTERACT MOMDMY22
fmom25_rf_reg4     = fmom25_rf_reg3 INTERACT RFDMY
fmom25_rf_reg5     = fmom25_rf_reg4 NOT INTERACT MOMDMY27
fmom25_rf_reg6     = fmom25_rf_reg5 NOT INTERACT MOMDMY31
fmom25_rf_reg7     = fmom25_rf_reg6 NOT INTERACT MOMDMY32
fmom25_rf_reg8     = fmom25_rf_reg7 NOT INTERACT MOMDMY33

fmom25_rf_reg_nw1   = fmom25_rf_reg5 INTERACT MOMDMY31
fmom25_rf_reg_nw2   = fmom25_rf_reg_nw1 INTERACT nxwell              
fmom25_rf_reg_nw    = fmom25_rf_reg_nw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi NW shield wo DM
fmom25_rf_reg_nw_dm = fmom25_rf_reg_nw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi NW shield wi DM

fmom25_rf_reg_pw1   = fmom25_rf_reg6 INTERACT MOMDMY32
fmom25_rf_reg_pw2   = fmom25_rf_reg_pw1 INTERACT psub                
fmom25_rf_reg_pw    = fmom25_rf_reg_pw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi PW shield wo DM
fmom25_rf_reg_pw_dm = fmom25_rf_reg_pw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi PW shield wi DM

fmom25_rf_reg_ntn1   = fmom25_rf_reg7 INTERACT MOMDMY33
fmom25_rf_reg_ntn2   = fmom25_rf_reg_ntn1 INTERACT NT_N
fmom25_rf_reg_ntn    = fmom25_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM 3T RF wi NTN shield wo DM
fmom25_rf_reg_ntn_dm = fmom25_rf_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM 3T RF wi NTN shield wi DM

mom25_mx_aux   = mom25_Left8 AND MOMDMY22
mom25_extc = FM_tip5 NOT INTERACT MOM_field5 > 2

DEVICE cfmom fmom25_reg_n M5(PLUS) M5(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_n)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    dmflag = 0
]
DEVICE cfmom fmom25_reg_p M5(PLUS) M5(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_p)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    dmflag = 0
]
DEVICE cfmom fmom25_reg_n_dm M5(PLUS) M5(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_n_dm)/ nr
    ftip = area(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    ftip = area(mom25_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom25_reg_p_dm M5(PLUS) M5(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_p_dm)/ nr
    ftip = area(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    ftip = area(mom25_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom25_reg_nw M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_nw)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom25_reg_pw M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_pw)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom25_reg_ntn M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_ntn)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom25_reg_ntn_wo_pring M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_ntn_wo_pring)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom25_reg_nw_dm M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_nw_dm)/ nr
    ftip = area(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 1
    ftip = area(mom25_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom25_reg_pw_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_pw_dm)/ nr
    ftip = area(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 2
    ftip = area(mom25_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom25_reg_ntn_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_ntn_dm)/ nr
    ftip = area(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 3
    ftip = area(mom25_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom25_reg_ntn_wo_pring_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 4
    ftip = area(mom25_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom25_reg_2t M5(PLUS) M5(MINUS) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_reg_2t)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
]


DEVICE cfmom_mx_4t fmom25_mx_reg_4t mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2)  <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
]


DEVICE cfmom_wo_rf fmom25_rf_reg_nw M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_rf_reg_nw)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom25_rf_reg_pw M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_rf_reg_pw)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom25_rf_reg_ntn M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_rf_reg_ntn)/ nr
    ftip = area(mom25_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom25_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom25_rf_reg_nw_dm M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_rf_reg_nw_dm)/ nr
    ftip = area(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 1
    ftip = area(mom25_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom25_rf_reg_pw_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_rf_reg_pw_dm)/ nr
    ftip = area(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 2
    ftip = area(mom25_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom25_rf_reg_ntn_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom25_rf_reg_ntn_dm)/ nr
    ftip = area(mom25_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom25_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 5
    shield = 3
    ftip = area(mom25_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom25_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom25_mx_reg_n mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    dmflag = 0
]
DEVICE cfmom_mx fmom25_mx_reg_p mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom25_mx_reg_nw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom25_mx_reg_pw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom25_mx_reg_ntn mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom25_mx_reg_n_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    ftip = area(mom25_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom25_mx_reg_p_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    ftip = area(mom25_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom25_mx_reg_nw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    shield = 1
    ftip = area(mom25_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom25_mx_reg_pw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    shield = 2
    ftip = area(mom25_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom25_mx_reg_ntn_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom25_mx_aux> <M5> <mom25_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom25_mx_aux)/ (nr*mf1)
    ftip = area(mom25_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom25_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 5
    shield = 3
    ftip = area(mom25_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom26_1 = MOMDMY6 NOT INTERACT MOM_field1


mom26_2 = mom26_1 INTERACT MOM_field2

mom26_3 = mom26_2 INTERACT MOM_field3

mom26_4 = mom26_3 INTERACT MOM_field4

mom26_5 = mom26_4 INTERACT MOM_field5

mom26_6 = mom26_5 INTERACT MOM_field6


mom26_idt = MOM_field6 NOT MOM_field5

mom26_Left7 = mom26_6 NOT INTERACT MOM_field7
mom26_Left8 = mom26_Left7 NOT INTERACT MOM_field8



mom26_reg1     = mom26_Left8 INTERACT mom26_idt
mom26_reg2     = mom26_reg1 INTERACT MOMDMY0
mom26_reg3     = mom26_reg2 NOT INTERACT MOMDMY22
mom26_reg4     = mom26_reg3 NOT INTERACT RFDMY
mom26_reg5     = mom26_reg4 NOT INTERACT MOMDMY27
mom26_reg6     = mom26_reg5 NOT INTERACT MOMDMY31
mom26_reg7     = mom26_reg6 NOT INTERACT MOMDMY32
mom26_reg      = mom26_reg7 NOT INTERACT MOMDMY33
 
mom26_reg_n    = mom26_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom26_reg_p    = mom26_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom26_reg_2t   = mom26_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom26_reg_nw1  = mom26_reg5 INTERACT MOMDMY31
mom26_reg_nw   = mom26_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom26_reg_pw1  = mom26_reg6 INTERACT MOMDMY32
mom26_reg_pw   = mom26_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom26_reg_ntn1 = mom26_reg7 INTERACT MOMDMY33
mom26_reg_ntn  = mom26_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom26_mx_reg1  = MOMDMY22 INTERACT mom26_Left8
mom26_mx_reg2  = mom26_mx_reg1 INTERACT mom26_idt
mom26_mx_reg3  = mom26_mx_reg2 INTERACT MOMDMY0
mom26_mx_reg   = mom26_mx_reg3 INTERACT poly


fmom26_reg1        = mom26_Left8 NOT INTERACT mom26_idt
fmom26_reg2        = fmom26_reg1 INTERACT MOMDMY100
fmom26_reg3        = fmom26_reg2 NOT INTERACT MOMDMY22
fmom26_reg4        = fmom26_reg3 NOT INTERACT RFDMY
fmom26_reg5        = fmom26_reg4 NOT INTERACT MOMDMY27
fmom26_reg6        = fmom26_reg5 NOT INTERACT MOMDMY31
fmom26_reg7        = fmom26_reg6 NOT INTERACT MOMDMY32
fmom26_reg         = fmom26_reg7 NOT INTERACT MOMDMY33
 
fmom26_reg_n1      = fmom26_reg INTERACT n_poly                    
fmom26_reg_n       = fmom26_reg_n1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi N+poly shield wo DM
fmom26_reg_n_dm    = fmom26_reg_n1 INTERACT MOM_dmetal1_1           // FMOM 3T wi N+poly shield wi DM

fmom26_reg_p1      = fmom26_reg INTERACT p_poly                     
fmom26_reg_p       = fmom26_reg_p1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi P+poly shield wo DM
fmom26_reg_p_dm    = fmom26_reg_p1 INTERACT MOM_dmetal1_1           // FMOM 3T wi P+poly shield wi DM

fmom26_reg_2t      = fmom26_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom26_reg_nw1     = fmom26_reg5 INTERACT MOMDMY31
fmom26_reg_nw2     = fmom26_reg_nw1 INTERACT nxwell
fmom26_reg_nw      = fmom26_reg_nw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi NW shield wo DM
fmom26_reg_nw_dm   = fmom26_reg_nw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi NW shield wi DM
 
fmom26_reg_pw1     = fmom26_reg6 INTERACT MOMDMY32
fmom26_reg_pw2     = fmom26_reg_pw1 INTERACT psub
fmom26_reg_pw      = fmom26_reg_pw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi PW shield wo DM
fmom26_reg_pw_dm   = fmom26_reg_pw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi PW shield wi DM

fmom26_reg_ntn1    = fmom26_reg7 INTERACT MOMDMY33
fmom26_reg_ntn2    = fmom26_reg_ntn1 INTERACT NT_N
fmom26_reg_ntn3    = fmom26_reg_ntn2 NOT INTERACT MOMDMY28
fmom26_reg_ntn     = fmom26_reg_ntn3 NOT INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo DM
fmom26_reg_ntn_dm  = fmom26_reg_ntn3 INTERACT MOM_dmetal1_1         // FMOM 3T wi NTN shield wi DM

fmom26_reg_ntn_wo_pring1   = fmom26_reg_ntn2 INTERACT MOMDMY28             
fmom26_reg_ntn_wo_pring    = fmom26_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_1 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom26_reg_ntn_wo_pring_dm = fmom26_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom26_mx_reg1     = MOMDMY22 INTERACT mom26_Left8
fmom26_mx_reg2     = fmom26_mx_reg1 NOT INTERACT mom26_idt
fmom26_mx_reg3     = fmom26_mx_reg2 INTERACT MOMDMY100
fmom26_mx_reg4     = fmom26_mx_reg3 NOT INTERACT MOMDMY27
fmom26_mx_reg5     = fmom26_mx_reg4 NOT INTERACT MOMDMY31
fmom26_mx_reg6     = fmom26_mx_reg5 NOT INTERACT MOMDMY32
fmom26_mx_reg      = fmom26_mx_reg6 NOT INTERACT MOMDMY33

fmom26_mx_reg_n1   = fmom26_mx_reg  INTERACT n_poly
fmom26_mx_reg_n    = fmom26_mx_reg_n1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi N+poly shield wo DM
fmom26_mx_reg_n_dm = fmom26_mx_reg_n1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi N+poly shield wi DM

fmom26_mx_reg_p1   = fmom26_mx_reg  INTERACT p_poly
fmom26_mx_reg_p    = fmom26_mx_reg_p1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi P+poly shield wo DM
fmom26_mx_reg_p_dm = fmom26_mx_reg_p1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi P+poly shield wi DM

fmom26_mx_reg_4t   = fmom26_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom26_mx_reg_nw1   = fmom26_mx_reg4 INTERACT MOMDMY31              
fmom26_mx_reg_nw2   = fmom26_mx_reg_nw1 INTERACT nxwell              
fmom26_mx_reg_nw    = fmom26_mx_reg_nw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi NW shield wo DM
fmom26_mx_reg_nw_dm = fmom26_mx_reg_nw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi NW shield wi DM

fmom26_mx_reg_pw1   = fmom26_mx_reg5 INTERACT MOMDMY32
fmom26_mx_reg_pw2   = fmom26_mx_reg_pw1 INTERACT psub
fmom26_mx_reg_pw    = fmom26_mx_reg_pw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi PW shield wo DM
fmom26_mx_reg_pw_dm = fmom26_mx_reg_pw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi PW shield wi DM

fmom26_mx_reg_ntn1   = fmom26_mx_reg6 INTERACT MOMDMY33
fmom26_mx_reg_ntn2   = fmom26_mx_reg_ntn1 INTERACT NT_N
fmom26_mx_reg_ntn    = fmom26_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM MX 5T wi NTN shield wo DM
fmom26_mx_reg_ntn_dm = fmom26_mx_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM MX 5T wi NTN shield wi DM

fmom26_rf_reg1     = mom26_Left8 NOT INTERACT mom26_idt
fmom26_rf_reg2     = fmom26_rf_reg1 INTERACT MOMDMY100
fmom26_rf_reg3     = fmom26_rf_reg2 NOT INTERACT MOMDMY22
fmom26_rf_reg4     = fmom26_rf_reg3 INTERACT RFDMY
fmom26_rf_reg5     = fmom26_rf_reg4 NOT INTERACT MOMDMY27
fmom26_rf_reg6     = fmom26_rf_reg5 NOT INTERACT MOMDMY31
fmom26_rf_reg7     = fmom26_rf_reg6 NOT INTERACT MOMDMY32
fmom26_rf_reg8     = fmom26_rf_reg7 NOT INTERACT MOMDMY33

fmom26_rf_reg_nw1   = fmom26_rf_reg5 INTERACT MOMDMY31
fmom26_rf_reg_nw2   = fmom26_rf_reg_nw1 INTERACT nxwell              
fmom26_rf_reg_nw    = fmom26_rf_reg_nw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi NW shield wo DM
fmom26_rf_reg_nw_dm = fmom26_rf_reg_nw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi NW shield wi DM

fmom26_rf_reg_pw1   = fmom26_rf_reg6 INTERACT MOMDMY32
fmom26_rf_reg_pw2   = fmom26_rf_reg_pw1 INTERACT psub                
fmom26_rf_reg_pw    = fmom26_rf_reg_pw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi PW shield wo DM
fmom26_rf_reg_pw_dm = fmom26_rf_reg_pw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi PW shield wi DM

fmom26_rf_reg_ntn1   = fmom26_rf_reg7 INTERACT MOMDMY33
fmom26_rf_reg_ntn2   = fmom26_rf_reg_ntn1 INTERACT NT_N
fmom26_rf_reg_ntn    = fmom26_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM 3T RF wi NTN shield wo DM
fmom26_rf_reg_ntn_dm = fmom26_rf_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM 3T RF wi NTN shield wi DM

mom26_mx_aux   = mom26_Left8 AND MOMDMY22
mom26_extc = FM_tip6 NOT INTERACT MOM_field6 > 2

DEVICE cfmom fmom26_reg_n M6(PLUS) M6(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_n)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    dmflag = 0
]
DEVICE cfmom fmom26_reg_p M6(PLUS) M6(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_p)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    dmflag = 0
]
DEVICE cfmom fmom26_reg_n_dm M6(PLUS) M6(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom26_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_n_dm)/ nr
    ftip = area(mom26_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    ftip = area(mom26_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom26_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom26_reg_p_dm M6(PLUS) M6(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom26_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_p_dm)/ nr
    ftip = area(mom26_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    ftip = area(mom26_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom26_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom26_reg_nw M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_nw)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom26_reg_pw M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_pw)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom26_reg_ntn M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_ntn)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom26_reg_ntn_wo_pring M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_ntn_wo_pring)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom26_reg_nw_dm M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom26_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_nw_dm)/ nr
    ftip = area(mom26_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 1
    ftip = area(mom26_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom26_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom26_reg_pw_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_pw_dm)/ nr
    ftip = area(mom26_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 2
    ftip = area(mom26_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom26_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom26_reg_ntn_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_ntn_dm)/ nr
    ftip = area(mom26_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 3
    ftip = area(mom26_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom26_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom26_reg_ntn_wo_pring_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom26_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 4
    ftip = area(mom26_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom26_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom26_reg_2t M6(PLUS) M6(MINUS) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_reg_2t)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
]


DEVICE cfmom_mx_4t fmom26_mx_reg_4t mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2)  <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
]


DEVICE cfmom_wo_rf fmom26_rf_reg_nw M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_rf_reg_nw)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom26_rf_reg_pw M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_rf_reg_pw)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom26_rf_reg_ntn M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_rf_reg_ntn)/ nr
    ftip = area(mom26_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom26_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom26_rf_reg_nw_dm M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom26_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_rf_reg_nw_dm)/ nr
    ftip = area(mom26_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom26_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 1
    ftip = area(mom26_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom26_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom26_rf_reg_pw_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_rf_reg_pw_dm)/ nr
    ftip = area(mom26_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom26_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 2
    ftip = area(mom26_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom26_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom26_rf_reg_ntn_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom26_rf_reg_ntn_dm)/ nr
    ftip = area(mom26_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom26_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 6
    shield = 3
    ftip = area(mom26_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom26_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom26_mx_reg_n mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    dmflag = 0
]
DEVICE cfmom_mx fmom26_mx_reg_p mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom26_mx_reg_nw mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom26_mx_reg_pw mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom26_mx_reg_ntn mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom26_mx_reg_n_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    ftip = area(mom26_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom26_mx_reg_p_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    ftip = area(mom26_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom26_mx_reg_nw_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    shield = 1
    ftip = area(mom26_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom26_mx_reg_pw_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    shield = 2
    ftip = area(mom26_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom26_mx_reg_ntn_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom26_mx_aux> <M6> <mom26_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom26_mx_aux)/ (nr*mf1)
    ftip = area(mom26_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom26_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 6
    shield = 3
    ftip = area(mom26_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom27_1 = MOMDMY7 NOT INTERACT MOM_field1


mom27_2 = mom27_1 INTERACT MOM_field2

mom27_3 = mom27_2 INTERACT MOM_field3

mom27_4 = mom27_3 INTERACT MOM_field4

mom27_5 = mom27_4 INTERACT MOM_field5

mom27_6 = mom27_5 INTERACT MOM_field6

mom27_7 = mom27_6 INTERACT MOM_field7


mom27_idt = MOM_field7 NOT MOM_field6

mom27_Left8 = mom27_7 NOT INTERACT MOM_field8



mom27_reg1     = mom27_Left8 INTERACT mom27_idt
mom27_reg2     = mom27_reg1 INTERACT MOMDMY0
mom27_reg3     = mom27_reg2 NOT INTERACT MOMDMY22
mom27_reg4     = mom27_reg3 NOT INTERACT RFDMY
mom27_reg5     = mom27_reg4 NOT INTERACT MOMDMY27
mom27_reg6     = mom27_reg5 NOT INTERACT MOMDMY31
mom27_reg7     = mom27_reg6 NOT INTERACT MOMDMY32
mom27_reg      = mom27_reg7 NOT INTERACT MOMDMY33
 
mom27_reg_n    = mom27_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom27_reg_p    = mom27_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom27_reg_2t   = mom27_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom27_reg_nw1  = mom27_reg5 INTERACT MOMDMY31
mom27_reg_nw   = mom27_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom27_reg_pw1  = mom27_reg6 INTERACT MOMDMY32
mom27_reg_pw   = mom27_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom27_reg_ntn1 = mom27_reg7 INTERACT MOMDMY33
mom27_reg_ntn  = mom27_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom27_mx_reg1  = MOMDMY22 INTERACT mom27_Left8
mom27_mx_reg2  = mom27_mx_reg1 INTERACT mom27_idt
mom27_mx_reg3  = mom27_mx_reg2 INTERACT MOMDMY0
mom27_mx_reg   = mom27_mx_reg3 INTERACT poly


fmom27_reg1        = mom27_Left8 NOT INTERACT mom27_idt
fmom27_reg2        = fmom27_reg1 INTERACT MOMDMY100
fmom27_reg3        = fmom27_reg2 NOT INTERACT MOMDMY22
fmom27_reg4        = fmom27_reg3 NOT INTERACT RFDMY
fmom27_reg5        = fmom27_reg4 NOT INTERACT MOMDMY27
fmom27_reg6        = fmom27_reg5 NOT INTERACT MOMDMY31
fmom27_reg7        = fmom27_reg6 NOT INTERACT MOMDMY32
fmom27_reg         = fmom27_reg7 NOT INTERACT MOMDMY33
 
fmom27_reg_n1      = fmom27_reg INTERACT n_poly                    
fmom27_reg_n       = fmom27_reg_n1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi N+poly shield wo DM
fmom27_reg_n_dm    = fmom27_reg_n1 INTERACT MOM_dmetal1_1           // FMOM 3T wi N+poly shield wi DM

fmom27_reg_p1      = fmom27_reg INTERACT p_poly                     
fmom27_reg_p       = fmom27_reg_p1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi P+poly shield wo DM
fmom27_reg_p_dm    = fmom27_reg_p1 INTERACT MOM_dmetal1_1           // FMOM 3T wi P+poly shield wi DM

fmom27_reg_2t      = fmom27_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom27_reg_nw1     = fmom27_reg5 INTERACT MOMDMY31
fmom27_reg_nw2     = fmom27_reg_nw1 INTERACT nxwell
fmom27_reg_nw      = fmom27_reg_nw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi NW shield wo DM
fmom27_reg_nw_dm   = fmom27_reg_nw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi NW shield wi DM
 
fmom27_reg_pw1     = fmom27_reg6 INTERACT MOMDMY32
fmom27_reg_pw2     = fmom27_reg_pw1 INTERACT psub
fmom27_reg_pw      = fmom27_reg_pw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi PW shield wo DM
fmom27_reg_pw_dm   = fmom27_reg_pw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi PW shield wi DM

fmom27_reg_ntn1    = fmom27_reg7 INTERACT MOMDMY33
fmom27_reg_ntn2    = fmom27_reg_ntn1 INTERACT NT_N
fmom27_reg_ntn3    = fmom27_reg_ntn2 NOT INTERACT MOMDMY28
fmom27_reg_ntn     = fmom27_reg_ntn3 NOT INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo DM
fmom27_reg_ntn_dm  = fmom27_reg_ntn3 INTERACT MOM_dmetal1_1         // FMOM 3T wi NTN shield wi DM

fmom27_reg_ntn_wo_pring1   = fmom27_reg_ntn2 INTERACT MOMDMY28             
fmom27_reg_ntn_wo_pring    = fmom27_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_1 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom27_reg_ntn_wo_pring_dm = fmom27_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom27_mx_reg1     = MOMDMY22 INTERACT mom27_Left8
fmom27_mx_reg2     = fmom27_mx_reg1 NOT INTERACT mom27_idt
fmom27_mx_reg3     = fmom27_mx_reg2 INTERACT MOMDMY100
fmom27_mx_reg4     = fmom27_mx_reg3 NOT INTERACT MOMDMY27
fmom27_mx_reg5     = fmom27_mx_reg4 NOT INTERACT MOMDMY31
fmom27_mx_reg6     = fmom27_mx_reg5 NOT INTERACT MOMDMY32
fmom27_mx_reg      = fmom27_mx_reg6 NOT INTERACT MOMDMY33

fmom27_mx_reg_n1   = fmom27_mx_reg  INTERACT n_poly
fmom27_mx_reg_n    = fmom27_mx_reg_n1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi N+poly shield wo DM
fmom27_mx_reg_n_dm = fmom27_mx_reg_n1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi N+poly shield wi DM

fmom27_mx_reg_p1   = fmom27_mx_reg  INTERACT p_poly
fmom27_mx_reg_p    = fmom27_mx_reg_p1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi P+poly shield wo DM
fmom27_mx_reg_p_dm = fmom27_mx_reg_p1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi P+poly shield wi DM

fmom27_mx_reg_4t   = fmom27_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom27_mx_reg_nw1   = fmom27_mx_reg4 INTERACT MOMDMY31              
fmom27_mx_reg_nw2   = fmom27_mx_reg_nw1 INTERACT nxwell              
fmom27_mx_reg_nw    = fmom27_mx_reg_nw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi NW shield wo DM
fmom27_mx_reg_nw_dm = fmom27_mx_reg_nw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi NW shield wi DM

fmom27_mx_reg_pw1   = fmom27_mx_reg5 INTERACT MOMDMY32
fmom27_mx_reg_pw2   = fmom27_mx_reg_pw1 INTERACT psub
fmom27_mx_reg_pw    = fmom27_mx_reg_pw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi PW shield wo DM
fmom27_mx_reg_pw_dm = fmom27_mx_reg_pw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi PW shield wi DM

fmom27_mx_reg_ntn1   = fmom27_mx_reg6 INTERACT MOMDMY33
fmom27_mx_reg_ntn2   = fmom27_mx_reg_ntn1 INTERACT NT_N
fmom27_mx_reg_ntn    = fmom27_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM MX 5T wi NTN shield wo DM
fmom27_mx_reg_ntn_dm = fmom27_mx_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM MX 5T wi NTN shield wi DM

fmom27_rf_reg1     = mom27_Left8 NOT INTERACT mom27_idt
fmom27_rf_reg2     = fmom27_rf_reg1 INTERACT MOMDMY100
fmom27_rf_reg3     = fmom27_rf_reg2 NOT INTERACT MOMDMY22
fmom27_rf_reg4     = fmom27_rf_reg3 INTERACT RFDMY
fmom27_rf_reg5     = fmom27_rf_reg4 NOT INTERACT MOMDMY27
fmom27_rf_reg6     = fmom27_rf_reg5 NOT INTERACT MOMDMY31
fmom27_rf_reg7     = fmom27_rf_reg6 NOT INTERACT MOMDMY32
fmom27_rf_reg8     = fmom27_rf_reg7 NOT INTERACT MOMDMY33

fmom27_rf_reg_nw1   = fmom27_rf_reg5 INTERACT MOMDMY31
fmom27_rf_reg_nw2   = fmom27_rf_reg_nw1 INTERACT nxwell              
fmom27_rf_reg_nw    = fmom27_rf_reg_nw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi NW shield wo DM
fmom27_rf_reg_nw_dm = fmom27_rf_reg_nw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi NW shield wi DM

fmom27_rf_reg_pw1   = fmom27_rf_reg6 INTERACT MOMDMY32
fmom27_rf_reg_pw2   = fmom27_rf_reg_pw1 INTERACT psub                
fmom27_rf_reg_pw    = fmom27_rf_reg_pw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi PW shield wo DM
fmom27_rf_reg_pw_dm = fmom27_rf_reg_pw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi PW shield wi DM

fmom27_rf_reg_ntn1   = fmom27_rf_reg7 INTERACT MOMDMY33
fmom27_rf_reg_ntn2   = fmom27_rf_reg_ntn1 INTERACT NT_N
fmom27_rf_reg_ntn    = fmom27_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM 3T RF wi NTN shield wo DM
fmom27_rf_reg_ntn_dm = fmom27_rf_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM 3T RF wi NTN shield wi DM

mom27_mx_aux   = mom27_Left8 AND MOMDMY22
mom27_extc = FM_tip7 NOT INTERACT MOM_field7 > 2

DEVICE cfmom fmom27_reg_n M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_n)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom27_reg_p M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_p)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom27_reg_n_dm M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom27_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_n_dm)/ nr
    ftip = area(mom27_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    ftip = area(mom27_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom27_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom27_reg_p_dm M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom27_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_p_dm)/ nr
    ftip = area(mom27_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    ftip = area(mom27_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom27_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom27_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_nw)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom27_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_pw)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom27_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_ntn)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom27_reg_ntn_wo_pring M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_ntn_wo_pring)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom27_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom27_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_nw_dm)/ nr
    ftip = area(mom27_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 1
    ftip = area(mom27_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom27_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom27_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_pw_dm)/ nr
    ftip = area(mom27_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 2
    ftip = area(mom27_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom27_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom27_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_ntn_dm)/ nr
    ftip = area(mom27_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 3
    ftip = area(mom27_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom27_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom27_reg_ntn_wo_pring_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom27_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 4
    ftip = area(mom27_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom27_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom27_reg_2t M7(PLUS) M7(MINUS) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_reg_2t)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
]


DEVICE cfmom_mx_4t fmom27_mx_reg_4t mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2)  <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
]


DEVICE cfmom_wo_rf fmom27_rf_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_rf_reg_nw)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom27_rf_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_rf_reg_pw)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom27_rf_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_rf_reg_ntn)/ nr
    ftip = area(mom27_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom27_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom27_rf_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom27_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_rf_reg_nw_dm)/ nr
    ftip = area(mom27_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom27_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 1
    ftip = area(mom27_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom27_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom27_rf_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_rf_reg_pw_dm)/ nr
    ftip = area(mom27_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom27_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 2
    ftip = area(mom27_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom27_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom27_rf_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom27_rf_reg_ntn_dm)/ nr
    ftip = area(mom27_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom27_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 7
    shield = 3
    ftip = area(mom27_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom27_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom27_mx_reg_n mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    dmflag = 0
]
DEVICE cfmom_mx fmom27_mx_reg_p mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom27_mx_reg_nw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom27_mx_reg_pw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom27_mx_reg_ntn mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom27_mx_reg_n_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    ftip = area(mom27_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom27_mx_reg_p_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    ftip = area(mom27_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom27_mx_reg_nw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    shield = 1
    ftip = area(mom27_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom27_mx_reg_pw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    shield = 2
    ftip = area(mom27_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom27_mx_reg_ntn_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom27_mx_aux> <M7> <mom27_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom27_mx_aux)/ (nr*mf1)
    ftip = area(mom27_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom27_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 7
    shield = 3
    ftip = area(mom27_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom28_1 = MOMDMY8 NOT INTERACT MOM_field1


mom28_2 = mom28_1 INTERACT MOM_field2

mom28_3 = mom28_2 INTERACT MOM_field3

mom28_4 = mom28_3 INTERACT MOM_field4

mom28_5 = mom28_4 INTERACT MOM_field5

mom28_6 = mom28_5 INTERACT MOM_field6

mom28_7 = mom28_6 INTERACT MOM_field7

mom28_8 = mom28_7 INTERACT MOM_field8


mom28_idt = MOM_field8 NOT MOM_field7




mom28_reg1     = mom28_8 INTERACT mom28_idt
mom28_reg2     = mom28_reg1 INTERACT MOMDMY0
mom28_reg3     = mom28_reg2 NOT INTERACT MOMDMY22
mom28_reg4     = mom28_reg3 NOT INTERACT RFDMY
mom28_reg5     = mom28_reg4 NOT INTERACT MOMDMY27
mom28_reg6     = mom28_reg5 NOT INTERACT MOMDMY31
mom28_reg7     = mom28_reg6 NOT INTERACT MOMDMY32
mom28_reg      = mom28_reg7 NOT INTERACT MOMDMY33
 
mom28_reg_n    = mom28_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom28_reg_p    = mom28_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom28_reg_2t   = mom28_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom28_reg_nw1  = mom28_reg5 INTERACT MOMDMY31
mom28_reg_nw   = mom28_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom28_reg_pw1  = mom28_reg6 INTERACT MOMDMY32
mom28_reg_pw   = mom28_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom28_reg_ntn1 = mom28_reg7 INTERACT MOMDMY33
mom28_reg_ntn  = mom28_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom28_mx_reg1  = MOMDMY22 INTERACT mom28_8
mom28_mx_reg2  = mom28_mx_reg1 INTERACT mom28_idt
mom28_mx_reg3  = mom28_mx_reg2 INTERACT MOMDMY0
mom28_mx_reg   = mom28_mx_reg3 INTERACT poly


fmom28_reg1        = mom28_8 NOT INTERACT mom28_idt
fmom28_reg2        = fmom28_reg1 INTERACT MOMDMY100
fmom28_reg3        = fmom28_reg2 NOT INTERACT MOMDMY22
fmom28_reg4        = fmom28_reg3 NOT INTERACT RFDMY
fmom28_reg5        = fmom28_reg4 NOT INTERACT MOMDMY27
fmom28_reg6        = fmom28_reg5 NOT INTERACT MOMDMY31
fmom28_reg7        = fmom28_reg6 NOT INTERACT MOMDMY32
fmom28_reg         = fmom28_reg7 NOT INTERACT MOMDMY33
 
fmom28_reg_n1      = fmom28_reg INTERACT n_poly                    
fmom28_reg_n       = fmom28_reg_n1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi N+poly shield wo DM
fmom28_reg_n_dm    = fmom28_reg_n1 INTERACT MOM_dmetal1_1           // FMOM 3T wi N+poly shield wi DM

fmom28_reg_p1      = fmom28_reg INTERACT p_poly                     
fmom28_reg_p       = fmom28_reg_p1 NOT INTERACT MOM_dmetal1_1       // FMOM 3T wi P+poly shield wo DM
fmom28_reg_p_dm    = fmom28_reg_p1 INTERACT MOM_dmetal1_1           // FMOM 3T wi P+poly shield wi DM

fmom28_reg_2t      = fmom28_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom28_reg_nw1     = fmom28_reg5 INTERACT MOMDMY31
fmom28_reg_nw2     = fmom28_reg_nw1 INTERACT nxwell
fmom28_reg_nw      = fmom28_reg_nw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi NW shield wo DM
fmom28_reg_nw_dm   = fmom28_reg_nw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi NW shield wi DM
 
fmom28_reg_pw1     = fmom28_reg6 INTERACT MOMDMY32
fmom28_reg_pw2     = fmom28_reg_pw1 INTERACT psub
fmom28_reg_pw      = fmom28_reg_pw2 NOT INTERACT MOM_dmetal1_1      // FMOM 3T wi PW shield wo DM
fmom28_reg_pw_dm   = fmom28_reg_pw2 INTERACT MOM_dmetal1_1          // FMOM 3T wi PW shield wi DM

fmom28_reg_ntn1    = fmom28_reg7 INTERACT MOMDMY33
fmom28_reg_ntn2    = fmom28_reg_ntn1 INTERACT NT_N
fmom28_reg_ntn3    = fmom28_reg_ntn2 NOT INTERACT MOMDMY28
fmom28_reg_ntn     = fmom28_reg_ntn3 NOT INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo DM
fmom28_reg_ntn_dm  = fmom28_reg_ntn3 INTERACT MOM_dmetal1_1         // FMOM 3T wi NTN shield wi DM

fmom28_reg_ntn_wo_pring1   = fmom28_reg_ntn2 INTERACT MOMDMY28             
fmom28_reg_ntn_wo_pring    = fmom28_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_1 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom28_reg_ntn_wo_pring_dm = fmom28_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_1     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom28_mx_reg1     = MOMDMY22 INTERACT mom28_8
fmom28_mx_reg2     = fmom28_mx_reg1 NOT INTERACT mom28_idt
fmom28_mx_reg3     = fmom28_mx_reg2 INTERACT MOMDMY100
fmom28_mx_reg4     = fmom28_mx_reg3 NOT INTERACT MOMDMY27
fmom28_mx_reg5     = fmom28_mx_reg4 NOT INTERACT MOMDMY31
fmom28_mx_reg6     = fmom28_mx_reg5 NOT INTERACT MOMDMY32
fmom28_mx_reg      = fmom28_mx_reg6 NOT INTERACT MOMDMY33

fmom28_mx_reg_n1   = fmom28_mx_reg  INTERACT n_poly
fmom28_mx_reg_n    = fmom28_mx_reg_n1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi N+poly shield wo DM
fmom28_mx_reg_n_dm = fmom28_mx_reg_n1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi N+poly shield wi DM

fmom28_mx_reg_p1   = fmom28_mx_reg  INTERACT p_poly
fmom28_mx_reg_p    = fmom28_mx_reg_p1 NOT INTERACT MOM_dmetal1_1    // FMOM MX 5T wi P+poly shield wo DM
fmom28_mx_reg_p_dm = fmom28_mx_reg_p1 INTERACT MOM_dmetal1_1        // FMOM MX 5T wi P+poly shield wi DM

fmom28_mx_reg_4t   = fmom28_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom28_mx_reg_nw1   = fmom28_mx_reg4 INTERACT MOMDMY31              
fmom28_mx_reg_nw2   = fmom28_mx_reg_nw1 INTERACT nxwell              
fmom28_mx_reg_nw    = fmom28_mx_reg_nw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi NW shield wo DM
fmom28_mx_reg_nw_dm = fmom28_mx_reg_nw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi NW shield wi DM

fmom28_mx_reg_pw1   = fmom28_mx_reg5 INTERACT MOMDMY32
fmom28_mx_reg_pw2   = fmom28_mx_reg_pw1 INTERACT psub
fmom28_mx_reg_pw    = fmom28_mx_reg_pw2 NOT INTERACT MOM_dmetal1_1  // FMOM MX 5T wi PW shield wo DM
fmom28_mx_reg_pw_dm = fmom28_mx_reg_pw2 INTERACT MOM_dmetal1_1      // FMOM MX 5T wi PW shield wi DM

fmom28_mx_reg_ntn1   = fmom28_mx_reg6 INTERACT MOMDMY33
fmom28_mx_reg_ntn2   = fmom28_mx_reg_ntn1 INTERACT NT_N
fmom28_mx_reg_ntn    = fmom28_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM MX 5T wi NTN shield wo DM
fmom28_mx_reg_ntn_dm = fmom28_mx_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM MX 5T wi NTN shield wi DM

fmom28_rf_reg1     = mom28_8 NOT INTERACT mom28_idt
fmom28_rf_reg2     = fmom28_rf_reg1 INTERACT MOMDMY100
fmom28_rf_reg3     = fmom28_rf_reg2 NOT INTERACT MOMDMY22
fmom28_rf_reg4     = fmom28_rf_reg3 INTERACT RFDMY
fmom28_rf_reg5     = fmom28_rf_reg4 NOT INTERACT MOMDMY27
fmom28_rf_reg6     = fmom28_rf_reg5 NOT INTERACT MOMDMY31
fmom28_rf_reg7     = fmom28_rf_reg6 NOT INTERACT MOMDMY32
fmom28_rf_reg8     = fmom28_rf_reg7 NOT INTERACT MOMDMY33

fmom28_rf_reg_nw1   = fmom28_rf_reg5 INTERACT MOMDMY31
fmom28_rf_reg_nw2   = fmom28_rf_reg_nw1 INTERACT nxwell              
fmom28_rf_reg_nw    = fmom28_rf_reg_nw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi NW shield wo DM
fmom28_rf_reg_nw_dm = fmom28_rf_reg_nw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi NW shield wi DM

fmom28_rf_reg_pw1   = fmom28_rf_reg6 INTERACT MOMDMY32
fmom28_rf_reg_pw2   = fmom28_rf_reg_pw1 INTERACT psub                
fmom28_rf_reg_pw    = fmom28_rf_reg_pw2 NOT INTERACT MOM_dmetal1_1   // FMOM 3T RF wi PW shield wo DM
fmom28_rf_reg_pw_dm = fmom28_rf_reg_pw2 INTERACT MOM_dmetal1_1       // FMOM 3T RF wi PW shield wi DM

fmom28_rf_reg_ntn1   = fmom28_rf_reg7 INTERACT MOMDMY33
fmom28_rf_reg_ntn2   = fmom28_rf_reg_ntn1 INTERACT NT_N
fmom28_rf_reg_ntn    = fmom28_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_1 // FMOM 3T RF wi NTN shield wo DM
fmom28_rf_reg_ntn_dm = fmom28_rf_reg_ntn2 INTERACT MOM_dmetal1_1     // FMOM 3T RF wi NTN shield wi DM

mom28_mx_aux   = mom28_8 AND MOMDMY22
mom28_extc = FM_tip8 NOT INTERACT MOM_field8 > 2

DEVICE cfmom fmom28_reg_n M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_n)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom28_reg_p M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_p)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom28_reg_n_dm M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom28_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_n_dm)/ nr
    ftip = area(mom28_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    ftip = area(mom28_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom28_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom28_reg_p_dm M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom28_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_p_dm)/ nr
    ftip = area(mom28_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    ftip = area(mom28_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom28_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom28_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_nw)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom28_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_pw)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom28_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_ntn)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom28_reg_ntn_wo_pring M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_ntn_wo_pring)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom28_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom28_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_nw_dm)/ nr
    ftip = area(mom28_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 1
    ftip = area(mom28_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom28_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom28_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_pw_dm)/ nr
    ftip = area(mom28_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 2
    ftip = area(mom28_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom28_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom28_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_ntn_dm)/ nr
    ftip = area(mom28_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 3
    ftip = area(mom28_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom28_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom28_reg_ntn_wo_pring_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom28_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 4
    ftip = area(mom28_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom28_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom28_reg_2t M8(PLUS) M8(MINUS) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_reg_2t)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
]


DEVICE cfmom_mx_4t fmom28_mx_reg_4t mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2)  <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
]


DEVICE cfmom_wo_rf fmom28_rf_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_rf_reg_nw)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom28_rf_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_rf_reg_pw)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom28_rf_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_rf_reg_ntn)/ nr
    ftip = area(mom28_extc) / nr / w
    s   = perimeter_coincide(MOM_hole2, fmom28_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom28_rf_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom28_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_rf_reg_nw_dm)/ nr
    ftip = area(mom28_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom28_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 1
    ftip = area(mom28_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom28_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom28_rf_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_rf_reg_pw_dm)/ nr
    ftip = area(mom28_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom28_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 2
    ftip = area(mom28_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom28_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom28_rf_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_extc>   <dmetal1> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field2)
    w =  perimeter_coincide(MOM_field2,fmom28_rf_reg_ntn_dm)/ nr
    ftip = area(mom28_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole2, fmom28_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole2) / 2 / (nr-1) - s - 2 * ftip
    stm = 2
    spm = 8
    shield = 3
    ftip = area(mom28_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom28_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom28_mx_reg_n mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    dmflag = 0
]
DEVICE cfmom_mx fmom28_mx_reg_p mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom28_mx_reg_nw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom28_mx_reg_pw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom28_mx_reg_ntn mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom28_mx_reg_n_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    ftip = area(mom28_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom28_mx_reg_p_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    ftip = area(mom28_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom28_mx_reg_nw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    shield = 1
    ftip = area(mom28_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom28_mx_reg_pw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    shield = 2
    ftip = area(mom28_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom28_mx_reg_ntn_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field2> <MOM_hole2> <mom28_mx_aux> <M8> <mom28_extc> <MOMDMY100>   <dmetal1> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field2)/mf1
    w =  perimeter_coincide(MOM_field2,mom28_mx_aux)/ (nr*mf1)
    ftip = area(mom28_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole2, mom28_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole2) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 2
    spm = 8
    shield = 3
    ftip = area(mom28_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom35_1 = MOMDMY5 NOT INTERACT MOM_field1
mom35_2 = mom35_1 NOT INTERACT MOM_field2


mom35_3 = mom35_2 INTERACT MOM_field3

mom35_4 = mom35_3 INTERACT MOM_field4

mom35_5 = mom35_4 INTERACT MOM_field5


mom35_idt = MOM_field5 NOT MOM_field4

mom35_Left6 = mom35_5 NOT INTERACT MOM_field6
mom35_Left7 = mom35_Left6 NOT INTERACT MOM_field7
mom35_Left8 = mom35_Left7 NOT INTERACT MOM_field8



mom35_reg1     = mom35_Left8 INTERACT mom35_idt
mom35_reg2     = mom35_reg1 INTERACT MOMDMY0
mom35_reg3     = mom35_reg2 NOT INTERACT MOMDMY22
mom35_reg4     = mom35_reg3 NOT INTERACT RFDMY
mom35_reg5     = mom35_reg4 NOT INTERACT MOMDMY27
mom35_reg6     = mom35_reg5 NOT INTERACT MOMDMY31
mom35_reg7     = mom35_reg6 NOT INTERACT MOMDMY32
mom35_reg      = mom35_reg7 NOT INTERACT MOMDMY33
 
mom35_reg_n    = mom35_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom35_reg_p    = mom35_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom35_reg_2t   = mom35_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom35_reg_nw1  = mom35_reg5 INTERACT MOMDMY31
mom35_reg_nw   = mom35_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom35_reg_pw1  = mom35_reg6 INTERACT MOMDMY32
mom35_reg_pw   = mom35_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom35_reg_ntn1 = mom35_reg7 INTERACT MOMDMY33
mom35_reg_ntn  = mom35_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom35_mx_reg1  = MOMDMY22 INTERACT mom35_Left8
mom35_mx_reg2  = mom35_mx_reg1 INTERACT mom35_idt
mom35_mx_reg3  = mom35_mx_reg2 INTERACT MOMDMY0
mom35_mx_reg   = mom35_mx_reg3 INTERACT poly


fmom35_reg1        = mom35_Left8 NOT INTERACT mom35_idt
fmom35_reg2        = fmom35_reg1 INTERACT MOMDMY100
fmom35_reg3        = fmom35_reg2 NOT INTERACT MOMDMY22
fmom35_reg4        = fmom35_reg3 NOT INTERACT RFDMY
fmom35_reg5        = fmom35_reg4 NOT INTERACT MOMDMY27
fmom35_reg6        = fmom35_reg5 NOT INTERACT MOMDMY31
fmom35_reg7        = fmom35_reg6 NOT INTERACT MOMDMY32
fmom35_reg         = fmom35_reg7 NOT INTERACT MOMDMY33
 
fmom35_reg_n1      = fmom35_reg INTERACT n_poly                    
fmom35_reg_n       = fmom35_reg_n1 NOT INTERACT MOM_dmetal1_2       // FMOM 3T wi N+poly shield wo DM
fmom35_reg_n_dm    = fmom35_reg_n1 INTERACT MOM_dmetal1_2           // FMOM 3T wi N+poly shield wi DM

fmom35_reg_p1      = fmom35_reg INTERACT p_poly                     
fmom35_reg_p       = fmom35_reg_p1 NOT INTERACT MOM_dmetal1_2       // FMOM 3T wi P+poly shield wo DM
fmom35_reg_p_dm    = fmom35_reg_p1 INTERACT MOM_dmetal1_2           // FMOM 3T wi P+poly shield wi DM

fmom35_reg_2t      = fmom35_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom35_reg_nw1     = fmom35_reg5 INTERACT MOMDMY31
fmom35_reg_nw2     = fmom35_reg_nw1 INTERACT nxwell
fmom35_reg_nw      = fmom35_reg_nw2 NOT INTERACT MOM_dmetal1_2      // FMOM 3T wi NW shield wo DM
fmom35_reg_nw_dm   = fmom35_reg_nw2 INTERACT MOM_dmetal1_2          // FMOM 3T wi NW shield wi DM
 
fmom35_reg_pw1     = fmom35_reg6 INTERACT MOMDMY32
fmom35_reg_pw2     = fmom35_reg_pw1 INTERACT psub
fmom35_reg_pw      = fmom35_reg_pw2 NOT INTERACT MOM_dmetal1_2      // FMOM 3T wi PW shield wo DM
fmom35_reg_pw_dm   = fmom35_reg_pw2 INTERACT MOM_dmetal1_2          // FMOM 3T wi PW shield wi DM

fmom35_reg_ntn1    = fmom35_reg7 INTERACT MOMDMY33
fmom35_reg_ntn2    = fmom35_reg_ntn1 INTERACT NT_N
fmom35_reg_ntn3    = fmom35_reg_ntn2 NOT INTERACT MOMDMY28
fmom35_reg_ntn     = fmom35_reg_ntn3 NOT INTERACT MOM_dmetal1_2     // FMOM 3T wi NTN shield wo DM
fmom35_reg_ntn_dm  = fmom35_reg_ntn3 INTERACT MOM_dmetal1_2         // FMOM 3T wi NTN shield wi DM

fmom35_reg_ntn_wo_pring1   = fmom35_reg_ntn2 INTERACT MOMDMY28             
fmom35_reg_ntn_wo_pring    = fmom35_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_2 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom35_reg_ntn_wo_pring_dm = fmom35_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_2     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom35_mx_reg1     = MOMDMY22 INTERACT mom35_Left8
fmom35_mx_reg2     = fmom35_mx_reg1 NOT INTERACT mom35_idt
fmom35_mx_reg3     = fmom35_mx_reg2 INTERACT MOMDMY100
fmom35_mx_reg4     = fmom35_mx_reg3 NOT INTERACT MOMDMY27
fmom35_mx_reg5     = fmom35_mx_reg4 NOT INTERACT MOMDMY31
fmom35_mx_reg6     = fmom35_mx_reg5 NOT INTERACT MOMDMY32
fmom35_mx_reg      = fmom35_mx_reg6 NOT INTERACT MOMDMY33

fmom35_mx_reg_n1   = fmom35_mx_reg  INTERACT n_poly
fmom35_mx_reg_n    = fmom35_mx_reg_n1 NOT INTERACT MOM_dmetal1_2    // FMOM MX 5T wi N+poly shield wo DM
fmom35_mx_reg_n_dm = fmom35_mx_reg_n1 INTERACT MOM_dmetal1_2        // FMOM MX 5T wi N+poly shield wi DM

fmom35_mx_reg_p1   = fmom35_mx_reg  INTERACT p_poly
fmom35_mx_reg_p    = fmom35_mx_reg_p1 NOT INTERACT MOM_dmetal1_2    // FMOM MX 5T wi P+poly shield wo DM
fmom35_mx_reg_p_dm = fmom35_mx_reg_p1 INTERACT MOM_dmetal1_2        // FMOM MX 5T wi P+poly shield wi DM

fmom35_mx_reg_4t   = fmom35_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom35_mx_reg_nw1   = fmom35_mx_reg4 INTERACT MOMDMY31              
fmom35_mx_reg_nw2   = fmom35_mx_reg_nw1 INTERACT nxwell              
fmom35_mx_reg_nw    = fmom35_mx_reg_nw2 NOT INTERACT MOM_dmetal1_2  // FMOM MX 5T wi NW shield wo DM
fmom35_mx_reg_nw_dm = fmom35_mx_reg_nw2 INTERACT MOM_dmetal1_2      // FMOM MX 5T wi NW shield wi DM

fmom35_mx_reg_pw1   = fmom35_mx_reg5 INTERACT MOMDMY32
fmom35_mx_reg_pw2   = fmom35_mx_reg_pw1 INTERACT psub
fmom35_mx_reg_pw    = fmom35_mx_reg_pw2 NOT INTERACT MOM_dmetal1_2  // FMOM MX 5T wi PW shield wo DM
fmom35_mx_reg_pw_dm = fmom35_mx_reg_pw2 INTERACT MOM_dmetal1_2      // FMOM MX 5T wi PW shield wi DM

fmom35_mx_reg_ntn1   = fmom35_mx_reg6 INTERACT MOMDMY33
fmom35_mx_reg_ntn2   = fmom35_mx_reg_ntn1 INTERACT NT_N
fmom35_mx_reg_ntn    = fmom35_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_2 // FMOM MX 5T wi NTN shield wo DM
fmom35_mx_reg_ntn_dm = fmom35_mx_reg_ntn2 INTERACT MOM_dmetal1_2     // FMOM MX 5T wi NTN shield wi DM

fmom35_rf_reg1     = mom35_Left8 NOT INTERACT mom35_idt
fmom35_rf_reg2     = fmom35_rf_reg1 INTERACT MOMDMY100
fmom35_rf_reg3     = fmom35_rf_reg2 NOT INTERACT MOMDMY22
fmom35_rf_reg4     = fmom35_rf_reg3 INTERACT RFDMY
fmom35_rf_reg5     = fmom35_rf_reg4 NOT INTERACT MOMDMY27
fmom35_rf_reg6     = fmom35_rf_reg5 NOT INTERACT MOMDMY31
fmom35_rf_reg7     = fmom35_rf_reg6 NOT INTERACT MOMDMY32
fmom35_rf_reg8     = fmom35_rf_reg7 NOT INTERACT MOMDMY33

fmom35_rf_reg_nw1   = fmom35_rf_reg5 INTERACT MOMDMY31
fmom35_rf_reg_nw2   = fmom35_rf_reg_nw1 INTERACT nxwell              
fmom35_rf_reg_nw    = fmom35_rf_reg_nw2 NOT INTERACT MOM_dmetal1_2   // FMOM 3T RF wi NW shield wo DM
fmom35_rf_reg_nw_dm = fmom35_rf_reg_nw2 INTERACT MOM_dmetal1_2       // FMOM 3T RF wi NW shield wi DM

fmom35_rf_reg_pw1   = fmom35_rf_reg6 INTERACT MOMDMY32
fmom35_rf_reg_pw2   = fmom35_rf_reg_pw1 INTERACT psub                
fmom35_rf_reg_pw    = fmom35_rf_reg_pw2 NOT INTERACT MOM_dmetal1_2   // FMOM 3T RF wi PW shield wo DM
fmom35_rf_reg_pw_dm = fmom35_rf_reg_pw2 INTERACT MOM_dmetal1_2       // FMOM 3T RF wi PW shield wi DM

fmom35_rf_reg_ntn1   = fmom35_rf_reg7 INTERACT MOMDMY33
fmom35_rf_reg_ntn2   = fmom35_rf_reg_ntn1 INTERACT NT_N
fmom35_rf_reg_ntn    = fmom35_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_2 // FMOM 3T RF wi NTN shield wo DM
fmom35_rf_reg_ntn_dm = fmom35_rf_reg_ntn2 INTERACT MOM_dmetal1_2     // FMOM 3T RF wi NTN shield wi DM

mom35_mx_aux   = mom35_Left8 AND MOMDMY22
mom35_extc = FM_tip5 NOT INTERACT MOM_field5 > 2

DEVICE cfmom fmom35_reg_n M5(PLUS) M5(MINUS) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_n)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    dmflag = 0
]
DEVICE cfmom fmom35_reg_p M5(PLUS) M5(MINUS) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_p)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    dmflag = 0
]
DEVICE cfmom fmom35_reg_n_dm M5(PLUS) M5(MINUS) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_n_dm)/ nr
    ftip = area(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    ftip = area(mom35_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom35_reg_p_dm M5(PLUS) M5(MINUS) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_p_dm)/ nr
    ftip = area(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    ftip = area(mom35_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom35_reg_nw M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_nw)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom35_reg_pw M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_pw)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom35_reg_ntn M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_ntn)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom35_reg_ntn_wo_pring M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_ntn_wo_pring)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom35_reg_nw_dm M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_nw_dm)/ nr
    ftip = area(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 1
    ftip = area(mom35_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom35_reg_pw_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_pw_dm)/ nr
    ftip = area(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 2
    ftip = area(mom35_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom35_reg_ntn_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_ntn_dm)/ nr
    ftip = area(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 3
    ftip = area(mom35_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom35_reg_ntn_wo_pring_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 4
    ftip = area(mom35_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom35_reg_2t M5(PLUS) M5(MINUS) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_reg_2t)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
]


DEVICE cfmom_mx_4t fmom35_mx_reg_4t mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2)  <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
]


DEVICE cfmom_wo_rf fmom35_rf_reg_nw M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_rf_reg_nw)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom35_rf_reg_pw M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_rf_reg_pw)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom35_rf_reg_ntn M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_rf_reg_ntn)/ nr
    ftip = area(mom35_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom35_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom35_rf_reg_nw_dm M5(PLUS) M5(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_rf_reg_nw_dm)/ nr
    ftip = area(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 1
    ftip = area(mom35_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom35_rf_reg_pw_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_rf_reg_pw_dm)/ nr
    ftip = area(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 2
    ftip = area(mom35_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom35_rf_reg_ntn_dm M5(PLUS) M5(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom35_rf_reg_ntn_dm)/ nr
    ftip = area(mom35_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom35_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 5
    shield = 3
    ftip = area(mom35_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom35_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom35_mx_reg_n mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    dmflag = 0
]
DEVICE cfmom_mx fmom35_mx_reg_p mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom35_mx_reg_nw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom35_mx_reg_pw mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom35_mx_reg_ntn mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom35_mx_reg_n_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    ftip = area(mom35_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom35_mx_reg_p_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    ftip = area(mom35_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom35_mx_reg_nw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    shield = 1
    ftip = area(mom35_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom35_mx_reg_pw_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    shield = 2
    ftip = area(mom35_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom35_mx_reg_ntn_dm mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom35_mx_aux> <M5> <mom35_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M5)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom35_mx_aux)/ (nr*mf1)
    ftip = area(mom35_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom35_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 5
    shield = 3
    ftip = area(mom35_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom36_1 = MOMDMY6 NOT INTERACT MOM_field1
mom36_2 = mom36_1 NOT INTERACT MOM_field2


mom36_3 = mom36_2 INTERACT MOM_field3

mom36_4 = mom36_3 INTERACT MOM_field4

mom36_5 = mom36_4 INTERACT MOM_field5

mom36_6 = mom36_5 INTERACT MOM_field6


mom36_idt = MOM_field6 NOT MOM_field5

mom36_Left7 = mom36_6 NOT INTERACT MOM_field7
mom36_Left8 = mom36_Left7 NOT INTERACT MOM_field8



mom36_reg1     = mom36_Left8 INTERACT mom36_idt
mom36_reg2     = mom36_reg1 INTERACT MOMDMY0
mom36_reg3     = mom36_reg2 NOT INTERACT MOMDMY22
mom36_reg4     = mom36_reg3 NOT INTERACT RFDMY
mom36_reg5     = mom36_reg4 NOT INTERACT MOMDMY27
mom36_reg6     = mom36_reg5 NOT INTERACT MOMDMY31
mom36_reg7     = mom36_reg6 NOT INTERACT MOMDMY32
mom36_reg      = mom36_reg7 NOT INTERACT MOMDMY33
 
mom36_reg_n    = mom36_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom36_reg_p    = mom36_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom36_reg_2t   = mom36_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom36_reg_nw1  = mom36_reg5 INTERACT MOMDMY31
mom36_reg_nw   = mom36_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom36_reg_pw1  = mom36_reg6 INTERACT MOMDMY32
mom36_reg_pw   = mom36_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom36_reg_ntn1 = mom36_reg7 INTERACT MOMDMY33
mom36_reg_ntn  = mom36_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom36_mx_reg1  = MOMDMY22 INTERACT mom36_Left8
mom36_mx_reg2  = mom36_mx_reg1 INTERACT mom36_idt
mom36_mx_reg3  = mom36_mx_reg2 INTERACT MOMDMY0
mom36_mx_reg   = mom36_mx_reg3 INTERACT poly


fmom36_reg1        = mom36_Left8 NOT INTERACT mom36_idt
fmom36_reg2        = fmom36_reg1 INTERACT MOMDMY100
fmom36_reg3        = fmom36_reg2 NOT INTERACT MOMDMY22
fmom36_reg4        = fmom36_reg3 NOT INTERACT RFDMY
fmom36_reg5        = fmom36_reg4 NOT INTERACT MOMDMY27
fmom36_reg6        = fmom36_reg5 NOT INTERACT MOMDMY31
fmom36_reg7        = fmom36_reg6 NOT INTERACT MOMDMY32
fmom36_reg         = fmom36_reg7 NOT INTERACT MOMDMY33
 
fmom36_reg_n1      = fmom36_reg INTERACT n_poly                    
fmom36_reg_n       = fmom36_reg_n1 NOT INTERACT MOM_dmetal1_2       // FMOM 3T wi N+poly shield wo DM
fmom36_reg_n_dm    = fmom36_reg_n1 INTERACT MOM_dmetal1_2           // FMOM 3T wi N+poly shield wi DM

fmom36_reg_p1      = fmom36_reg INTERACT p_poly                     
fmom36_reg_p       = fmom36_reg_p1 NOT INTERACT MOM_dmetal1_2       // FMOM 3T wi P+poly shield wo DM
fmom36_reg_p_dm    = fmom36_reg_p1 INTERACT MOM_dmetal1_2           // FMOM 3T wi P+poly shield wi DM

fmom36_reg_2t      = fmom36_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom36_reg_nw1     = fmom36_reg5 INTERACT MOMDMY31
fmom36_reg_nw2     = fmom36_reg_nw1 INTERACT nxwell
fmom36_reg_nw      = fmom36_reg_nw2 NOT INTERACT MOM_dmetal1_2      // FMOM 3T wi NW shield wo DM
fmom36_reg_nw_dm   = fmom36_reg_nw2 INTERACT MOM_dmetal1_2          // FMOM 3T wi NW shield wi DM
 
fmom36_reg_pw1     = fmom36_reg6 INTERACT MOMDMY32
fmom36_reg_pw2     = fmom36_reg_pw1 INTERACT psub
fmom36_reg_pw      = fmom36_reg_pw2 NOT INTERACT MOM_dmetal1_2      // FMOM 3T wi PW shield wo DM
fmom36_reg_pw_dm   = fmom36_reg_pw2 INTERACT MOM_dmetal1_2          // FMOM 3T wi PW shield wi DM

fmom36_reg_ntn1    = fmom36_reg7 INTERACT MOMDMY33
fmom36_reg_ntn2    = fmom36_reg_ntn1 INTERACT NT_N
fmom36_reg_ntn3    = fmom36_reg_ntn2 NOT INTERACT MOMDMY28
fmom36_reg_ntn     = fmom36_reg_ntn3 NOT INTERACT MOM_dmetal1_2     // FMOM 3T wi NTN shield wo DM
fmom36_reg_ntn_dm  = fmom36_reg_ntn3 INTERACT MOM_dmetal1_2         // FMOM 3T wi NTN shield wi DM

fmom36_reg_ntn_wo_pring1   = fmom36_reg_ntn2 INTERACT MOMDMY28             
fmom36_reg_ntn_wo_pring    = fmom36_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_2 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom36_reg_ntn_wo_pring_dm = fmom36_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_2     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom36_mx_reg1     = MOMDMY22 INTERACT mom36_Left8
fmom36_mx_reg2     = fmom36_mx_reg1 NOT INTERACT mom36_idt
fmom36_mx_reg3     = fmom36_mx_reg2 INTERACT MOMDMY100
fmom36_mx_reg4     = fmom36_mx_reg3 NOT INTERACT MOMDMY27
fmom36_mx_reg5     = fmom36_mx_reg4 NOT INTERACT MOMDMY31
fmom36_mx_reg6     = fmom36_mx_reg5 NOT INTERACT MOMDMY32
fmom36_mx_reg      = fmom36_mx_reg6 NOT INTERACT MOMDMY33

fmom36_mx_reg_n1   = fmom36_mx_reg  INTERACT n_poly
fmom36_mx_reg_n    = fmom36_mx_reg_n1 NOT INTERACT MOM_dmetal1_2    // FMOM MX 5T wi N+poly shield wo DM
fmom36_mx_reg_n_dm = fmom36_mx_reg_n1 INTERACT MOM_dmetal1_2        // FMOM MX 5T wi N+poly shield wi DM

fmom36_mx_reg_p1   = fmom36_mx_reg  INTERACT p_poly
fmom36_mx_reg_p    = fmom36_mx_reg_p1 NOT INTERACT MOM_dmetal1_2    // FMOM MX 5T wi P+poly shield wo DM
fmom36_mx_reg_p_dm = fmom36_mx_reg_p1 INTERACT MOM_dmetal1_2        // FMOM MX 5T wi P+poly shield wi DM

fmom36_mx_reg_4t   = fmom36_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom36_mx_reg_nw1   = fmom36_mx_reg4 INTERACT MOMDMY31              
fmom36_mx_reg_nw2   = fmom36_mx_reg_nw1 INTERACT nxwell              
fmom36_mx_reg_nw    = fmom36_mx_reg_nw2 NOT INTERACT MOM_dmetal1_2  // FMOM MX 5T wi NW shield wo DM
fmom36_mx_reg_nw_dm = fmom36_mx_reg_nw2 INTERACT MOM_dmetal1_2      // FMOM MX 5T wi NW shield wi DM

fmom36_mx_reg_pw1   = fmom36_mx_reg5 INTERACT MOMDMY32
fmom36_mx_reg_pw2   = fmom36_mx_reg_pw1 INTERACT psub
fmom36_mx_reg_pw    = fmom36_mx_reg_pw2 NOT INTERACT MOM_dmetal1_2  // FMOM MX 5T wi PW shield wo DM
fmom36_mx_reg_pw_dm = fmom36_mx_reg_pw2 INTERACT MOM_dmetal1_2      // FMOM MX 5T wi PW shield wi DM

fmom36_mx_reg_ntn1   = fmom36_mx_reg6 INTERACT MOMDMY33
fmom36_mx_reg_ntn2   = fmom36_mx_reg_ntn1 INTERACT NT_N
fmom36_mx_reg_ntn    = fmom36_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_2 // FMOM MX 5T wi NTN shield wo DM
fmom36_mx_reg_ntn_dm = fmom36_mx_reg_ntn2 INTERACT MOM_dmetal1_2     // FMOM MX 5T wi NTN shield wi DM

fmom36_rf_reg1     = mom36_Left8 NOT INTERACT mom36_idt
fmom36_rf_reg2     = fmom36_rf_reg1 INTERACT MOMDMY100
fmom36_rf_reg3     = fmom36_rf_reg2 NOT INTERACT MOMDMY22
fmom36_rf_reg4     = fmom36_rf_reg3 INTERACT RFDMY
fmom36_rf_reg5     = fmom36_rf_reg4 NOT INTERACT MOMDMY27
fmom36_rf_reg6     = fmom36_rf_reg5 NOT INTERACT MOMDMY31
fmom36_rf_reg7     = fmom36_rf_reg6 NOT INTERACT MOMDMY32
fmom36_rf_reg8     = fmom36_rf_reg7 NOT INTERACT MOMDMY33

fmom36_rf_reg_nw1   = fmom36_rf_reg5 INTERACT MOMDMY31
fmom36_rf_reg_nw2   = fmom36_rf_reg_nw1 INTERACT nxwell              
fmom36_rf_reg_nw    = fmom36_rf_reg_nw2 NOT INTERACT MOM_dmetal1_2   // FMOM 3T RF wi NW shield wo DM
fmom36_rf_reg_nw_dm = fmom36_rf_reg_nw2 INTERACT MOM_dmetal1_2       // FMOM 3T RF wi NW shield wi DM

fmom36_rf_reg_pw1   = fmom36_rf_reg6 INTERACT MOMDMY32
fmom36_rf_reg_pw2   = fmom36_rf_reg_pw1 INTERACT psub                
fmom36_rf_reg_pw    = fmom36_rf_reg_pw2 NOT INTERACT MOM_dmetal1_2   // FMOM 3T RF wi PW shield wo DM
fmom36_rf_reg_pw_dm = fmom36_rf_reg_pw2 INTERACT MOM_dmetal1_2       // FMOM 3T RF wi PW shield wi DM

fmom36_rf_reg_ntn1   = fmom36_rf_reg7 INTERACT MOMDMY33
fmom36_rf_reg_ntn2   = fmom36_rf_reg_ntn1 INTERACT NT_N
fmom36_rf_reg_ntn    = fmom36_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_2 // FMOM 3T RF wi NTN shield wo DM
fmom36_rf_reg_ntn_dm = fmom36_rf_reg_ntn2 INTERACT MOM_dmetal1_2     // FMOM 3T RF wi NTN shield wi DM

mom36_mx_aux   = mom36_Left8 AND MOMDMY22
mom36_extc = FM_tip6 NOT INTERACT MOM_field6 > 2

DEVICE cfmom fmom36_reg_n M6(PLUS) M6(MINUS) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_n)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    dmflag = 0
]
DEVICE cfmom fmom36_reg_p M6(PLUS) M6(MINUS) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_p)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    dmflag = 0
]
DEVICE cfmom fmom36_reg_n_dm M6(PLUS) M6(MINUS) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom36_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_n_dm)/ nr
    ftip = area(mom36_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    ftip = area(mom36_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom36_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom36_reg_p_dm M6(PLUS) M6(MINUS) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom36_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_p_dm)/ nr
    ftip = area(mom36_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    ftip = area(mom36_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom36_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom36_reg_nw M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_nw)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom36_reg_pw M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_pw)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom36_reg_ntn M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_ntn)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom36_reg_ntn_wo_pring M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_ntn_wo_pring)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom36_reg_nw_dm M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom36_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_nw_dm)/ nr
    ftip = area(mom36_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 1
    ftip = area(mom36_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom36_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom36_reg_pw_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_pw_dm)/ nr
    ftip = area(mom36_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 2
    ftip = area(mom36_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom36_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom36_reg_ntn_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_ntn_dm)/ nr
    ftip = area(mom36_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 3
    ftip = area(mom36_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom36_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom36_reg_ntn_wo_pring_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom36_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 4
    ftip = area(mom36_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom36_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom36_reg_2t M6(PLUS) M6(MINUS) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_reg_2t)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
]


DEVICE cfmom_mx_4t fmom36_mx_reg_4t mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2)  <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
]


DEVICE cfmom_wo_rf fmom36_rf_reg_nw M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_rf_reg_nw)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom36_rf_reg_pw M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_rf_reg_pw)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom36_rf_reg_ntn M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_rf_reg_ntn)/ nr
    ftip = area(mom36_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom36_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom36_rf_reg_nw_dm M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom36_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_rf_reg_nw_dm)/ nr
    ftip = area(mom36_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom36_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 1
    ftip = area(mom36_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom36_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom36_rf_reg_pw_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_rf_reg_pw_dm)/ nr
    ftip = area(mom36_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom36_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 2
    ftip = area(mom36_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom36_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom36_rf_reg_ntn_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom36_rf_reg_ntn_dm)/ nr
    ftip = area(mom36_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom36_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 6
    shield = 3
    ftip = area(mom36_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom36_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom36_mx_reg_n mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    dmflag = 0
]
DEVICE cfmom_mx fmom36_mx_reg_p mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom36_mx_reg_nw mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom36_mx_reg_pw mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom36_mx_reg_ntn mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom36_mx_reg_n_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    ftip = area(mom36_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom36_mx_reg_p_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    ftip = area(mom36_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom36_mx_reg_nw_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    shield = 1
    ftip = area(mom36_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom36_mx_reg_pw_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    shield = 2
    ftip = area(mom36_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom36_mx_reg_ntn_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom36_mx_aux> <M6> <mom36_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom36_mx_aux)/ (nr*mf1)
    ftip = area(mom36_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom36_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 6
    shield = 3
    ftip = area(mom36_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom37_1 = MOMDMY7 NOT INTERACT MOM_field1
mom37_2 = mom37_1 NOT INTERACT MOM_field2


mom37_3 = mom37_2 INTERACT MOM_field3

mom37_4 = mom37_3 INTERACT MOM_field4

mom37_5 = mom37_4 INTERACT MOM_field5

mom37_6 = mom37_5 INTERACT MOM_field6

mom37_7 = mom37_6 INTERACT MOM_field7


mom37_idt = MOM_field7 NOT MOM_field6

mom37_Left8 = mom37_7 NOT INTERACT MOM_field8



mom37_reg1     = mom37_Left8 INTERACT mom37_idt
mom37_reg2     = mom37_reg1 INTERACT MOMDMY0
mom37_reg3     = mom37_reg2 NOT INTERACT MOMDMY22
mom37_reg4     = mom37_reg3 NOT INTERACT RFDMY
mom37_reg5     = mom37_reg4 NOT INTERACT MOMDMY27
mom37_reg6     = mom37_reg5 NOT INTERACT MOMDMY31
mom37_reg7     = mom37_reg6 NOT INTERACT MOMDMY32
mom37_reg      = mom37_reg7 NOT INTERACT MOMDMY33
 
mom37_reg_n    = mom37_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom37_reg_p    = mom37_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom37_reg_2t   = mom37_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom37_reg_nw1  = mom37_reg5 INTERACT MOMDMY31
mom37_reg_nw   = mom37_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom37_reg_pw1  = mom37_reg6 INTERACT MOMDMY32
mom37_reg_pw   = mom37_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom37_reg_ntn1 = mom37_reg7 INTERACT MOMDMY33
mom37_reg_ntn  = mom37_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom37_mx_reg1  = MOMDMY22 INTERACT mom37_Left8
mom37_mx_reg2  = mom37_mx_reg1 INTERACT mom37_idt
mom37_mx_reg3  = mom37_mx_reg2 INTERACT MOMDMY0
mom37_mx_reg   = mom37_mx_reg3 INTERACT poly


fmom37_reg1        = mom37_Left8 NOT INTERACT mom37_idt
fmom37_reg2        = fmom37_reg1 INTERACT MOMDMY100
fmom37_reg3        = fmom37_reg2 NOT INTERACT MOMDMY22
fmom37_reg4        = fmom37_reg3 NOT INTERACT RFDMY
fmom37_reg5        = fmom37_reg4 NOT INTERACT MOMDMY27
fmom37_reg6        = fmom37_reg5 NOT INTERACT MOMDMY31
fmom37_reg7        = fmom37_reg6 NOT INTERACT MOMDMY32
fmom37_reg         = fmom37_reg7 NOT INTERACT MOMDMY33
 
fmom37_reg_n1      = fmom37_reg INTERACT n_poly                    
fmom37_reg_n       = fmom37_reg_n1 NOT INTERACT MOM_dmetal1_2       // FMOM 3T wi N+poly shield wo DM
fmom37_reg_n_dm    = fmom37_reg_n1 INTERACT MOM_dmetal1_2           // FMOM 3T wi N+poly shield wi DM

fmom37_reg_p1      = fmom37_reg INTERACT p_poly                     
fmom37_reg_p       = fmom37_reg_p1 NOT INTERACT MOM_dmetal1_2       // FMOM 3T wi P+poly shield wo DM
fmom37_reg_p_dm    = fmom37_reg_p1 INTERACT MOM_dmetal1_2           // FMOM 3T wi P+poly shield wi DM

fmom37_reg_2t      = fmom37_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom37_reg_nw1     = fmom37_reg5 INTERACT MOMDMY31
fmom37_reg_nw2     = fmom37_reg_nw1 INTERACT nxwell
fmom37_reg_nw      = fmom37_reg_nw2 NOT INTERACT MOM_dmetal1_2      // FMOM 3T wi NW shield wo DM
fmom37_reg_nw_dm   = fmom37_reg_nw2 INTERACT MOM_dmetal1_2          // FMOM 3T wi NW shield wi DM
 
fmom37_reg_pw1     = fmom37_reg6 INTERACT MOMDMY32
fmom37_reg_pw2     = fmom37_reg_pw1 INTERACT psub
fmom37_reg_pw      = fmom37_reg_pw2 NOT INTERACT MOM_dmetal1_2      // FMOM 3T wi PW shield wo DM
fmom37_reg_pw_dm   = fmom37_reg_pw2 INTERACT MOM_dmetal1_2          // FMOM 3T wi PW shield wi DM

fmom37_reg_ntn1    = fmom37_reg7 INTERACT MOMDMY33
fmom37_reg_ntn2    = fmom37_reg_ntn1 INTERACT NT_N
fmom37_reg_ntn3    = fmom37_reg_ntn2 NOT INTERACT MOMDMY28
fmom37_reg_ntn     = fmom37_reg_ntn3 NOT INTERACT MOM_dmetal1_2     // FMOM 3T wi NTN shield wo DM
fmom37_reg_ntn_dm  = fmom37_reg_ntn3 INTERACT MOM_dmetal1_2         // FMOM 3T wi NTN shield wi DM

fmom37_reg_ntn_wo_pring1   = fmom37_reg_ntn2 INTERACT MOMDMY28             
fmom37_reg_ntn_wo_pring    = fmom37_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_2 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom37_reg_ntn_wo_pring_dm = fmom37_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_2     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom37_mx_reg1     = MOMDMY22 INTERACT mom37_Left8
fmom37_mx_reg2     = fmom37_mx_reg1 NOT INTERACT mom37_idt
fmom37_mx_reg3     = fmom37_mx_reg2 INTERACT MOMDMY100
fmom37_mx_reg4     = fmom37_mx_reg3 NOT INTERACT MOMDMY27
fmom37_mx_reg5     = fmom37_mx_reg4 NOT INTERACT MOMDMY31
fmom37_mx_reg6     = fmom37_mx_reg5 NOT INTERACT MOMDMY32
fmom37_mx_reg      = fmom37_mx_reg6 NOT INTERACT MOMDMY33

fmom37_mx_reg_n1   = fmom37_mx_reg  INTERACT n_poly
fmom37_mx_reg_n    = fmom37_mx_reg_n1 NOT INTERACT MOM_dmetal1_2    // FMOM MX 5T wi N+poly shield wo DM
fmom37_mx_reg_n_dm = fmom37_mx_reg_n1 INTERACT MOM_dmetal1_2        // FMOM MX 5T wi N+poly shield wi DM

fmom37_mx_reg_p1   = fmom37_mx_reg  INTERACT p_poly
fmom37_mx_reg_p    = fmom37_mx_reg_p1 NOT INTERACT MOM_dmetal1_2    // FMOM MX 5T wi P+poly shield wo DM
fmom37_mx_reg_p_dm = fmom37_mx_reg_p1 INTERACT MOM_dmetal1_2        // FMOM MX 5T wi P+poly shield wi DM

fmom37_mx_reg_4t   = fmom37_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom37_mx_reg_nw1   = fmom37_mx_reg4 INTERACT MOMDMY31              
fmom37_mx_reg_nw2   = fmom37_mx_reg_nw1 INTERACT nxwell              
fmom37_mx_reg_nw    = fmom37_mx_reg_nw2 NOT INTERACT MOM_dmetal1_2  // FMOM MX 5T wi NW shield wo DM
fmom37_mx_reg_nw_dm = fmom37_mx_reg_nw2 INTERACT MOM_dmetal1_2      // FMOM MX 5T wi NW shield wi DM

fmom37_mx_reg_pw1   = fmom37_mx_reg5 INTERACT MOMDMY32
fmom37_mx_reg_pw2   = fmom37_mx_reg_pw1 INTERACT psub
fmom37_mx_reg_pw    = fmom37_mx_reg_pw2 NOT INTERACT MOM_dmetal1_2  // FMOM MX 5T wi PW shield wo DM
fmom37_mx_reg_pw_dm = fmom37_mx_reg_pw2 INTERACT MOM_dmetal1_2      // FMOM MX 5T wi PW shield wi DM

fmom37_mx_reg_ntn1   = fmom37_mx_reg6 INTERACT MOMDMY33
fmom37_mx_reg_ntn2   = fmom37_mx_reg_ntn1 INTERACT NT_N
fmom37_mx_reg_ntn    = fmom37_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_2 // FMOM MX 5T wi NTN shield wo DM
fmom37_mx_reg_ntn_dm = fmom37_mx_reg_ntn2 INTERACT MOM_dmetal1_2     // FMOM MX 5T wi NTN shield wi DM

fmom37_rf_reg1     = mom37_Left8 NOT INTERACT mom37_idt
fmom37_rf_reg2     = fmom37_rf_reg1 INTERACT MOMDMY100
fmom37_rf_reg3     = fmom37_rf_reg2 NOT INTERACT MOMDMY22
fmom37_rf_reg4     = fmom37_rf_reg3 INTERACT RFDMY
fmom37_rf_reg5     = fmom37_rf_reg4 NOT INTERACT MOMDMY27
fmom37_rf_reg6     = fmom37_rf_reg5 NOT INTERACT MOMDMY31
fmom37_rf_reg7     = fmom37_rf_reg6 NOT INTERACT MOMDMY32
fmom37_rf_reg8     = fmom37_rf_reg7 NOT INTERACT MOMDMY33

fmom37_rf_reg_nw1   = fmom37_rf_reg5 INTERACT MOMDMY31
fmom37_rf_reg_nw2   = fmom37_rf_reg_nw1 INTERACT nxwell              
fmom37_rf_reg_nw    = fmom37_rf_reg_nw2 NOT INTERACT MOM_dmetal1_2   // FMOM 3T RF wi NW shield wo DM
fmom37_rf_reg_nw_dm = fmom37_rf_reg_nw2 INTERACT MOM_dmetal1_2       // FMOM 3T RF wi NW shield wi DM

fmom37_rf_reg_pw1   = fmom37_rf_reg6 INTERACT MOMDMY32
fmom37_rf_reg_pw2   = fmom37_rf_reg_pw1 INTERACT psub                
fmom37_rf_reg_pw    = fmom37_rf_reg_pw2 NOT INTERACT MOM_dmetal1_2   // FMOM 3T RF wi PW shield wo DM
fmom37_rf_reg_pw_dm = fmom37_rf_reg_pw2 INTERACT MOM_dmetal1_2       // FMOM 3T RF wi PW shield wi DM

fmom37_rf_reg_ntn1   = fmom37_rf_reg7 INTERACT MOMDMY33
fmom37_rf_reg_ntn2   = fmom37_rf_reg_ntn1 INTERACT NT_N
fmom37_rf_reg_ntn    = fmom37_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_2 // FMOM 3T RF wi NTN shield wo DM
fmom37_rf_reg_ntn_dm = fmom37_rf_reg_ntn2 INTERACT MOM_dmetal1_2     // FMOM 3T RF wi NTN shield wi DM

mom37_mx_aux   = mom37_Left8 AND MOMDMY22
mom37_extc = FM_tip7 NOT INTERACT MOM_field7 > 2

DEVICE cfmom fmom37_reg_n M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_n)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom37_reg_p M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_p)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom37_reg_n_dm M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom37_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_n_dm)/ nr
    ftip = area(mom37_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    ftip = area(mom37_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom37_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom37_reg_p_dm M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom37_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_p_dm)/ nr
    ftip = area(mom37_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    ftip = area(mom37_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom37_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom37_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_nw)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom37_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_pw)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom37_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_ntn)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom37_reg_ntn_wo_pring M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_ntn_wo_pring)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom37_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom37_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_nw_dm)/ nr
    ftip = area(mom37_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 1
    ftip = area(mom37_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom37_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom37_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_pw_dm)/ nr
    ftip = area(mom37_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 2
    ftip = area(mom37_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom37_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom37_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_ntn_dm)/ nr
    ftip = area(mom37_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 3
    ftip = area(mom37_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom37_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom37_reg_ntn_wo_pring_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom37_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 4
    ftip = area(mom37_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom37_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom37_reg_2t M7(PLUS) M7(MINUS) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_reg_2t)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
]


DEVICE cfmom_mx_4t fmom37_mx_reg_4t mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2)  <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
]


DEVICE cfmom_wo_rf fmom37_rf_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_rf_reg_nw)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom37_rf_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_rf_reg_pw)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom37_rf_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_rf_reg_ntn)/ nr
    ftip = area(mom37_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom37_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom37_rf_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom37_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_rf_reg_nw_dm)/ nr
    ftip = area(mom37_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom37_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 1
    ftip = area(mom37_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom37_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom37_rf_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_rf_reg_pw_dm)/ nr
    ftip = area(mom37_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom37_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 2
    ftip = area(mom37_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom37_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom37_rf_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom37_rf_reg_ntn_dm)/ nr
    ftip = area(mom37_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom37_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 7
    shield = 3
    ftip = area(mom37_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom37_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom37_mx_reg_n mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    dmflag = 0
]
DEVICE cfmom_mx fmom37_mx_reg_p mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom37_mx_reg_nw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom37_mx_reg_pw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom37_mx_reg_ntn mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom37_mx_reg_n_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    ftip = area(mom37_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom37_mx_reg_p_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    ftip = area(mom37_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom37_mx_reg_nw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    shield = 1
    ftip = area(mom37_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom37_mx_reg_pw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    shield = 2
    ftip = area(mom37_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom37_mx_reg_ntn_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom37_mx_aux> <M7> <mom37_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom37_mx_aux)/ (nr*mf1)
    ftip = area(mom37_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom37_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 7
    shield = 3
    ftip = area(mom37_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom38_1 = MOMDMY8 NOT INTERACT MOM_field1
mom38_2 = mom38_1 NOT INTERACT MOM_field2


mom38_3 = mom38_2 INTERACT MOM_field3

mom38_4 = mom38_3 INTERACT MOM_field4

mom38_5 = mom38_4 INTERACT MOM_field5

mom38_6 = mom38_5 INTERACT MOM_field6

mom38_7 = mom38_6 INTERACT MOM_field7

mom38_8 = mom38_7 INTERACT MOM_field8


mom38_idt = MOM_field8 NOT MOM_field7




mom38_reg1     = mom38_8 INTERACT mom38_idt
mom38_reg2     = mom38_reg1 INTERACT MOMDMY0
mom38_reg3     = mom38_reg2 NOT INTERACT MOMDMY22
mom38_reg4     = mom38_reg3 NOT INTERACT RFDMY
mom38_reg5     = mom38_reg4 NOT INTERACT MOMDMY27
mom38_reg6     = mom38_reg5 NOT INTERACT MOMDMY31
mom38_reg7     = mom38_reg6 NOT INTERACT MOMDMY32
mom38_reg      = mom38_reg7 NOT INTERACT MOMDMY33
 
mom38_reg_n    = mom38_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom38_reg_p    = mom38_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom38_reg_2t   = mom38_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom38_reg_nw1  = mom38_reg5 INTERACT MOMDMY31
mom38_reg_nw   = mom38_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom38_reg_pw1  = mom38_reg6 INTERACT MOMDMY32
mom38_reg_pw   = mom38_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom38_reg_ntn1 = mom38_reg7 INTERACT MOMDMY33
mom38_reg_ntn  = mom38_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom38_mx_reg1  = MOMDMY22 INTERACT mom38_8
mom38_mx_reg2  = mom38_mx_reg1 INTERACT mom38_idt
mom38_mx_reg3  = mom38_mx_reg2 INTERACT MOMDMY0
mom38_mx_reg   = mom38_mx_reg3 INTERACT poly


fmom38_reg1        = mom38_8 NOT INTERACT mom38_idt
fmom38_reg2        = fmom38_reg1 INTERACT MOMDMY100
fmom38_reg3        = fmom38_reg2 NOT INTERACT MOMDMY22
fmom38_reg4        = fmom38_reg3 NOT INTERACT RFDMY
fmom38_reg5        = fmom38_reg4 NOT INTERACT MOMDMY27
fmom38_reg6        = fmom38_reg5 NOT INTERACT MOMDMY31
fmom38_reg7        = fmom38_reg6 NOT INTERACT MOMDMY32
fmom38_reg         = fmom38_reg7 NOT INTERACT MOMDMY33
 
fmom38_reg_n1      = fmom38_reg INTERACT n_poly                    
fmom38_reg_n       = fmom38_reg_n1 NOT INTERACT MOM_dmetal1_2       // FMOM 3T wi N+poly shield wo DM
fmom38_reg_n_dm    = fmom38_reg_n1 INTERACT MOM_dmetal1_2           // FMOM 3T wi N+poly shield wi DM

fmom38_reg_p1      = fmom38_reg INTERACT p_poly                     
fmom38_reg_p       = fmom38_reg_p1 NOT INTERACT MOM_dmetal1_2       // FMOM 3T wi P+poly shield wo DM
fmom38_reg_p_dm    = fmom38_reg_p1 INTERACT MOM_dmetal1_2           // FMOM 3T wi P+poly shield wi DM

fmom38_reg_2t      = fmom38_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom38_reg_nw1     = fmom38_reg5 INTERACT MOMDMY31
fmom38_reg_nw2     = fmom38_reg_nw1 INTERACT nxwell
fmom38_reg_nw      = fmom38_reg_nw2 NOT INTERACT MOM_dmetal1_2      // FMOM 3T wi NW shield wo DM
fmom38_reg_nw_dm   = fmom38_reg_nw2 INTERACT MOM_dmetal1_2          // FMOM 3T wi NW shield wi DM
 
fmom38_reg_pw1     = fmom38_reg6 INTERACT MOMDMY32
fmom38_reg_pw2     = fmom38_reg_pw1 INTERACT psub
fmom38_reg_pw      = fmom38_reg_pw2 NOT INTERACT MOM_dmetal1_2      // FMOM 3T wi PW shield wo DM
fmom38_reg_pw_dm   = fmom38_reg_pw2 INTERACT MOM_dmetal1_2          // FMOM 3T wi PW shield wi DM

fmom38_reg_ntn1    = fmom38_reg7 INTERACT MOMDMY33
fmom38_reg_ntn2    = fmom38_reg_ntn1 INTERACT NT_N
fmom38_reg_ntn3    = fmom38_reg_ntn2 NOT INTERACT MOMDMY28
fmom38_reg_ntn     = fmom38_reg_ntn3 NOT INTERACT MOM_dmetal1_2     // FMOM 3T wi NTN shield wo DM
fmom38_reg_ntn_dm  = fmom38_reg_ntn3 INTERACT MOM_dmetal1_2         // FMOM 3T wi NTN shield wi DM

fmom38_reg_ntn_wo_pring1   = fmom38_reg_ntn2 INTERACT MOMDMY28             
fmom38_reg_ntn_wo_pring    = fmom38_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_2 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom38_reg_ntn_wo_pring_dm = fmom38_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_2     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom38_mx_reg1     = MOMDMY22 INTERACT mom38_8
fmom38_mx_reg2     = fmom38_mx_reg1 NOT INTERACT mom38_idt
fmom38_mx_reg3     = fmom38_mx_reg2 INTERACT MOMDMY100
fmom38_mx_reg4     = fmom38_mx_reg3 NOT INTERACT MOMDMY27
fmom38_mx_reg5     = fmom38_mx_reg4 NOT INTERACT MOMDMY31
fmom38_mx_reg6     = fmom38_mx_reg5 NOT INTERACT MOMDMY32
fmom38_mx_reg      = fmom38_mx_reg6 NOT INTERACT MOMDMY33

fmom38_mx_reg_n1   = fmom38_mx_reg  INTERACT n_poly
fmom38_mx_reg_n    = fmom38_mx_reg_n1 NOT INTERACT MOM_dmetal1_2    // FMOM MX 5T wi N+poly shield wo DM
fmom38_mx_reg_n_dm = fmom38_mx_reg_n1 INTERACT MOM_dmetal1_2        // FMOM MX 5T wi N+poly shield wi DM

fmom38_mx_reg_p1   = fmom38_mx_reg  INTERACT p_poly
fmom38_mx_reg_p    = fmom38_mx_reg_p1 NOT INTERACT MOM_dmetal1_2    // FMOM MX 5T wi P+poly shield wo DM
fmom38_mx_reg_p_dm = fmom38_mx_reg_p1 INTERACT MOM_dmetal1_2        // FMOM MX 5T wi P+poly shield wi DM

fmom38_mx_reg_4t   = fmom38_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom38_mx_reg_nw1   = fmom38_mx_reg4 INTERACT MOMDMY31              
fmom38_mx_reg_nw2   = fmom38_mx_reg_nw1 INTERACT nxwell              
fmom38_mx_reg_nw    = fmom38_mx_reg_nw2 NOT INTERACT MOM_dmetal1_2  // FMOM MX 5T wi NW shield wo DM
fmom38_mx_reg_nw_dm = fmom38_mx_reg_nw2 INTERACT MOM_dmetal1_2      // FMOM MX 5T wi NW shield wi DM

fmom38_mx_reg_pw1   = fmom38_mx_reg5 INTERACT MOMDMY32
fmom38_mx_reg_pw2   = fmom38_mx_reg_pw1 INTERACT psub
fmom38_mx_reg_pw    = fmom38_mx_reg_pw2 NOT INTERACT MOM_dmetal1_2  // FMOM MX 5T wi PW shield wo DM
fmom38_mx_reg_pw_dm = fmom38_mx_reg_pw2 INTERACT MOM_dmetal1_2      // FMOM MX 5T wi PW shield wi DM

fmom38_mx_reg_ntn1   = fmom38_mx_reg6 INTERACT MOMDMY33
fmom38_mx_reg_ntn2   = fmom38_mx_reg_ntn1 INTERACT NT_N
fmom38_mx_reg_ntn    = fmom38_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_2 // FMOM MX 5T wi NTN shield wo DM
fmom38_mx_reg_ntn_dm = fmom38_mx_reg_ntn2 INTERACT MOM_dmetal1_2     // FMOM MX 5T wi NTN shield wi DM

fmom38_rf_reg1     = mom38_8 NOT INTERACT mom38_idt
fmom38_rf_reg2     = fmom38_rf_reg1 INTERACT MOMDMY100
fmom38_rf_reg3     = fmom38_rf_reg2 NOT INTERACT MOMDMY22
fmom38_rf_reg4     = fmom38_rf_reg3 INTERACT RFDMY
fmom38_rf_reg5     = fmom38_rf_reg4 NOT INTERACT MOMDMY27
fmom38_rf_reg6     = fmom38_rf_reg5 NOT INTERACT MOMDMY31
fmom38_rf_reg7     = fmom38_rf_reg6 NOT INTERACT MOMDMY32
fmom38_rf_reg8     = fmom38_rf_reg7 NOT INTERACT MOMDMY33

fmom38_rf_reg_nw1   = fmom38_rf_reg5 INTERACT MOMDMY31
fmom38_rf_reg_nw2   = fmom38_rf_reg_nw1 INTERACT nxwell              
fmom38_rf_reg_nw    = fmom38_rf_reg_nw2 NOT INTERACT MOM_dmetal1_2   // FMOM 3T RF wi NW shield wo DM
fmom38_rf_reg_nw_dm = fmom38_rf_reg_nw2 INTERACT MOM_dmetal1_2       // FMOM 3T RF wi NW shield wi DM

fmom38_rf_reg_pw1   = fmom38_rf_reg6 INTERACT MOMDMY32
fmom38_rf_reg_pw2   = fmom38_rf_reg_pw1 INTERACT psub                
fmom38_rf_reg_pw    = fmom38_rf_reg_pw2 NOT INTERACT MOM_dmetal1_2   // FMOM 3T RF wi PW shield wo DM
fmom38_rf_reg_pw_dm = fmom38_rf_reg_pw2 INTERACT MOM_dmetal1_2       // FMOM 3T RF wi PW shield wi DM

fmom38_rf_reg_ntn1   = fmom38_rf_reg7 INTERACT MOMDMY33
fmom38_rf_reg_ntn2   = fmom38_rf_reg_ntn1 INTERACT NT_N
fmom38_rf_reg_ntn    = fmom38_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_2 // FMOM 3T RF wi NTN shield wo DM
fmom38_rf_reg_ntn_dm = fmom38_rf_reg_ntn2 INTERACT MOM_dmetal1_2     // FMOM 3T RF wi NTN shield wi DM

mom38_mx_aux   = mom38_8 AND MOMDMY22
mom38_extc = FM_tip8 NOT INTERACT MOM_field8 > 2

DEVICE cfmom fmom38_reg_n M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_n)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom38_reg_p M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_p)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom38_reg_n_dm M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom38_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_n_dm)/ nr
    ftip = area(mom38_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    ftip = area(mom38_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom38_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom38_reg_p_dm M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom38_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_p_dm)/ nr
    ftip = area(mom38_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    ftip = area(mom38_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom38_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom38_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_nw)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom38_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_pw)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom38_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_ntn)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom38_reg_ntn_wo_pring M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_ntn_wo_pring)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom38_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom38_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_nw_dm)/ nr
    ftip = area(mom38_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 1
    ftip = area(mom38_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom38_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom38_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_pw_dm)/ nr
    ftip = area(mom38_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 2
    ftip = area(mom38_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom38_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom38_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_ntn_dm)/ nr
    ftip = area(mom38_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 3
    ftip = area(mom38_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom38_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom38_reg_ntn_wo_pring_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom38_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 4
    ftip = area(mom38_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom38_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom38_reg_2t M8(PLUS) M8(MINUS) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_reg_2t)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
]


DEVICE cfmom_mx_4t fmom38_mx_reg_4t mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2)  <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
]


DEVICE cfmom_wo_rf fmom38_rf_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_rf_reg_nw)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom38_rf_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_rf_reg_pw)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom38_rf_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_rf_reg_ntn)/ nr
    ftip = area(mom38_extc) / nr / w
    s   = perimeter_coincide(MOM_hole3, fmom38_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom38_rf_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom38_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_rf_reg_nw_dm)/ nr
    ftip = area(mom38_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom38_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 1
    ftip = area(mom38_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom38_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom38_rf_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_rf_reg_pw_dm)/ nr
    ftip = area(mom38_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom38_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 2
    ftip = area(mom38_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom38_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom38_rf_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_extc>   <dmetal1> <dmetal2> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field3)
    w =  perimeter_coincide(MOM_field3,fmom38_rf_reg_ntn_dm)/ nr
    ftip = area(mom38_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole3, fmom38_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole3) / 2 / (nr-1) - s - 2 * ftip
    stm = 3
    spm = 8
    shield = 3
    ftip = area(mom38_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom38_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom38_mx_reg_n mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    dmflag = 0
]
DEVICE cfmom_mx fmom38_mx_reg_p mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom38_mx_reg_nw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom38_mx_reg_pw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom38_mx_reg_ntn mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom38_mx_reg_n_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    ftip = area(mom38_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom38_mx_reg_p_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    ftip = area(mom38_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom38_mx_reg_nw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    shield = 1
    ftip = area(mom38_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom38_mx_reg_pw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    shield = 2
    ftip = area(mom38_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom38_mx_reg_ntn_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field3> <MOM_hole3> <mom38_mx_aux> <M8> <mom38_extc> <MOMDMY100>   <dmetal1> <dmetal2> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field3)/mf1
    w =  perimeter_coincide(MOM_field3,mom38_mx_aux)/ (nr*mf1)
    ftip = area(mom38_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole3, mom38_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole3) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 3
    spm = 8
    shield = 3
    ftip = area(mom38_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom46_1 = MOMDMY6 NOT INTERACT MOM_field1
mom46_2 = mom46_1 NOT INTERACT MOM_field2
mom46_3 = mom46_2 NOT INTERACT MOM_field3


mom46_4 = mom46_3 INTERACT MOM_field4

mom46_5 = mom46_4 INTERACT MOM_field5

mom46_6 = mom46_5 INTERACT MOM_field6


mom46_idt = MOM_field6 NOT MOM_field5

mom46_Left7 = mom46_6 NOT INTERACT MOM_field7
mom46_Left8 = mom46_Left7 NOT INTERACT MOM_field8



mom46_reg1     = mom46_Left8 INTERACT mom46_idt
mom46_reg2     = mom46_reg1 INTERACT MOMDMY0
mom46_reg3     = mom46_reg2 NOT INTERACT MOMDMY22
mom46_reg4     = mom46_reg3 NOT INTERACT RFDMY
mom46_reg5     = mom46_reg4 NOT INTERACT MOMDMY27
mom46_reg6     = mom46_reg5 NOT INTERACT MOMDMY31
mom46_reg7     = mom46_reg6 NOT INTERACT MOMDMY32
mom46_reg      = mom46_reg7 NOT INTERACT MOMDMY33
 
mom46_reg_n    = mom46_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom46_reg_p    = mom46_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom46_reg_2t   = mom46_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom46_reg_nw1  = mom46_reg5 INTERACT MOMDMY31
mom46_reg_nw   = mom46_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom46_reg_pw1  = mom46_reg6 INTERACT MOMDMY32
mom46_reg_pw   = mom46_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom46_reg_ntn1 = mom46_reg7 INTERACT MOMDMY33
mom46_reg_ntn  = mom46_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom46_mx_reg1  = MOMDMY22 INTERACT mom46_Left8
mom46_mx_reg2  = mom46_mx_reg1 INTERACT mom46_idt
mom46_mx_reg3  = mom46_mx_reg2 INTERACT MOMDMY0
mom46_mx_reg   = mom46_mx_reg3 INTERACT poly


fmom46_reg1        = mom46_Left8 NOT INTERACT mom46_idt
fmom46_reg2        = fmom46_reg1 INTERACT MOMDMY100
fmom46_reg3        = fmom46_reg2 NOT INTERACT MOMDMY22
fmom46_reg4        = fmom46_reg3 NOT INTERACT RFDMY
fmom46_reg5        = fmom46_reg4 NOT INTERACT MOMDMY27
fmom46_reg6        = fmom46_reg5 NOT INTERACT MOMDMY31
fmom46_reg7        = fmom46_reg6 NOT INTERACT MOMDMY32
fmom46_reg         = fmom46_reg7 NOT INTERACT MOMDMY33
 
fmom46_reg_n1      = fmom46_reg INTERACT n_poly                    
fmom46_reg_n       = fmom46_reg_n1 NOT INTERACT MOM_dmetal1_3       // FMOM 3T wi N+poly shield wo DM
fmom46_reg_n_dm    = fmom46_reg_n1 INTERACT MOM_dmetal1_3           // FMOM 3T wi N+poly shield wi DM

fmom46_reg_p1      = fmom46_reg INTERACT p_poly                     
fmom46_reg_p       = fmom46_reg_p1 NOT INTERACT MOM_dmetal1_3       // FMOM 3T wi P+poly shield wo DM
fmom46_reg_p_dm    = fmom46_reg_p1 INTERACT MOM_dmetal1_3           // FMOM 3T wi P+poly shield wi DM

fmom46_reg_2t      = fmom46_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom46_reg_nw1     = fmom46_reg5 INTERACT MOMDMY31
fmom46_reg_nw2     = fmom46_reg_nw1 INTERACT nxwell
fmom46_reg_nw      = fmom46_reg_nw2 NOT INTERACT MOM_dmetal1_3      // FMOM 3T wi NW shield wo DM
fmom46_reg_nw_dm   = fmom46_reg_nw2 INTERACT MOM_dmetal1_3          // FMOM 3T wi NW shield wi DM
 
fmom46_reg_pw1     = fmom46_reg6 INTERACT MOMDMY32
fmom46_reg_pw2     = fmom46_reg_pw1 INTERACT psub
fmom46_reg_pw      = fmom46_reg_pw2 NOT INTERACT MOM_dmetal1_3      // FMOM 3T wi PW shield wo DM
fmom46_reg_pw_dm   = fmom46_reg_pw2 INTERACT MOM_dmetal1_3          // FMOM 3T wi PW shield wi DM

fmom46_reg_ntn1    = fmom46_reg7 INTERACT MOMDMY33
fmom46_reg_ntn2    = fmom46_reg_ntn1 INTERACT NT_N
fmom46_reg_ntn3    = fmom46_reg_ntn2 NOT INTERACT MOMDMY28
fmom46_reg_ntn     = fmom46_reg_ntn3 NOT INTERACT MOM_dmetal1_3     // FMOM 3T wi NTN shield wo DM
fmom46_reg_ntn_dm  = fmom46_reg_ntn3 INTERACT MOM_dmetal1_3         // FMOM 3T wi NTN shield wi DM

fmom46_reg_ntn_wo_pring1   = fmom46_reg_ntn2 INTERACT MOMDMY28             
fmom46_reg_ntn_wo_pring    = fmom46_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_3 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom46_reg_ntn_wo_pring_dm = fmom46_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_3     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom46_mx_reg1     = MOMDMY22 INTERACT mom46_Left8
fmom46_mx_reg2     = fmom46_mx_reg1 NOT INTERACT mom46_idt
fmom46_mx_reg3     = fmom46_mx_reg2 INTERACT MOMDMY100
fmom46_mx_reg4     = fmom46_mx_reg3 NOT INTERACT MOMDMY27
fmom46_mx_reg5     = fmom46_mx_reg4 NOT INTERACT MOMDMY31
fmom46_mx_reg6     = fmom46_mx_reg5 NOT INTERACT MOMDMY32
fmom46_mx_reg      = fmom46_mx_reg6 NOT INTERACT MOMDMY33

fmom46_mx_reg_n1   = fmom46_mx_reg  INTERACT n_poly
fmom46_mx_reg_n    = fmom46_mx_reg_n1 NOT INTERACT MOM_dmetal1_3    // FMOM MX 5T wi N+poly shield wo DM
fmom46_mx_reg_n_dm = fmom46_mx_reg_n1 INTERACT MOM_dmetal1_3        // FMOM MX 5T wi N+poly shield wi DM

fmom46_mx_reg_p1   = fmom46_mx_reg  INTERACT p_poly
fmom46_mx_reg_p    = fmom46_mx_reg_p1 NOT INTERACT MOM_dmetal1_3    // FMOM MX 5T wi P+poly shield wo DM
fmom46_mx_reg_p_dm = fmom46_mx_reg_p1 INTERACT MOM_dmetal1_3        // FMOM MX 5T wi P+poly shield wi DM

fmom46_mx_reg_4t   = fmom46_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom46_mx_reg_nw1   = fmom46_mx_reg4 INTERACT MOMDMY31              
fmom46_mx_reg_nw2   = fmom46_mx_reg_nw1 INTERACT nxwell              
fmom46_mx_reg_nw    = fmom46_mx_reg_nw2 NOT INTERACT MOM_dmetal1_3  // FMOM MX 5T wi NW shield wo DM
fmom46_mx_reg_nw_dm = fmom46_mx_reg_nw2 INTERACT MOM_dmetal1_3      // FMOM MX 5T wi NW shield wi DM

fmom46_mx_reg_pw1   = fmom46_mx_reg5 INTERACT MOMDMY32
fmom46_mx_reg_pw2   = fmom46_mx_reg_pw1 INTERACT psub
fmom46_mx_reg_pw    = fmom46_mx_reg_pw2 NOT INTERACT MOM_dmetal1_3  // FMOM MX 5T wi PW shield wo DM
fmom46_mx_reg_pw_dm = fmom46_mx_reg_pw2 INTERACT MOM_dmetal1_3      // FMOM MX 5T wi PW shield wi DM

fmom46_mx_reg_ntn1   = fmom46_mx_reg6 INTERACT MOMDMY33
fmom46_mx_reg_ntn2   = fmom46_mx_reg_ntn1 INTERACT NT_N
fmom46_mx_reg_ntn    = fmom46_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_3 // FMOM MX 5T wi NTN shield wo DM
fmom46_mx_reg_ntn_dm = fmom46_mx_reg_ntn2 INTERACT MOM_dmetal1_3     // FMOM MX 5T wi NTN shield wi DM

fmom46_rf_reg1     = mom46_Left8 NOT INTERACT mom46_idt
fmom46_rf_reg2     = fmom46_rf_reg1 INTERACT MOMDMY100
fmom46_rf_reg3     = fmom46_rf_reg2 NOT INTERACT MOMDMY22
fmom46_rf_reg4     = fmom46_rf_reg3 INTERACT RFDMY
fmom46_rf_reg5     = fmom46_rf_reg4 NOT INTERACT MOMDMY27
fmom46_rf_reg6     = fmom46_rf_reg5 NOT INTERACT MOMDMY31
fmom46_rf_reg7     = fmom46_rf_reg6 NOT INTERACT MOMDMY32
fmom46_rf_reg8     = fmom46_rf_reg7 NOT INTERACT MOMDMY33

fmom46_rf_reg_nw1   = fmom46_rf_reg5 INTERACT MOMDMY31
fmom46_rf_reg_nw2   = fmom46_rf_reg_nw1 INTERACT nxwell              
fmom46_rf_reg_nw    = fmom46_rf_reg_nw2 NOT INTERACT MOM_dmetal1_3   // FMOM 3T RF wi NW shield wo DM
fmom46_rf_reg_nw_dm = fmom46_rf_reg_nw2 INTERACT MOM_dmetal1_3       // FMOM 3T RF wi NW shield wi DM

fmom46_rf_reg_pw1   = fmom46_rf_reg6 INTERACT MOMDMY32
fmom46_rf_reg_pw2   = fmom46_rf_reg_pw1 INTERACT psub                
fmom46_rf_reg_pw    = fmom46_rf_reg_pw2 NOT INTERACT MOM_dmetal1_3   // FMOM 3T RF wi PW shield wo DM
fmom46_rf_reg_pw_dm = fmom46_rf_reg_pw2 INTERACT MOM_dmetal1_3       // FMOM 3T RF wi PW shield wi DM

fmom46_rf_reg_ntn1   = fmom46_rf_reg7 INTERACT MOMDMY33
fmom46_rf_reg_ntn2   = fmom46_rf_reg_ntn1 INTERACT NT_N
fmom46_rf_reg_ntn    = fmom46_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_3 // FMOM 3T RF wi NTN shield wo DM
fmom46_rf_reg_ntn_dm = fmom46_rf_reg_ntn2 INTERACT MOM_dmetal1_3     // FMOM 3T RF wi NTN shield wi DM

mom46_mx_aux   = mom46_Left8 AND MOMDMY22
mom46_extc = FM_tip6 NOT INTERACT MOM_field6 > 2

DEVICE cfmom fmom46_reg_n M6(PLUS) M6(MINUS) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_n)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    dmflag = 0
]
DEVICE cfmom fmom46_reg_p M6(PLUS) M6(MINUS) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_p)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    dmflag = 0
]
DEVICE cfmom fmom46_reg_n_dm M6(PLUS) M6(MINUS) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom46_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_n_dm)/ nr
    ftip = area(mom46_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    ftip = area(mom46_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom46_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom46_reg_p_dm M6(PLUS) M6(MINUS) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom46_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_p_dm)/ nr
    ftip = area(mom46_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    ftip = area(mom46_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom46_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom46_reg_nw M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_nw)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom46_reg_pw M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_pw)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom46_reg_ntn M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_ntn)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom46_reg_ntn_wo_pring M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_ntn_wo_pring)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom46_reg_nw_dm M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom46_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_nw_dm)/ nr
    ftip = area(mom46_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 1
    ftip = area(mom46_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom46_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom46_reg_pw_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_pw_dm)/ nr
    ftip = area(mom46_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 2
    ftip = area(mom46_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom46_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom46_reg_ntn_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_ntn_dm)/ nr
    ftip = area(mom46_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 3
    ftip = area(mom46_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom46_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom46_reg_ntn_wo_pring_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom46_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 4
    ftip = area(mom46_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom46_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom46_reg_2t M6(PLUS) M6(MINUS) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_reg_2t)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
]


DEVICE cfmom_mx_4t fmom46_mx_reg_4t mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2)  <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
]


DEVICE cfmom_wo_rf fmom46_rf_reg_nw M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_rf_reg_nw)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom46_rf_reg_pw M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_rf_reg_pw)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom46_rf_reg_ntn M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_rf_reg_ntn)/ nr
    ftip = area(mom46_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom46_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom46_rf_reg_nw_dm M6(PLUS) M6(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom46_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_rf_reg_nw_dm)/ nr
    ftip = area(mom46_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom46_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 1
    ftip = area(mom46_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom46_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom46_rf_reg_pw_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_rf_reg_pw_dm)/ nr
    ftip = area(mom46_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom46_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 2
    ftip = area(mom46_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom46_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom46_rf_reg_ntn_dm M6(PLUS) M6(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom46_rf_reg_ntn_dm)/ nr
    ftip = area(mom46_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom46_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 6
    shield = 3
    ftip = area(mom46_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom46_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom46_mx_reg_n mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    dmflag = 0
]
DEVICE cfmom_mx fmom46_mx_reg_p mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom46_mx_reg_nw mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom46_mx_reg_pw mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom46_mx_reg_ntn mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom46_mx_reg_n_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    ftip = area(mom46_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom46_mx_reg_p_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    ftip = area(mom46_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom46_mx_reg_nw_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    shield = 1
    ftip = area(mom46_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom46_mx_reg_pw_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    shield = 2
    ftip = area(mom46_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom46_mx_reg_ntn_dm mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom46_mx_aux> <M6> <mom46_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M6)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom46_mx_aux)/ (nr*mf1)
    ftip = area(mom46_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom46_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 6
    shield = 3
    ftip = area(mom46_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom47_1 = MOMDMY7 NOT INTERACT MOM_field1
mom47_2 = mom47_1 NOT INTERACT MOM_field2
mom47_3 = mom47_2 NOT INTERACT MOM_field3


mom47_4 = mom47_3 INTERACT MOM_field4

mom47_5 = mom47_4 INTERACT MOM_field5

mom47_6 = mom47_5 INTERACT MOM_field6

mom47_7 = mom47_6 INTERACT MOM_field7


mom47_idt = MOM_field7 NOT MOM_field6

mom47_Left8 = mom47_7 NOT INTERACT MOM_field8



mom47_reg1     = mom47_Left8 INTERACT mom47_idt
mom47_reg2     = mom47_reg1 INTERACT MOMDMY0
mom47_reg3     = mom47_reg2 NOT INTERACT MOMDMY22
mom47_reg4     = mom47_reg3 NOT INTERACT RFDMY
mom47_reg5     = mom47_reg4 NOT INTERACT MOMDMY27
mom47_reg6     = mom47_reg5 NOT INTERACT MOMDMY31
mom47_reg7     = mom47_reg6 NOT INTERACT MOMDMY32
mom47_reg      = mom47_reg7 NOT INTERACT MOMDMY33
 
mom47_reg_n    = mom47_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom47_reg_p    = mom47_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom47_reg_2t   = mom47_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom47_reg_nw1  = mom47_reg5 INTERACT MOMDMY31
mom47_reg_nw   = mom47_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom47_reg_pw1  = mom47_reg6 INTERACT MOMDMY32
mom47_reg_pw   = mom47_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom47_reg_ntn1 = mom47_reg7 INTERACT MOMDMY33
mom47_reg_ntn  = mom47_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom47_mx_reg1  = MOMDMY22 INTERACT mom47_Left8
mom47_mx_reg2  = mom47_mx_reg1 INTERACT mom47_idt
mom47_mx_reg3  = mom47_mx_reg2 INTERACT MOMDMY0
mom47_mx_reg   = mom47_mx_reg3 INTERACT poly


fmom47_reg1        = mom47_Left8 NOT INTERACT mom47_idt
fmom47_reg2        = fmom47_reg1 INTERACT MOMDMY100
fmom47_reg3        = fmom47_reg2 NOT INTERACT MOMDMY22
fmom47_reg4        = fmom47_reg3 NOT INTERACT RFDMY
fmom47_reg5        = fmom47_reg4 NOT INTERACT MOMDMY27
fmom47_reg6        = fmom47_reg5 NOT INTERACT MOMDMY31
fmom47_reg7        = fmom47_reg6 NOT INTERACT MOMDMY32
fmom47_reg         = fmom47_reg7 NOT INTERACT MOMDMY33
 
fmom47_reg_n1      = fmom47_reg INTERACT n_poly                    
fmom47_reg_n       = fmom47_reg_n1 NOT INTERACT MOM_dmetal1_3       // FMOM 3T wi N+poly shield wo DM
fmom47_reg_n_dm    = fmom47_reg_n1 INTERACT MOM_dmetal1_3           // FMOM 3T wi N+poly shield wi DM

fmom47_reg_p1      = fmom47_reg INTERACT p_poly                     
fmom47_reg_p       = fmom47_reg_p1 NOT INTERACT MOM_dmetal1_3       // FMOM 3T wi P+poly shield wo DM
fmom47_reg_p_dm    = fmom47_reg_p1 INTERACT MOM_dmetal1_3           // FMOM 3T wi P+poly shield wi DM

fmom47_reg_2t      = fmom47_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom47_reg_nw1     = fmom47_reg5 INTERACT MOMDMY31
fmom47_reg_nw2     = fmom47_reg_nw1 INTERACT nxwell
fmom47_reg_nw      = fmom47_reg_nw2 NOT INTERACT MOM_dmetal1_3      // FMOM 3T wi NW shield wo DM
fmom47_reg_nw_dm   = fmom47_reg_nw2 INTERACT MOM_dmetal1_3          // FMOM 3T wi NW shield wi DM
 
fmom47_reg_pw1     = fmom47_reg6 INTERACT MOMDMY32
fmom47_reg_pw2     = fmom47_reg_pw1 INTERACT psub
fmom47_reg_pw      = fmom47_reg_pw2 NOT INTERACT MOM_dmetal1_3      // FMOM 3T wi PW shield wo DM
fmom47_reg_pw_dm   = fmom47_reg_pw2 INTERACT MOM_dmetal1_3          // FMOM 3T wi PW shield wi DM

fmom47_reg_ntn1    = fmom47_reg7 INTERACT MOMDMY33
fmom47_reg_ntn2    = fmom47_reg_ntn1 INTERACT NT_N
fmom47_reg_ntn3    = fmom47_reg_ntn2 NOT INTERACT MOMDMY28
fmom47_reg_ntn     = fmom47_reg_ntn3 NOT INTERACT MOM_dmetal1_3     // FMOM 3T wi NTN shield wo DM
fmom47_reg_ntn_dm  = fmom47_reg_ntn3 INTERACT MOM_dmetal1_3         // FMOM 3T wi NTN shield wi DM

fmom47_reg_ntn_wo_pring1   = fmom47_reg_ntn2 INTERACT MOMDMY28             
fmom47_reg_ntn_wo_pring    = fmom47_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_3 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom47_reg_ntn_wo_pring_dm = fmom47_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_3     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom47_mx_reg1     = MOMDMY22 INTERACT mom47_Left8
fmom47_mx_reg2     = fmom47_mx_reg1 NOT INTERACT mom47_idt
fmom47_mx_reg3     = fmom47_mx_reg2 INTERACT MOMDMY100
fmom47_mx_reg4     = fmom47_mx_reg3 NOT INTERACT MOMDMY27
fmom47_mx_reg5     = fmom47_mx_reg4 NOT INTERACT MOMDMY31
fmom47_mx_reg6     = fmom47_mx_reg5 NOT INTERACT MOMDMY32
fmom47_mx_reg      = fmom47_mx_reg6 NOT INTERACT MOMDMY33

fmom47_mx_reg_n1   = fmom47_mx_reg  INTERACT n_poly
fmom47_mx_reg_n    = fmom47_mx_reg_n1 NOT INTERACT MOM_dmetal1_3    // FMOM MX 5T wi N+poly shield wo DM
fmom47_mx_reg_n_dm = fmom47_mx_reg_n1 INTERACT MOM_dmetal1_3        // FMOM MX 5T wi N+poly shield wi DM

fmom47_mx_reg_p1   = fmom47_mx_reg  INTERACT p_poly
fmom47_mx_reg_p    = fmom47_mx_reg_p1 NOT INTERACT MOM_dmetal1_3    // FMOM MX 5T wi P+poly shield wo DM
fmom47_mx_reg_p_dm = fmom47_mx_reg_p1 INTERACT MOM_dmetal1_3        // FMOM MX 5T wi P+poly shield wi DM

fmom47_mx_reg_4t   = fmom47_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom47_mx_reg_nw1   = fmom47_mx_reg4 INTERACT MOMDMY31              
fmom47_mx_reg_nw2   = fmom47_mx_reg_nw1 INTERACT nxwell              
fmom47_mx_reg_nw    = fmom47_mx_reg_nw2 NOT INTERACT MOM_dmetal1_3  // FMOM MX 5T wi NW shield wo DM
fmom47_mx_reg_nw_dm = fmom47_mx_reg_nw2 INTERACT MOM_dmetal1_3      // FMOM MX 5T wi NW shield wi DM

fmom47_mx_reg_pw1   = fmom47_mx_reg5 INTERACT MOMDMY32
fmom47_mx_reg_pw2   = fmom47_mx_reg_pw1 INTERACT psub
fmom47_mx_reg_pw    = fmom47_mx_reg_pw2 NOT INTERACT MOM_dmetal1_3  // FMOM MX 5T wi PW shield wo DM
fmom47_mx_reg_pw_dm = fmom47_mx_reg_pw2 INTERACT MOM_dmetal1_3      // FMOM MX 5T wi PW shield wi DM

fmom47_mx_reg_ntn1   = fmom47_mx_reg6 INTERACT MOMDMY33
fmom47_mx_reg_ntn2   = fmom47_mx_reg_ntn1 INTERACT NT_N
fmom47_mx_reg_ntn    = fmom47_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_3 // FMOM MX 5T wi NTN shield wo DM
fmom47_mx_reg_ntn_dm = fmom47_mx_reg_ntn2 INTERACT MOM_dmetal1_3     // FMOM MX 5T wi NTN shield wi DM

fmom47_rf_reg1     = mom47_Left8 NOT INTERACT mom47_idt
fmom47_rf_reg2     = fmom47_rf_reg1 INTERACT MOMDMY100
fmom47_rf_reg3     = fmom47_rf_reg2 NOT INTERACT MOMDMY22
fmom47_rf_reg4     = fmom47_rf_reg3 INTERACT RFDMY
fmom47_rf_reg5     = fmom47_rf_reg4 NOT INTERACT MOMDMY27
fmom47_rf_reg6     = fmom47_rf_reg5 NOT INTERACT MOMDMY31
fmom47_rf_reg7     = fmom47_rf_reg6 NOT INTERACT MOMDMY32
fmom47_rf_reg8     = fmom47_rf_reg7 NOT INTERACT MOMDMY33

fmom47_rf_reg_nw1   = fmom47_rf_reg5 INTERACT MOMDMY31
fmom47_rf_reg_nw2   = fmom47_rf_reg_nw1 INTERACT nxwell              
fmom47_rf_reg_nw    = fmom47_rf_reg_nw2 NOT INTERACT MOM_dmetal1_3   // FMOM 3T RF wi NW shield wo DM
fmom47_rf_reg_nw_dm = fmom47_rf_reg_nw2 INTERACT MOM_dmetal1_3       // FMOM 3T RF wi NW shield wi DM

fmom47_rf_reg_pw1   = fmom47_rf_reg6 INTERACT MOMDMY32
fmom47_rf_reg_pw2   = fmom47_rf_reg_pw1 INTERACT psub                
fmom47_rf_reg_pw    = fmom47_rf_reg_pw2 NOT INTERACT MOM_dmetal1_3   // FMOM 3T RF wi PW shield wo DM
fmom47_rf_reg_pw_dm = fmom47_rf_reg_pw2 INTERACT MOM_dmetal1_3       // FMOM 3T RF wi PW shield wi DM

fmom47_rf_reg_ntn1   = fmom47_rf_reg7 INTERACT MOMDMY33
fmom47_rf_reg_ntn2   = fmom47_rf_reg_ntn1 INTERACT NT_N
fmom47_rf_reg_ntn    = fmom47_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_3 // FMOM 3T RF wi NTN shield wo DM
fmom47_rf_reg_ntn_dm = fmom47_rf_reg_ntn2 INTERACT MOM_dmetal1_3     // FMOM 3T RF wi NTN shield wi DM

mom47_mx_aux   = mom47_Left8 AND MOMDMY22
mom47_extc = FM_tip7 NOT INTERACT MOM_field7 > 2

DEVICE cfmom fmom47_reg_n M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_n)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom47_reg_p M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_p)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom47_reg_n_dm M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom47_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_n_dm)/ nr
    ftip = area(mom47_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    ftip = area(mom47_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom47_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom47_reg_p_dm M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom47_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_p_dm)/ nr
    ftip = area(mom47_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    ftip = area(mom47_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom47_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom47_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_nw)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom47_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_pw)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom47_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_ntn)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom47_reg_ntn_wo_pring M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_ntn_wo_pring)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom47_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom47_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_nw_dm)/ nr
    ftip = area(mom47_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 1
    ftip = area(mom47_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom47_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom47_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_pw_dm)/ nr
    ftip = area(mom47_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 2
    ftip = area(mom47_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom47_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom47_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_ntn_dm)/ nr
    ftip = area(mom47_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 3
    ftip = area(mom47_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom47_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom47_reg_ntn_wo_pring_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom47_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 4
    ftip = area(mom47_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom47_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom47_reg_2t M7(PLUS) M7(MINUS) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_reg_2t)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
]


DEVICE cfmom_mx_4t fmom47_mx_reg_4t mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2)  <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
]


DEVICE cfmom_wo_rf fmom47_rf_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_rf_reg_nw)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom47_rf_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_rf_reg_pw)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom47_rf_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_rf_reg_ntn)/ nr
    ftip = area(mom47_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom47_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom47_rf_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom47_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_rf_reg_nw_dm)/ nr
    ftip = area(mom47_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom47_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 1
    ftip = area(mom47_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom47_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom47_rf_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_rf_reg_pw_dm)/ nr
    ftip = area(mom47_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom47_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 2
    ftip = area(mom47_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom47_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom47_rf_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom47_rf_reg_ntn_dm)/ nr
    ftip = area(mom47_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom47_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 7
    shield = 3
    ftip = area(mom47_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom47_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom47_mx_reg_n mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    dmflag = 0
]
DEVICE cfmom_mx fmom47_mx_reg_p mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom47_mx_reg_nw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom47_mx_reg_pw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom47_mx_reg_ntn mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom47_mx_reg_n_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    ftip = area(mom47_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom47_mx_reg_p_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    ftip = area(mom47_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom47_mx_reg_nw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    shield = 1
    ftip = area(mom47_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom47_mx_reg_pw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    shield = 2
    ftip = area(mom47_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom47_mx_reg_ntn_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom47_mx_aux> <M7> <mom47_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom47_mx_aux)/ (nr*mf1)
    ftip = area(mom47_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom47_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 7
    shield = 3
    ftip = area(mom47_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom48_1 = MOMDMY8 NOT INTERACT MOM_field1
mom48_2 = mom48_1 NOT INTERACT MOM_field2
mom48_3 = mom48_2 NOT INTERACT MOM_field3


mom48_4 = mom48_3 INTERACT MOM_field4

mom48_5 = mom48_4 INTERACT MOM_field5

mom48_6 = mom48_5 INTERACT MOM_field6

mom48_7 = mom48_6 INTERACT MOM_field7

mom48_8 = mom48_7 INTERACT MOM_field8


mom48_idt = MOM_field8 NOT MOM_field7




mom48_reg1     = mom48_8 INTERACT mom48_idt
mom48_reg2     = mom48_reg1 INTERACT MOMDMY0
mom48_reg3     = mom48_reg2 NOT INTERACT MOMDMY22
mom48_reg4     = mom48_reg3 NOT INTERACT RFDMY
mom48_reg5     = mom48_reg4 NOT INTERACT MOMDMY27
mom48_reg6     = mom48_reg5 NOT INTERACT MOMDMY31
mom48_reg7     = mom48_reg6 NOT INTERACT MOMDMY32
mom48_reg      = mom48_reg7 NOT INTERACT MOMDMY33
 
mom48_reg_n    = mom48_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom48_reg_p    = mom48_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom48_reg_2t   = mom48_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom48_reg_nw1  = mom48_reg5 INTERACT MOMDMY31
mom48_reg_nw   = mom48_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom48_reg_pw1  = mom48_reg6 INTERACT MOMDMY32
mom48_reg_pw   = mom48_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom48_reg_ntn1 = mom48_reg7 INTERACT MOMDMY33
mom48_reg_ntn  = mom48_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom48_mx_reg1  = MOMDMY22 INTERACT mom48_8
mom48_mx_reg2  = mom48_mx_reg1 INTERACT mom48_idt
mom48_mx_reg3  = mom48_mx_reg2 INTERACT MOMDMY0
mom48_mx_reg   = mom48_mx_reg3 INTERACT poly


fmom48_reg1        = mom48_8 NOT INTERACT mom48_idt
fmom48_reg2        = fmom48_reg1 INTERACT MOMDMY100
fmom48_reg3        = fmom48_reg2 NOT INTERACT MOMDMY22
fmom48_reg4        = fmom48_reg3 NOT INTERACT RFDMY
fmom48_reg5        = fmom48_reg4 NOT INTERACT MOMDMY27
fmom48_reg6        = fmom48_reg5 NOT INTERACT MOMDMY31
fmom48_reg7        = fmom48_reg6 NOT INTERACT MOMDMY32
fmom48_reg         = fmom48_reg7 NOT INTERACT MOMDMY33
 
fmom48_reg_n1      = fmom48_reg INTERACT n_poly                    
fmom48_reg_n       = fmom48_reg_n1 NOT INTERACT MOM_dmetal1_3       // FMOM 3T wi N+poly shield wo DM
fmom48_reg_n_dm    = fmom48_reg_n1 INTERACT MOM_dmetal1_3           // FMOM 3T wi N+poly shield wi DM

fmom48_reg_p1      = fmom48_reg INTERACT p_poly                     
fmom48_reg_p       = fmom48_reg_p1 NOT INTERACT MOM_dmetal1_3       // FMOM 3T wi P+poly shield wo DM
fmom48_reg_p_dm    = fmom48_reg_p1 INTERACT MOM_dmetal1_3           // FMOM 3T wi P+poly shield wi DM

fmom48_reg_2t      = fmom48_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom48_reg_nw1     = fmom48_reg5 INTERACT MOMDMY31
fmom48_reg_nw2     = fmom48_reg_nw1 INTERACT nxwell
fmom48_reg_nw      = fmom48_reg_nw2 NOT INTERACT MOM_dmetal1_3      // FMOM 3T wi NW shield wo DM
fmom48_reg_nw_dm   = fmom48_reg_nw2 INTERACT MOM_dmetal1_3          // FMOM 3T wi NW shield wi DM
 
fmom48_reg_pw1     = fmom48_reg6 INTERACT MOMDMY32
fmom48_reg_pw2     = fmom48_reg_pw1 INTERACT psub
fmom48_reg_pw      = fmom48_reg_pw2 NOT INTERACT MOM_dmetal1_3      // FMOM 3T wi PW shield wo DM
fmom48_reg_pw_dm   = fmom48_reg_pw2 INTERACT MOM_dmetal1_3          // FMOM 3T wi PW shield wi DM

fmom48_reg_ntn1    = fmom48_reg7 INTERACT MOMDMY33
fmom48_reg_ntn2    = fmom48_reg_ntn1 INTERACT NT_N
fmom48_reg_ntn3    = fmom48_reg_ntn2 NOT INTERACT MOMDMY28
fmom48_reg_ntn     = fmom48_reg_ntn3 NOT INTERACT MOM_dmetal1_3     // FMOM 3T wi NTN shield wo DM
fmom48_reg_ntn_dm  = fmom48_reg_ntn3 INTERACT MOM_dmetal1_3         // FMOM 3T wi NTN shield wi DM

fmom48_reg_ntn_wo_pring1   = fmom48_reg_ntn2 INTERACT MOMDMY28             
fmom48_reg_ntn_wo_pring    = fmom48_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_3 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom48_reg_ntn_wo_pring_dm = fmom48_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_3     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom48_mx_reg1     = MOMDMY22 INTERACT mom48_8
fmom48_mx_reg2     = fmom48_mx_reg1 NOT INTERACT mom48_idt
fmom48_mx_reg3     = fmom48_mx_reg2 INTERACT MOMDMY100
fmom48_mx_reg4     = fmom48_mx_reg3 NOT INTERACT MOMDMY27
fmom48_mx_reg5     = fmom48_mx_reg4 NOT INTERACT MOMDMY31
fmom48_mx_reg6     = fmom48_mx_reg5 NOT INTERACT MOMDMY32
fmom48_mx_reg      = fmom48_mx_reg6 NOT INTERACT MOMDMY33

fmom48_mx_reg_n1   = fmom48_mx_reg  INTERACT n_poly
fmom48_mx_reg_n    = fmom48_mx_reg_n1 NOT INTERACT MOM_dmetal1_3    // FMOM MX 5T wi N+poly shield wo DM
fmom48_mx_reg_n_dm = fmom48_mx_reg_n1 INTERACT MOM_dmetal1_3        // FMOM MX 5T wi N+poly shield wi DM

fmom48_mx_reg_p1   = fmom48_mx_reg  INTERACT p_poly
fmom48_mx_reg_p    = fmom48_mx_reg_p1 NOT INTERACT MOM_dmetal1_3    // FMOM MX 5T wi P+poly shield wo DM
fmom48_mx_reg_p_dm = fmom48_mx_reg_p1 INTERACT MOM_dmetal1_3        // FMOM MX 5T wi P+poly shield wi DM

fmom48_mx_reg_4t   = fmom48_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom48_mx_reg_nw1   = fmom48_mx_reg4 INTERACT MOMDMY31              
fmom48_mx_reg_nw2   = fmom48_mx_reg_nw1 INTERACT nxwell              
fmom48_mx_reg_nw    = fmom48_mx_reg_nw2 NOT INTERACT MOM_dmetal1_3  // FMOM MX 5T wi NW shield wo DM
fmom48_mx_reg_nw_dm = fmom48_mx_reg_nw2 INTERACT MOM_dmetal1_3      // FMOM MX 5T wi NW shield wi DM

fmom48_mx_reg_pw1   = fmom48_mx_reg5 INTERACT MOMDMY32
fmom48_mx_reg_pw2   = fmom48_mx_reg_pw1 INTERACT psub
fmom48_mx_reg_pw    = fmom48_mx_reg_pw2 NOT INTERACT MOM_dmetal1_3  // FMOM MX 5T wi PW shield wo DM
fmom48_mx_reg_pw_dm = fmom48_mx_reg_pw2 INTERACT MOM_dmetal1_3      // FMOM MX 5T wi PW shield wi DM

fmom48_mx_reg_ntn1   = fmom48_mx_reg6 INTERACT MOMDMY33
fmom48_mx_reg_ntn2   = fmom48_mx_reg_ntn1 INTERACT NT_N
fmom48_mx_reg_ntn    = fmom48_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_3 // FMOM MX 5T wi NTN shield wo DM
fmom48_mx_reg_ntn_dm = fmom48_mx_reg_ntn2 INTERACT MOM_dmetal1_3     // FMOM MX 5T wi NTN shield wi DM

fmom48_rf_reg1     = mom48_8 NOT INTERACT mom48_idt
fmom48_rf_reg2     = fmom48_rf_reg1 INTERACT MOMDMY100
fmom48_rf_reg3     = fmom48_rf_reg2 NOT INTERACT MOMDMY22
fmom48_rf_reg4     = fmom48_rf_reg3 INTERACT RFDMY
fmom48_rf_reg5     = fmom48_rf_reg4 NOT INTERACT MOMDMY27
fmom48_rf_reg6     = fmom48_rf_reg5 NOT INTERACT MOMDMY31
fmom48_rf_reg7     = fmom48_rf_reg6 NOT INTERACT MOMDMY32
fmom48_rf_reg8     = fmom48_rf_reg7 NOT INTERACT MOMDMY33

fmom48_rf_reg_nw1   = fmom48_rf_reg5 INTERACT MOMDMY31
fmom48_rf_reg_nw2   = fmom48_rf_reg_nw1 INTERACT nxwell              
fmom48_rf_reg_nw    = fmom48_rf_reg_nw2 NOT INTERACT MOM_dmetal1_3   // FMOM 3T RF wi NW shield wo DM
fmom48_rf_reg_nw_dm = fmom48_rf_reg_nw2 INTERACT MOM_dmetal1_3       // FMOM 3T RF wi NW shield wi DM

fmom48_rf_reg_pw1   = fmom48_rf_reg6 INTERACT MOMDMY32
fmom48_rf_reg_pw2   = fmom48_rf_reg_pw1 INTERACT psub                
fmom48_rf_reg_pw    = fmom48_rf_reg_pw2 NOT INTERACT MOM_dmetal1_3   // FMOM 3T RF wi PW shield wo DM
fmom48_rf_reg_pw_dm = fmom48_rf_reg_pw2 INTERACT MOM_dmetal1_3       // FMOM 3T RF wi PW shield wi DM

fmom48_rf_reg_ntn1   = fmom48_rf_reg7 INTERACT MOMDMY33
fmom48_rf_reg_ntn2   = fmom48_rf_reg_ntn1 INTERACT NT_N
fmom48_rf_reg_ntn    = fmom48_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_3 // FMOM 3T RF wi NTN shield wo DM
fmom48_rf_reg_ntn_dm = fmom48_rf_reg_ntn2 INTERACT MOM_dmetal1_3     // FMOM 3T RF wi NTN shield wi DM

mom48_mx_aux   = mom48_8 AND MOMDMY22
mom48_extc = FM_tip8 NOT INTERACT MOM_field8 > 2

DEVICE cfmom fmom48_reg_n M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_n)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom48_reg_p M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_p)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom48_reg_n_dm M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom48_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_n_dm)/ nr
    ftip = area(mom48_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    ftip = area(mom48_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom48_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom48_reg_p_dm M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom48_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_p_dm)/ nr
    ftip = area(mom48_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    ftip = area(mom48_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom48_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom48_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_nw)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom48_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_pw)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom48_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_ntn)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom48_reg_ntn_wo_pring M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_ntn_wo_pring)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom48_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom48_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_nw_dm)/ nr
    ftip = area(mom48_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 1
    ftip = area(mom48_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom48_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom48_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_pw_dm)/ nr
    ftip = area(mom48_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 2
    ftip = area(mom48_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom48_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom48_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_ntn_dm)/ nr
    ftip = area(mom48_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 3
    ftip = area(mom48_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom48_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom48_reg_ntn_wo_pring_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom48_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 4
    ftip = area(mom48_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom48_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom48_reg_2t M8(PLUS) M8(MINUS) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_reg_2t)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
]


DEVICE cfmom_mx_4t fmom48_mx_reg_4t mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2)  <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
]


DEVICE cfmom_wo_rf fmom48_rf_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_rf_reg_nw)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom48_rf_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_rf_reg_pw)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom48_rf_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_rf_reg_ntn)/ nr
    ftip = area(mom48_extc) / nr / w
    s   = perimeter_coincide(MOM_hole4, fmom48_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom48_rf_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom48_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_rf_reg_nw_dm)/ nr
    ftip = area(mom48_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom48_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 1
    ftip = area(mom48_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom48_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom48_rf_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_rf_reg_pw_dm)/ nr
    ftip = area(mom48_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom48_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 2
    ftip = area(mom48_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom48_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom48_rf_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_extc>   <dmetal1> <dmetal2> <dmetal3> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field4)
    w =  perimeter_coincide(MOM_field4,fmom48_rf_reg_ntn_dm)/ nr
    ftip = area(mom48_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole4, fmom48_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole4) / 2 / (nr-1) - s - 2 * ftip
    stm = 4
    spm = 8
    shield = 3
    ftip = area(mom48_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom48_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom48_mx_reg_n mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    dmflag = 0
]
DEVICE cfmom_mx fmom48_mx_reg_p mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom48_mx_reg_nw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom48_mx_reg_pw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom48_mx_reg_ntn mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom48_mx_reg_n_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    ftip = area(mom48_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom48_mx_reg_p_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    ftip = area(mom48_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom48_mx_reg_nw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    shield = 1
    ftip = area(mom48_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom48_mx_reg_pw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    shield = 2
    ftip = area(mom48_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom48_mx_reg_ntn_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field4> <MOM_hole4> <mom48_mx_aux> <M8> <mom48_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field4)/mf1
    w =  perimeter_coincide(MOM_field4,mom48_mx_aux)/ (nr*mf1)
    ftip = area(mom48_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole4, mom48_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole4) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 4
    spm = 8
    shield = 3
    ftip = area(mom48_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom57_1 = MOMDMY7 NOT INTERACT MOM_field1
mom57_2 = mom57_1 NOT INTERACT MOM_field2
mom57_3 = mom57_2 NOT INTERACT MOM_field3
mom57_4 = mom57_3 NOT INTERACT MOM_field4


mom57_5 = mom57_4 INTERACT MOM_field5

mom57_6 = mom57_5 INTERACT MOM_field6

mom57_7 = mom57_6 INTERACT MOM_field7


mom57_idt = MOM_field7 NOT MOM_field6

mom57_Left8 = mom57_7 NOT INTERACT MOM_field8



mom57_reg1     = mom57_Left8 INTERACT mom57_idt
mom57_reg2     = mom57_reg1 INTERACT MOMDMY0
mom57_reg3     = mom57_reg2 NOT INTERACT MOMDMY22
mom57_reg4     = mom57_reg3 NOT INTERACT RFDMY
mom57_reg5     = mom57_reg4 NOT INTERACT MOMDMY27
mom57_reg6     = mom57_reg5 NOT INTERACT MOMDMY31
mom57_reg7     = mom57_reg6 NOT INTERACT MOMDMY32
mom57_reg      = mom57_reg7 NOT INTERACT MOMDMY33
 
mom57_reg_n    = mom57_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom57_reg_p    = mom57_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom57_reg_2t   = mom57_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom57_reg_nw1  = mom57_reg5 INTERACT MOMDMY31
mom57_reg_nw   = mom57_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom57_reg_pw1  = mom57_reg6 INTERACT MOMDMY32
mom57_reg_pw   = mom57_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom57_reg_ntn1 = mom57_reg7 INTERACT MOMDMY33
mom57_reg_ntn  = mom57_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom57_mx_reg1  = MOMDMY22 INTERACT mom57_Left8
mom57_mx_reg2  = mom57_mx_reg1 INTERACT mom57_idt
mom57_mx_reg3  = mom57_mx_reg2 INTERACT MOMDMY0
mom57_mx_reg   = mom57_mx_reg3 INTERACT poly


fmom57_reg1        = mom57_Left8 NOT INTERACT mom57_idt
fmom57_reg2        = fmom57_reg1 INTERACT MOMDMY100
fmom57_reg3        = fmom57_reg2 NOT INTERACT MOMDMY22
fmom57_reg4        = fmom57_reg3 NOT INTERACT RFDMY
fmom57_reg5        = fmom57_reg4 NOT INTERACT MOMDMY27
fmom57_reg6        = fmom57_reg5 NOT INTERACT MOMDMY31
fmom57_reg7        = fmom57_reg6 NOT INTERACT MOMDMY32
fmom57_reg         = fmom57_reg7 NOT INTERACT MOMDMY33
 
fmom57_reg_n1      = fmom57_reg INTERACT n_poly                    
fmom57_reg_n       = fmom57_reg_n1 NOT INTERACT MOM_dmetal1_4       // FMOM 3T wi N+poly shield wo DM
fmom57_reg_n_dm    = fmom57_reg_n1 INTERACT MOM_dmetal1_4           // FMOM 3T wi N+poly shield wi DM

fmom57_reg_p1      = fmom57_reg INTERACT p_poly                     
fmom57_reg_p       = fmom57_reg_p1 NOT INTERACT MOM_dmetal1_4       // FMOM 3T wi P+poly shield wo DM
fmom57_reg_p_dm    = fmom57_reg_p1 INTERACT MOM_dmetal1_4           // FMOM 3T wi P+poly shield wi DM

fmom57_reg_2t      = fmom57_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom57_reg_nw1     = fmom57_reg5 INTERACT MOMDMY31
fmom57_reg_nw2     = fmom57_reg_nw1 INTERACT nxwell
fmom57_reg_nw      = fmom57_reg_nw2 NOT INTERACT MOM_dmetal1_4      // FMOM 3T wi NW shield wo DM
fmom57_reg_nw_dm   = fmom57_reg_nw2 INTERACT MOM_dmetal1_4          // FMOM 3T wi NW shield wi DM
 
fmom57_reg_pw1     = fmom57_reg6 INTERACT MOMDMY32
fmom57_reg_pw2     = fmom57_reg_pw1 INTERACT psub
fmom57_reg_pw      = fmom57_reg_pw2 NOT INTERACT MOM_dmetal1_4      // FMOM 3T wi PW shield wo DM
fmom57_reg_pw_dm   = fmom57_reg_pw2 INTERACT MOM_dmetal1_4          // FMOM 3T wi PW shield wi DM

fmom57_reg_ntn1    = fmom57_reg7 INTERACT MOMDMY33
fmom57_reg_ntn2    = fmom57_reg_ntn1 INTERACT NT_N
fmom57_reg_ntn3    = fmom57_reg_ntn2 NOT INTERACT MOMDMY28
fmom57_reg_ntn     = fmom57_reg_ntn3 NOT INTERACT MOM_dmetal1_4     // FMOM 3T wi NTN shield wo DM
fmom57_reg_ntn_dm  = fmom57_reg_ntn3 INTERACT MOM_dmetal1_4         // FMOM 3T wi NTN shield wi DM

fmom57_reg_ntn_wo_pring1   = fmom57_reg_ntn2 INTERACT MOMDMY28             
fmom57_reg_ntn_wo_pring    = fmom57_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_4 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom57_reg_ntn_wo_pring_dm = fmom57_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_4     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom57_mx_reg1     = MOMDMY22 INTERACT mom57_Left8
fmom57_mx_reg2     = fmom57_mx_reg1 NOT INTERACT mom57_idt
fmom57_mx_reg3     = fmom57_mx_reg2 INTERACT MOMDMY100
fmom57_mx_reg4     = fmom57_mx_reg3 NOT INTERACT MOMDMY27
fmom57_mx_reg5     = fmom57_mx_reg4 NOT INTERACT MOMDMY31
fmom57_mx_reg6     = fmom57_mx_reg5 NOT INTERACT MOMDMY32
fmom57_mx_reg      = fmom57_mx_reg6 NOT INTERACT MOMDMY33

fmom57_mx_reg_n1   = fmom57_mx_reg  INTERACT n_poly
fmom57_mx_reg_n    = fmom57_mx_reg_n1 NOT INTERACT MOM_dmetal1_4    // FMOM MX 5T wi N+poly shield wo DM
fmom57_mx_reg_n_dm = fmom57_mx_reg_n1 INTERACT MOM_dmetal1_4        // FMOM MX 5T wi N+poly shield wi DM

fmom57_mx_reg_p1   = fmom57_mx_reg  INTERACT p_poly
fmom57_mx_reg_p    = fmom57_mx_reg_p1 NOT INTERACT MOM_dmetal1_4    // FMOM MX 5T wi P+poly shield wo DM
fmom57_mx_reg_p_dm = fmom57_mx_reg_p1 INTERACT MOM_dmetal1_4        // FMOM MX 5T wi P+poly shield wi DM

fmom57_mx_reg_4t   = fmom57_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom57_mx_reg_nw1   = fmom57_mx_reg4 INTERACT MOMDMY31              
fmom57_mx_reg_nw2   = fmom57_mx_reg_nw1 INTERACT nxwell              
fmom57_mx_reg_nw    = fmom57_mx_reg_nw2 NOT INTERACT MOM_dmetal1_4  // FMOM MX 5T wi NW shield wo DM
fmom57_mx_reg_nw_dm = fmom57_mx_reg_nw2 INTERACT MOM_dmetal1_4      // FMOM MX 5T wi NW shield wi DM

fmom57_mx_reg_pw1   = fmom57_mx_reg5 INTERACT MOMDMY32
fmom57_mx_reg_pw2   = fmom57_mx_reg_pw1 INTERACT psub
fmom57_mx_reg_pw    = fmom57_mx_reg_pw2 NOT INTERACT MOM_dmetal1_4  // FMOM MX 5T wi PW shield wo DM
fmom57_mx_reg_pw_dm = fmom57_mx_reg_pw2 INTERACT MOM_dmetal1_4      // FMOM MX 5T wi PW shield wi DM

fmom57_mx_reg_ntn1   = fmom57_mx_reg6 INTERACT MOMDMY33
fmom57_mx_reg_ntn2   = fmom57_mx_reg_ntn1 INTERACT NT_N
fmom57_mx_reg_ntn    = fmom57_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_4 // FMOM MX 5T wi NTN shield wo DM
fmom57_mx_reg_ntn_dm = fmom57_mx_reg_ntn2 INTERACT MOM_dmetal1_4     // FMOM MX 5T wi NTN shield wi DM

fmom57_rf_reg1     = mom57_Left8 NOT INTERACT mom57_idt
fmom57_rf_reg2     = fmom57_rf_reg1 INTERACT MOMDMY100
fmom57_rf_reg3     = fmom57_rf_reg2 NOT INTERACT MOMDMY22
fmom57_rf_reg4     = fmom57_rf_reg3 INTERACT RFDMY
fmom57_rf_reg5     = fmom57_rf_reg4 NOT INTERACT MOMDMY27
fmom57_rf_reg6     = fmom57_rf_reg5 NOT INTERACT MOMDMY31
fmom57_rf_reg7     = fmom57_rf_reg6 NOT INTERACT MOMDMY32
fmom57_rf_reg8     = fmom57_rf_reg7 NOT INTERACT MOMDMY33

fmom57_rf_reg_nw1   = fmom57_rf_reg5 INTERACT MOMDMY31
fmom57_rf_reg_nw2   = fmom57_rf_reg_nw1 INTERACT nxwell              
fmom57_rf_reg_nw    = fmom57_rf_reg_nw2 NOT INTERACT MOM_dmetal1_4   // FMOM 3T RF wi NW shield wo DM
fmom57_rf_reg_nw_dm = fmom57_rf_reg_nw2 INTERACT MOM_dmetal1_4       // FMOM 3T RF wi NW shield wi DM

fmom57_rf_reg_pw1   = fmom57_rf_reg6 INTERACT MOMDMY32
fmom57_rf_reg_pw2   = fmom57_rf_reg_pw1 INTERACT psub                
fmom57_rf_reg_pw    = fmom57_rf_reg_pw2 NOT INTERACT MOM_dmetal1_4   // FMOM 3T RF wi PW shield wo DM
fmom57_rf_reg_pw_dm = fmom57_rf_reg_pw2 INTERACT MOM_dmetal1_4       // FMOM 3T RF wi PW shield wi DM

fmom57_rf_reg_ntn1   = fmom57_rf_reg7 INTERACT MOMDMY33
fmom57_rf_reg_ntn2   = fmom57_rf_reg_ntn1 INTERACT NT_N
fmom57_rf_reg_ntn    = fmom57_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_4 // FMOM 3T RF wi NTN shield wo DM
fmom57_rf_reg_ntn_dm = fmom57_rf_reg_ntn2 INTERACT MOM_dmetal1_4     // FMOM 3T RF wi NTN shield wi DM

mom57_mx_aux   = mom57_Left8 AND MOMDMY22
mom57_extc = FM_tip7 NOT INTERACT MOM_field7 > 2

DEVICE cfmom fmom57_reg_n M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_n)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom57_reg_p M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_p)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    dmflag = 0
]
DEVICE cfmom fmom57_reg_n_dm M7(PLUS) M7(MINUS) n_poly(BULK) <MOM_field5> <MOM_hole5> <mom57_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_n_dm)/ nr
    ftip = area(mom57_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    ftip = area(mom57_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom57_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom57_reg_p_dm M7(PLUS) M7(MINUS) p_poly(BULK) <MOM_field5> <MOM_hole5> <mom57_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_p_dm)/ nr
    ftip = area(mom57_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    ftip = area(mom57_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom57_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom57_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_nw)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom57_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_pw)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom57_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_ntn)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom57_reg_ntn_wo_pring M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_ntn_wo_pring)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom57_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom57_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_nw_dm)/ nr
    ftip = area(mom57_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 1
    ftip = area(mom57_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom57_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom57_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_pw_dm)/ nr
    ftip = area(mom57_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 2
    ftip = area(mom57_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom57_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom57_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_ntn_dm)/ nr
    ftip = area(mom57_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 3
    ftip = area(mom57_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom57_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom57_reg_ntn_wo_pring_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom57_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 4
    ftip = area(mom57_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom57_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom57_reg_2t M7(PLUS) M7(MINUS) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_reg_2t)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
]


DEVICE cfmom_mx_4t fmom57_mx_reg_4t mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2)  <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
]


DEVICE cfmom_wo_rf fmom57_rf_reg_nw M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_rf_reg_nw)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom57_rf_reg_pw M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_rf_reg_pw)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom57_rf_reg_ntn M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_rf_reg_ntn)/ nr
    ftip = area(mom57_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom57_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom57_rf_reg_nw_dm M7(PLUS) M7(MINUS) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom57_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_rf_reg_nw_dm)/ nr
    ftip = area(mom57_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom57_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 1
    ftip = area(mom57_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom57_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom57_rf_reg_pw_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_rf_reg_pw_dm)/ nr
    ftip = area(mom57_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom57_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 2
    ftip = area(mom57_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom57_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom57_rf_reg_ntn_dm M7(PLUS) M7(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom57_rf_reg_ntn_dm)/ nr
    ftip = area(mom57_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom57_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 7
    shield = 3
    ftip = area(mom57_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom57_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom57_mx_reg_n mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    dmflag = 0
]
DEVICE cfmom_mx fmom57_mx_reg_p mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom57_mx_reg_nw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom57_mx_reg_pw mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom57_mx_reg_ntn mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom57_mx_reg_n_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) n_poly(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    ftip = area(mom57_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom57_mx_reg_p_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) p_poly(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    ftip = area(mom57_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom57_mx_reg_nw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    shield = 1
    ftip = area(mom57_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom57_mx_reg_pw_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    shield = 2
    ftip = area(mom57_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom57_mx_reg_ntn_dm mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOM_field5> <MOM_hole5> <mom57_mx_aux> <M7> <mom57_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M7)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom57_mx_aux)/ (nr*mf1)
    ftip = area(mom57_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom57_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 7
    shield = 3
    ftip = area(mom57_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]





mom58_1 = MOMDMY8 NOT INTERACT MOM_field1
mom58_2 = mom58_1 NOT INTERACT MOM_field2
mom58_3 = mom58_2 NOT INTERACT MOM_field3
mom58_4 = mom58_3 NOT INTERACT MOM_field4


mom58_5 = mom58_4 INTERACT MOM_field5

mom58_6 = mom58_5 INTERACT MOM_field6

mom58_7 = mom58_6 INTERACT MOM_field7

mom58_8 = mom58_7 INTERACT MOM_field8


mom58_idt = MOM_field8 NOT MOM_field7




mom58_reg1     = mom58_8 INTERACT mom58_idt
mom58_reg2     = mom58_reg1 INTERACT MOMDMY0
mom58_reg3     = mom58_reg2 NOT INTERACT MOMDMY22
mom58_reg4     = mom58_reg3 NOT INTERACT RFDMY
mom58_reg5     = mom58_reg4 NOT INTERACT MOMDMY27
mom58_reg6     = mom58_reg5 NOT INTERACT MOMDMY31
mom58_reg7     = mom58_reg6 NOT INTERACT MOMDMY32
mom58_reg      = mom58_reg7 NOT INTERACT MOMDMY33
 
mom58_reg_n    = mom58_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom58_reg_p    = mom58_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom58_reg_2t   = mom58_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom58_reg_nw1  = mom58_reg5 INTERACT MOMDMY31
mom58_reg_nw   = mom58_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom58_reg_pw1  = mom58_reg6 INTERACT MOMDMY32
mom58_reg_pw   = mom58_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom58_reg_ntn1 = mom58_reg7 INTERACT MOMDMY33
mom58_reg_ntn  = mom58_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom58_mx_reg1  = MOMDMY22 INTERACT mom58_8
mom58_mx_reg2  = mom58_mx_reg1 INTERACT mom58_idt
mom58_mx_reg3  = mom58_mx_reg2 INTERACT MOMDMY0
mom58_mx_reg   = mom58_mx_reg3 INTERACT poly


fmom58_reg1        = mom58_8 NOT INTERACT mom58_idt
fmom58_reg2        = fmom58_reg1 INTERACT MOMDMY100
fmom58_reg3        = fmom58_reg2 NOT INTERACT MOMDMY22
fmom58_reg4        = fmom58_reg3 NOT INTERACT RFDMY
fmom58_reg5        = fmom58_reg4 NOT INTERACT MOMDMY27
fmom58_reg6        = fmom58_reg5 NOT INTERACT MOMDMY31
fmom58_reg7        = fmom58_reg6 NOT INTERACT MOMDMY32
fmom58_reg         = fmom58_reg7 NOT INTERACT MOMDMY33
 
fmom58_reg_n1      = fmom58_reg INTERACT n_poly                    
fmom58_reg_n       = fmom58_reg_n1 NOT INTERACT MOM_dmetal1_4       // FMOM 3T wi N+poly shield wo DM
fmom58_reg_n_dm    = fmom58_reg_n1 INTERACT MOM_dmetal1_4           // FMOM 3T wi N+poly shield wi DM

fmom58_reg_p1      = fmom58_reg INTERACT p_poly                     
fmom58_reg_p       = fmom58_reg_p1 NOT INTERACT MOM_dmetal1_4       // FMOM 3T wi P+poly shield wo DM
fmom58_reg_p_dm    = fmom58_reg_p1 INTERACT MOM_dmetal1_4           // FMOM 3T wi P+poly shield wi DM

fmom58_reg_2t      = fmom58_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom58_reg_nw1     = fmom58_reg5 INTERACT MOMDMY31
fmom58_reg_nw2     = fmom58_reg_nw1 INTERACT nxwell
fmom58_reg_nw      = fmom58_reg_nw2 NOT INTERACT MOM_dmetal1_4      // FMOM 3T wi NW shield wo DM
fmom58_reg_nw_dm   = fmom58_reg_nw2 INTERACT MOM_dmetal1_4          // FMOM 3T wi NW shield wi DM
 
fmom58_reg_pw1     = fmom58_reg6 INTERACT MOMDMY32
fmom58_reg_pw2     = fmom58_reg_pw1 INTERACT psub
fmom58_reg_pw      = fmom58_reg_pw2 NOT INTERACT MOM_dmetal1_4      // FMOM 3T wi PW shield wo DM
fmom58_reg_pw_dm   = fmom58_reg_pw2 INTERACT MOM_dmetal1_4          // FMOM 3T wi PW shield wi DM

fmom58_reg_ntn1    = fmom58_reg7 INTERACT MOMDMY33
fmom58_reg_ntn2    = fmom58_reg_ntn1 INTERACT NT_N
fmom58_reg_ntn3    = fmom58_reg_ntn2 NOT INTERACT MOMDMY28
fmom58_reg_ntn     = fmom58_reg_ntn3 NOT INTERACT MOM_dmetal1_4     // FMOM 3T wi NTN shield wo DM
fmom58_reg_ntn_dm  = fmom58_reg_ntn3 INTERACT MOM_dmetal1_4         // FMOM 3T wi NTN shield wi DM

fmom58_reg_ntn_wo_pring1   = fmom58_reg_ntn2 INTERACT MOMDMY28             
fmom58_reg_ntn_wo_pring    = fmom58_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_4 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom58_reg_ntn_wo_pring_dm = fmom58_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_4     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom58_mx_reg1     = MOMDMY22 INTERACT mom58_8
fmom58_mx_reg2     = fmom58_mx_reg1 NOT INTERACT mom58_idt
fmom58_mx_reg3     = fmom58_mx_reg2 INTERACT MOMDMY100
fmom58_mx_reg4     = fmom58_mx_reg3 NOT INTERACT MOMDMY27
fmom58_mx_reg5     = fmom58_mx_reg4 NOT INTERACT MOMDMY31
fmom58_mx_reg6     = fmom58_mx_reg5 NOT INTERACT MOMDMY32
fmom58_mx_reg      = fmom58_mx_reg6 NOT INTERACT MOMDMY33

fmom58_mx_reg_n1   = fmom58_mx_reg  INTERACT n_poly
fmom58_mx_reg_n    = fmom58_mx_reg_n1 NOT INTERACT MOM_dmetal1_4    // FMOM MX 5T wi N+poly shield wo DM
fmom58_mx_reg_n_dm = fmom58_mx_reg_n1 INTERACT MOM_dmetal1_4        // FMOM MX 5T wi N+poly shield wi DM

fmom58_mx_reg_p1   = fmom58_mx_reg  INTERACT p_poly
fmom58_mx_reg_p    = fmom58_mx_reg_p1 NOT INTERACT MOM_dmetal1_4    // FMOM MX 5T wi P+poly shield wo DM
fmom58_mx_reg_p_dm = fmom58_mx_reg_p1 INTERACT MOM_dmetal1_4        // FMOM MX 5T wi P+poly shield wi DM

fmom58_mx_reg_4t   = fmom58_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom58_mx_reg_nw1   = fmom58_mx_reg4 INTERACT MOMDMY31              
fmom58_mx_reg_nw2   = fmom58_mx_reg_nw1 INTERACT nxwell              
fmom58_mx_reg_nw    = fmom58_mx_reg_nw2 NOT INTERACT MOM_dmetal1_4  // FMOM MX 5T wi NW shield wo DM
fmom58_mx_reg_nw_dm = fmom58_mx_reg_nw2 INTERACT MOM_dmetal1_4      // FMOM MX 5T wi NW shield wi DM

fmom58_mx_reg_pw1   = fmom58_mx_reg5 INTERACT MOMDMY32
fmom58_mx_reg_pw2   = fmom58_mx_reg_pw1 INTERACT psub
fmom58_mx_reg_pw    = fmom58_mx_reg_pw2 NOT INTERACT MOM_dmetal1_4  // FMOM MX 5T wi PW shield wo DM
fmom58_mx_reg_pw_dm = fmom58_mx_reg_pw2 INTERACT MOM_dmetal1_4      // FMOM MX 5T wi PW shield wi DM

fmom58_mx_reg_ntn1   = fmom58_mx_reg6 INTERACT MOMDMY33
fmom58_mx_reg_ntn2   = fmom58_mx_reg_ntn1 INTERACT NT_N
fmom58_mx_reg_ntn    = fmom58_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_4 // FMOM MX 5T wi NTN shield wo DM
fmom58_mx_reg_ntn_dm = fmom58_mx_reg_ntn2 INTERACT MOM_dmetal1_4     // FMOM MX 5T wi NTN shield wi DM

fmom58_rf_reg1     = mom58_8 NOT INTERACT mom58_idt
fmom58_rf_reg2     = fmom58_rf_reg1 INTERACT MOMDMY100
fmom58_rf_reg3     = fmom58_rf_reg2 NOT INTERACT MOMDMY22
fmom58_rf_reg4     = fmom58_rf_reg3 INTERACT RFDMY
fmom58_rf_reg5     = fmom58_rf_reg4 NOT INTERACT MOMDMY27
fmom58_rf_reg6     = fmom58_rf_reg5 NOT INTERACT MOMDMY31
fmom58_rf_reg7     = fmom58_rf_reg6 NOT INTERACT MOMDMY32
fmom58_rf_reg8     = fmom58_rf_reg7 NOT INTERACT MOMDMY33

fmom58_rf_reg_nw1   = fmom58_rf_reg5 INTERACT MOMDMY31
fmom58_rf_reg_nw2   = fmom58_rf_reg_nw1 INTERACT nxwell              
fmom58_rf_reg_nw    = fmom58_rf_reg_nw2 NOT INTERACT MOM_dmetal1_4   // FMOM 3T RF wi NW shield wo DM
fmom58_rf_reg_nw_dm = fmom58_rf_reg_nw2 INTERACT MOM_dmetal1_4       // FMOM 3T RF wi NW shield wi DM

fmom58_rf_reg_pw1   = fmom58_rf_reg6 INTERACT MOMDMY32
fmom58_rf_reg_pw2   = fmom58_rf_reg_pw1 INTERACT psub                
fmom58_rf_reg_pw    = fmom58_rf_reg_pw2 NOT INTERACT MOM_dmetal1_4   // FMOM 3T RF wi PW shield wo DM
fmom58_rf_reg_pw_dm = fmom58_rf_reg_pw2 INTERACT MOM_dmetal1_4       // FMOM 3T RF wi PW shield wi DM

fmom58_rf_reg_ntn1   = fmom58_rf_reg7 INTERACT MOMDMY33
fmom58_rf_reg_ntn2   = fmom58_rf_reg_ntn1 INTERACT NT_N
fmom58_rf_reg_ntn    = fmom58_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_4 // FMOM 3T RF wi NTN shield wo DM
fmom58_rf_reg_ntn_dm = fmom58_rf_reg_ntn2 INTERACT MOM_dmetal1_4     // FMOM 3T RF wi NTN shield wi DM

mom58_mx_aux   = mom58_8 AND MOMDMY22
mom58_extc = FM_tip8 NOT INTERACT MOM_field8 > 2

DEVICE cfmom fmom58_reg_n M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_n)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom58_reg_p M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_p)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom58_reg_n_dm M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field5> <MOM_hole5> <mom58_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_n_dm)/ nr
    ftip = area(mom58_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    ftip = area(mom58_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom58_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom58_reg_p_dm M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field5> <MOM_hole5> <mom58_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_p_dm)/ nr
    ftip = area(mom58_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    ftip = area(mom58_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom58_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom58_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_nw)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom58_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_pw)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom58_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_ntn)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom58_reg_ntn_wo_pring M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_ntn_wo_pring)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom58_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom58_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_nw_dm)/ nr
    ftip = area(mom58_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 1
    ftip = area(mom58_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom58_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom58_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_pw_dm)/ nr
    ftip = area(mom58_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 2
    ftip = area(mom58_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom58_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom58_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_ntn_dm)/ nr
    ftip = area(mom58_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 3
    ftip = area(mom58_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom58_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom58_reg_ntn_wo_pring_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom58_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 4
    ftip = area(mom58_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom58_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom58_reg_2t M8(PLUS) M8(MINUS) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_reg_2t)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
]


DEVICE cfmom_mx_4t fmom58_mx_reg_4t mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2)  <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
]


DEVICE cfmom_wo_rf fmom58_rf_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_rf_reg_nw)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom58_rf_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_rf_reg_pw)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom58_rf_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_rf_reg_ntn)/ nr
    ftip = area(mom58_extc) / nr / w
    s   = perimeter_coincide(MOM_hole5, fmom58_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom58_rf_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom58_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_rf_reg_nw_dm)/ nr
    ftip = area(mom58_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom58_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 1
    ftip = area(mom58_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom58_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom58_rf_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_rf_reg_pw_dm)/ nr
    ftip = area(mom58_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom58_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 2
    ftip = area(mom58_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom58_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom58_rf_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field5)
    w =  perimeter_coincide(MOM_field5,fmom58_rf_reg_ntn_dm)/ nr
    ftip = area(mom58_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole5, fmom58_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole5) / 2 / (nr-1) - s - 2 * ftip
    stm = 5
    spm = 8
    shield = 3
    ftip = area(mom58_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom58_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom58_mx_reg_n mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    dmflag = 0
]
DEVICE cfmom_mx fmom58_mx_reg_p mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom58_mx_reg_nw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom58_mx_reg_pw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom58_mx_reg_ntn mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom58_mx_reg_n_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    ftip = area(mom58_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom58_mx_reg_p_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    ftip = area(mom58_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom58_mx_reg_nw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    shield = 1
    ftip = area(mom58_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom58_mx_reg_pw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    shield = 2
    ftip = area(mom58_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom58_mx_reg_ntn_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field5> <MOM_hole5> <mom58_mx_aux> <M8> <mom58_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field5)/mf1
    w =  perimeter_coincide(MOM_field5,mom58_mx_aux)/ (nr*mf1)
    ftip = area(mom58_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole5, mom58_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole5) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 5
    spm = 8
    shield = 3
    ftip = area(mom58_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]






mom68_1 = MOMDMY8 NOT INTERACT MOM_field1
mom68_2 = mom68_1 NOT INTERACT MOM_field2
mom68_3 = mom68_2 NOT INTERACT MOM_field3
mom68_4 = mom68_3 NOT INTERACT MOM_field4
mom68_5 = mom68_4 NOT INTERACT MOM_field5


mom68_6 = mom68_5 INTERACT MOM_field6

mom68_7 = mom68_6 INTERACT MOM_field7

mom68_8 = mom68_7 INTERACT MOM_field8


mom68_idt = MOM_field8 NOT MOM_field7




mom68_reg1     = mom68_8 INTERACT mom68_idt
mom68_reg2     = mom68_reg1 INTERACT MOMDMY0
mom68_reg3     = mom68_reg2 NOT INTERACT MOMDMY22
mom68_reg4     = mom68_reg3 NOT INTERACT RFDMY
mom68_reg5     = mom68_reg4 NOT INTERACT MOMDMY27
mom68_reg6     = mom68_reg5 NOT INTERACT MOMDMY31
mom68_reg7     = mom68_reg6 NOT INTERACT MOMDMY32
mom68_reg      = mom68_reg7 NOT INTERACT MOMDMY33
 
mom68_reg_n    = mom68_reg INTERACT n_poly                    // RTMOM 3T wi N+poly shield
mom68_reg_p    = mom68_reg INTERACT p_poly                    // RTMOM 3T wi P+poly shield

mom68_reg_2t   = mom68_reg3 INTERACT MOMDMY27                  // RTMOM 2T

mom68_reg_nw1  = mom68_reg5 INTERACT MOMDMY31
mom68_reg_nw   = mom68_reg_nw1 INTERACT nxwell                 // RTMOM 3T wi NW shield

mom68_reg_pw1  = mom68_reg6 INTERACT MOMDMY32
mom68_reg_pw   = mom68_reg_pw1 INTERACT psub                   // RTMOM 3T wi PSUB shield

mom68_reg_ntn1 = mom68_reg7 INTERACT MOMDMY33
mom68_reg_ntn  = mom68_reg_ntn1 INTERACT NT_N                  // RTMOM 3T wi NTN shield

mom68_mx_reg1  = MOMDMY22 INTERACT mom68_8
mom68_mx_reg2  = mom68_mx_reg1 INTERACT mom68_idt
mom68_mx_reg3  = mom68_mx_reg2 INTERACT MOMDMY0
mom68_mx_reg   = mom68_mx_reg3 INTERACT poly


fmom68_reg1        = mom68_8 NOT INTERACT mom68_idt
fmom68_reg2        = fmom68_reg1 INTERACT MOMDMY100
fmom68_reg3        = fmom68_reg2 NOT INTERACT MOMDMY22
fmom68_reg4        = fmom68_reg3 NOT INTERACT RFDMY
fmom68_reg5        = fmom68_reg4 NOT INTERACT MOMDMY27
fmom68_reg6        = fmom68_reg5 NOT INTERACT MOMDMY31
fmom68_reg7        = fmom68_reg6 NOT INTERACT MOMDMY32
fmom68_reg         = fmom68_reg7 NOT INTERACT MOMDMY33
 
fmom68_reg_n1      = fmom68_reg INTERACT n_poly                    
fmom68_reg_n       = fmom68_reg_n1 NOT INTERACT MOM_dmetal1_5       // FMOM 3T wi N+poly shield wo DM
fmom68_reg_n_dm    = fmom68_reg_n1 INTERACT MOM_dmetal1_5           // FMOM 3T wi N+poly shield wi DM

fmom68_reg_p1      = fmom68_reg INTERACT p_poly                     
fmom68_reg_p       = fmom68_reg_p1 NOT INTERACT MOM_dmetal1_5       // FMOM 3T wi P+poly shield wo DM
fmom68_reg_p_dm    = fmom68_reg_p1 INTERACT MOM_dmetal1_5           // FMOM 3T wi P+poly shield wi DM

fmom68_reg_2t      = fmom68_reg4 INTERACT MOMDMY27                       // FMOM 2T

fmom68_reg_nw1     = fmom68_reg5 INTERACT MOMDMY31
fmom68_reg_nw2     = fmom68_reg_nw1 INTERACT nxwell
fmom68_reg_nw      = fmom68_reg_nw2 NOT INTERACT MOM_dmetal1_5      // FMOM 3T wi NW shield wo DM
fmom68_reg_nw_dm   = fmom68_reg_nw2 INTERACT MOM_dmetal1_5          // FMOM 3T wi NW shield wi DM
 
fmom68_reg_pw1     = fmom68_reg6 INTERACT MOMDMY32
fmom68_reg_pw2     = fmom68_reg_pw1 INTERACT psub
fmom68_reg_pw      = fmom68_reg_pw2 NOT INTERACT MOM_dmetal1_5      // FMOM 3T wi PW shield wo DM
fmom68_reg_pw_dm   = fmom68_reg_pw2 INTERACT MOM_dmetal1_5          // FMOM 3T wi PW shield wi DM

fmom68_reg_ntn1    = fmom68_reg7 INTERACT MOMDMY33
fmom68_reg_ntn2    = fmom68_reg_ntn1 INTERACT NT_N
fmom68_reg_ntn3    = fmom68_reg_ntn2 NOT INTERACT MOMDMY28
fmom68_reg_ntn     = fmom68_reg_ntn3 NOT INTERACT MOM_dmetal1_5     // FMOM 3T wi NTN shield wo DM
fmom68_reg_ntn_dm  = fmom68_reg_ntn3 INTERACT MOM_dmetal1_5         // FMOM 3T wi NTN shield wi DM

fmom68_reg_ntn_wo_pring1   = fmom68_reg_ntn2 INTERACT MOMDMY28             
fmom68_reg_ntn_wo_pring    = fmom68_reg_ntn_wo_pring1 NOT INTERACT MOM_dmetal1_5 // FMOM 3T wi NTN shield wo ptap_ring wo DM
fmom68_reg_ntn_wo_pring_dm = fmom68_reg_ntn_wo_pring1 INTERACT MOM_dmetal1_5     // FMOM 3T wi NTN shield wo ptap_ring wi DM

fmom68_mx_reg1     = MOMDMY22 INTERACT mom68_8
fmom68_mx_reg2     = fmom68_mx_reg1 NOT INTERACT mom68_idt
fmom68_mx_reg3     = fmom68_mx_reg2 INTERACT MOMDMY100
fmom68_mx_reg4     = fmom68_mx_reg3 NOT INTERACT MOMDMY27
fmom68_mx_reg5     = fmom68_mx_reg4 NOT INTERACT MOMDMY31
fmom68_mx_reg6     = fmom68_mx_reg5 NOT INTERACT MOMDMY32
fmom68_mx_reg      = fmom68_mx_reg6 NOT INTERACT MOMDMY33

fmom68_mx_reg_n1   = fmom68_mx_reg  INTERACT n_poly
fmom68_mx_reg_n    = fmom68_mx_reg_n1 NOT INTERACT MOM_dmetal1_5    // FMOM MX 5T wi N+poly shield wo DM
fmom68_mx_reg_n_dm = fmom68_mx_reg_n1 INTERACT MOM_dmetal1_5        // FMOM MX 5T wi N+poly shield wi DM

fmom68_mx_reg_p1   = fmom68_mx_reg  INTERACT p_poly
fmom68_mx_reg_p    = fmom68_mx_reg_p1 NOT INTERACT MOM_dmetal1_5    // FMOM MX 5T wi P+poly shield wo DM
fmom68_mx_reg_p_dm = fmom68_mx_reg_p1 INTERACT MOM_dmetal1_5        // FMOM MX 5T wi P+poly shield wi DM

fmom68_mx_reg_4t   = fmom68_mx_reg3 INTERACT MOMDMY27                    // FMOM MX 4T

fmom68_mx_reg_nw1   = fmom68_mx_reg4 INTERACT MOMDMY31              
fmom68_mx_reg_nw2   = fmom68_mx_reg_nw1 INTERACT nxwell              
fmom68_mx_reg_nw    = fmom68_mx_reg_nw2 NOT INTERACT MOM_dmetal1_5  // FMOM MX 5T wi NW shield wo DM
fmom68_mx_reg_nw_dm = fmom68_mx_reg_nw2 INTERACT MOM_dmetal1_5      // FMOM MX 5T wi NW shield wi DM

fmom68_mx_reg_pw1   = fmom68_mx_reg5 INTERACT MOMDMY32
fmom68_mx_reg_pw2   = fmom68_mx_reg_pw1 INTERACT psub
fmom68_mx_reg_pw    = fmom68_mx_reg_pw2 NOT INTERACT MOM_dmetal1_5  // FMOM MX 5T wi PW shield wo DM
fmom68_mx_reg_pw_dm = fmom68_mx_reg_pw2 INTERACT MOM_dmetal1_5      // FMOM MX 5T wi PW shield wi DM

fmom68_mx_reg_ntn1   = fmom68_mx_reg6 INTERACT MOMDMY33
fmom68_mx_reg_ntn2   = fmom68_mx_reg_ntn1 INTERACT NT_N
fmom68_mx_reg_ntn    = fmom68_mx_reg_ntn2 NOT INTERACT MOM_dmetal1_5 // FMOM MX 5T wi NTN shield wo DM
fmom68_mx_reg_ntn_dm = fmom68_mx_reg_ntn2 INTERACT MOM_dmetal1_5     // FMOM MX 5T wi NTN shield wi DM

fmom68_rf_reg1     = mom68_8 NOT INTERACT mom68_idt
fmom68_rf_reg2     = fmom68_rf_reg1 INTERACT MOMDMY100
fmom68_rf_reg3     = fmom68_rf_reg2 NOT INTERACT MOMDMY22
fmom68_rf_reg4     = fmom68_rf_reg3 INTERACT RFDMY
fmom68_rf_reg5     = fmom68_rf_reg4 NOT INTERACT MOMDMY27
fmom68_rf_reg6     = fmom68_rf_reg5 NOT INTERACT MOMDMY31
fmom68_rf_reg7     = fmom68_rf_reg6 NOT INTERACT MOMDMY32
fmom68_rf_reg8     = fmom68_rf_reg7 NOT INTERACT MOMDMY33

fmom68_rf_reg_nw1   = fmom68_rf_reg5 INTERACT MOMDMY31
fmom68_rf_reg_nw2   = fmom68_rf_reg_nw1 INTERACT nxwell              
fmom68_rf_reg_nw    = fmom68_rf_reg_nw2 NOT INTERACT MOM_dmetal1_5   // FMOM 3T RF wi NW shield wo DM
fmom68_rf_reg_nw_dm = fmom68_rf_reg_nw2 INTERACT MOM_dmetal1_5       // FMOM 3T RF wi NW shield wi DM

fmom68_rf_reg_pw1   = fmom68_rf_reg6 INTERACT MOMDMY32
fmom68_rf_reg_pw2   = fmom68_rf_reg_pw1 INTERACT psub                
fmom68_rf_reg_pw    = fmom68_rf_reg_pw2 NOT INTERACT MOM_dmetal1_5   // FMOM 3T RF wi PW shield wo DM
fmom68_rf_reg_pw_dm = fmom68_rf_reg_pw2 INTERACT MOM_dmetal1_5       // FMOM 3T RF wi PW shield wi DM

fmom68_rf_reg_ntn1   = fmom68_rf_reg7 INTERACT MOMDMY33
fmom68_rf_reg_ntn2   = fmom68_rf_reg_ntn1 INTERACT NT_N
fmom68_rf_reg_ntn    = fmom68_rf_reg_ntn2 NOT INTERACT MOM_dmetal1_5 // FMOM 3T RF wi NTN shield wo DM
fmom68_rf_reg_ntn_dm = fmom68_rf_reg_ntn2 INTERACT MOM_dmetal1_5     // FMOM 3T RF wi NTN shield wi DM

mom68_mx_aux   = mom68_8 AND MOMDMY22
mom68_extc = FM_tip8 NOT INTERACT MOM_field8 > 2

DEVICE cfmom fmom68_reg_n M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_n)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_n) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom68_reg_p M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_p)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_p) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    dmflag = 0
]
DEVICE cfmom fmom68_reg_n_dm M8(PLUS) M8(MINUS) n_poly(BULK) <MOM_field6> <MOM_hole6> <mom68_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_n_dm)/ nr
    ftip = area(mom68_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_n_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    ftip = area(mom68_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom68_reg_n_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen * ylen )
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom fmom68_reg_p_dm M8(PLUS) M8(MINUS) p_poly(BULK) <MOM_field6> <MOM_hole6> <mom68_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_p_dm)/ nr
    ftip = area(mom68_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_p_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    ftip = area(mom68_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom68_reg_p_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen * ylen )
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo fmom68_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_nw)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo fmom68_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_pw)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo fmom68_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_ntn)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 3
    dmflag = 0
]
DEVICE cfmom_wo fmom68_reg_ntn_wo_pring M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_ntn_wo_pring)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_ntn_wo_pring) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 4
    dmflag = 0
]
DEVICE cfmom_wo fmom68_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field6> <MOM_hole6> <mom68_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_nw_dm)/ nr
    ftip = area(mom68_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 1
    ftip = area(mom68_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom68_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen * ylen )
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom68_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_pw_dm)/ nr
    ftip = area(mom68_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 2
    ftip = area(mom68_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom68_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen * ylen )
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom68_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_ntn_dm)/ nr
    ftip = area(mom68_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 3
    ftip = area(mom68_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom68_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen * ylen )
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo fmom68_reg_ntn_wo_pring_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_ntn_wo_pring_dm)/ nr
    ftip = area(mom68_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_ntn_wo_pring_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 4
    ftip = area(mom68_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom68_reg_ntn_wo_pring_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen * ylen )
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_2t fmom68_reg_2t M8(PLUS) M8(MINUS) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_reg_2t)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_reg_2t) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
]


DEVICE cfmom_mx_4t fmom68_mx_reg_4t mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2)  <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> [
    property w,s,nr,lr,stm,spm,multi
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
]


DEVICE cfmom_wo_rf fmom68_rf_reg_nw M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_rf_reg_nw)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_rf_reg_nw) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom68_rf_reg_pw M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_rf_reg_pw)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_rf_reg_pw) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_rf fmom68_rf_reg_ntn M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_rf_reg_ntn)/ nr
    ftip = area(mom68_extc) / nr / w
    s   = perimeter_coincide(MOM_hole6, fmom68_rf_reg_ntn) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 3
    dmflag = 0
]


DEVICE cfmom_wo_rf fmom68_rf_reg_nw_dm M8(PLUS) M8(MINUS) nxwell(BULK) <MOM_field6> <MOM_hole6> <mom68_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_rf_reg_nw_dm)/ nr
    ftip = area(mom68_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole6, fmom68_rf_reg_nw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 1
    ftip = area(mom68_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom68_rf_reg_nw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen * ylen )
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom68_rf_reg_pw_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_rf_reg_pw_dm)/ nr
    ftip = area(mom68_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole6, fmom68_rf_reg_pw_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 2
    ftip = area(mom68_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom68_rf_reg_pw_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen * ylen )
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_rf fmom68_rf_reg_ntn_dm M8(PLUS) M8(MINUS) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_extc>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> (PLUS MINUS) [
    property w,s,nr,lr,stm,spm,dmflag,shield
    nr = count(MOM_field6)
    w =  perimeter_coincide(MOM_field6,fmom68_rf_reg_ntn_dm)/ nr
    ftip = area(mom68_extc)/(nr*w)
    s   = perimeter_coincide(MOM_hole6, fmom68_rf_reg_ntn_dm) / (nr-1) / 2
    lr  = perimeter(MOM_hole6) / 2 / (nr-1) - s - 2 * ftip
    stm = 6
    spm = 8
    shield = 3
    ftip = area(mom68_extc)/(nr*w)
    moml = lr + 2*ftip
    momw = (perimeter(fmom68_rf_reg_ntn_dm) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen * ylen )
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen * ylen )
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen * ylen )
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen * ylen )
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen * ylen )
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_mx fmom68_mx_reg_n mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    dmflag = 0
]
DEVICE cfmom_mx fmom68_mx_reg_p mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    dmflag = 0
]


DEVICE cfmom_wo_mx fmom68_mx_reg_nw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    shield = 1
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom68_mx_reg_pw mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    shield = 2
    dmflag = 0
]
DEVICE cfmom_wo_mx fmom68_mx_reg_ntn mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc) / (nr*mf1) / w
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    shield = 3
    dmflag = 0
]

DEVICE cfmom_mx fmom68_mx_reg_n_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) n_poly(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    ftip = area(mom68_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen*ylen*mf1)
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_mx fmom68_mx_reg_p_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) p_poly(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> [
    property w,s,nr,lr,stm,spm,multi,dmflag
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    ftip = area(mom68_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.175e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen*ylen*mf1)
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]

DEVICE cfmom_wo_mx fmom68_mx_reg_nw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    shield = 1
    ftip = area(mom68_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen*ylen*mf1)
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom68_mx_reg_pw_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    shield = 2
    ftip = area(mom68_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen*ylen*mf1)
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]
DEVICE cfmom_wo_mx fmom68_mx_reg_ntn_dm mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOM_field6> <MOM_hole6> <mom68_mx_aux> <M8> <mom68_extc> <MOMDMY100>   <dmetal1> <dmetal2> <dmetal3> <dmetal4> <dmetal5> [
    property w,s,nr,lr,stm,spm,multi,dmflag,shield
    mf1 = count(M8)-2
    multi = mf1/2
    nr = count(MOM_field6)/mf1
    w =  perimeter_coincide(MOM_field6,mom68_mx_aux)/ (nr*mf1)
    ftip = area(mom68_extc)/(nr*w*mf1)
    s   = perimeter_coincide(MOM_hole6, mom68_mx_aux) / (mf1*(nr-1)) / 2
    lr  = perimeter(MOM_hole6) / 2 / (mf1*(nr-1)) - s - 2 * ftip    
    stm = 6
    spm = 8
    shield = 3
    ftip = area(mom68_extc)/(nr*w*mf1)
    moml = lr + 2*ftip
    momw = ((perimeter(MOMDMY100)/mf1) - (2*moml))/2
    xlen = momw + (2*0.34e-6)
    ylen = moml + (2*0.455e-6)
    dmmax = 0
    dmmin = 1
    dm1 = area(dmetal1) / (xlen*ylen*mf1)
    IF( dm1 < dmmin ) { dmmin = dm1 }
    IF( dm1 > dmmax ) { dmmax = dm1 }
    dm2 = area(dmetal2) / (xlen*ylen*mf1)
    IF( dm2 < dmmin ) { dmmin = dm2 }
    IF( dm2 > dmmax ) { dmmax = dm2 }
    dm3 = area(dmetal3) / (xlen*ylen*mf1)
    IF( dm3 < dmmin ) { dmmin = dm3 }
    IF( dm3 > dmmax ) { dmmax = dm3 }
    dm4 = area(dmetal4) / (xlen*ylen*mf1)
    IF( dm4 < dmmin ) { dmmin = dm4 }
    IF( dm4 > dmmax ) { dmmax = dm4 }
    dm5 = area(dmetal5) / (xlen*ylen*mf1)
    IF( dm5 < dmmin ) { dmmin = dm5 }
    IF( dm5 > dmmax ) { dmmax = dm5 }
    IF( dmmax > 0.11 && dmmax < 0.13 && dmmin > 0.11 && dmmin < 0.13 ) {
       dmflag = 1
    } ELSE {
       dmflag = 99
    }
]




TRACE PROPERTY cfmom nr nr 0 
TRACE PROPERTY cfmom s  s MOM_Serr 
TRACE PROPERTY cfmom w  w MOM_Werr
TRACE PROPERTY cfmom lr  lr MOM_Lerr
TRACE PROPERTY cfmom stm stm 0
TRACE PROPERTY cfmom spm spm 0
TRACE PROPERTY cfmom dmflag dmflag 0

TRACE PROPERTY cfmom_wo nr nr 0 
TRACE PROPERTY cfmom_wo s  s MOM_Serr 
TRACE PROPERTY cfmom_wo w  w MOM_Werr
TRACE PROPERTY cfmom_wo lr  lr MOM_Lerr
TRACE PROPERTY cfmom_wo stm stm 0
TRACE PROPERTY cfmom_wo spm spm 0
TRACE PROPERTY cfmom_wo shield shield 0
TRACE PROPERTY cfmom_wo dmflag dmflag 0

TRACE PROPERTY cfmom_2t nr nr 0 
TRACE PROPERTY cfmom_2t s  s MOM_Serr 
TRACE PROPERTY cfmom_2t w  w MOM_Werr
TRACE PROPERTY cfmom_2t lr  lr MOM_Lerr
TRACE PROPERTY cfmom_2t stm stm 0
TRACE PROPERTY cfmom_2t spm spm 0

TRACE PROPERTY cfmom_mx_4t nr nr 0 
TRACE PROPERTY cfmom_mx_4t s  s MOM_Serr 
TRACE PROPERTY cfmom_mx_4t w  w MOM_Werr
TRACE PROPERTY cfmom_mx_4t lr  lr MOM_Lerr
TRACE PROPERTY cfmom_mx_4t stm stm 0
TRACE PROPERTY cfmom_mx_4t spm spm 0
TRACE PROPERTY cfmom_mx_4t multi multi 0


TRACE PROPERTY cfmom_wo_rf nr nr 0 
TRACE PROPERTY cfmom_wo_rf s  s MOM_Serr 
TRACE PROPERTY cfmom_wo_rf w  w MOM_Werr
TRACE PROPERTY cfmom_wo_rf lr  lr MOM_Lerr
TRACE PROPERTY cfmom_wo_rf stm stm 0
TRACE PROPERTY cfmom_wo_rf spm spm 0
TRACE PROPERTY cfmom_wo_rf shield shield 0
TRACE PROPERTY cfmom_wo_rf dmflag dmflag 0

TRACE PROPERTY cfmom_mx nr nr 0 
TRACE PROPERTY cfmom_mx s  s MOM_Serr 
TRACE PROPERTY cfmom_mx w  w MOM_Werr
TRACE PROPERTY cfmom_mx lr  lr MOM_Lerr
TRACE PROPERTY cfmom_mx stm stm 0
TRACE PROPERTY cfmom_mx spm spm 0
TRACE PROPERTY cfmom_mx dmflag dmflag 0
TRACE PROPERTY cfmom_mx multi multi 0


TRACE PROPERTY cfmom_wo_mx nr nr 0 
TRACE PROPERTY cfmom_wo_mx s  s MOM_Serr 
TRACE PROPERTY cfmom_wo_mx w  w MOM_Werr
TRACE PROPERTY cfmom_wo_mx lr  lr MOM_Lerr
TRACE PROPERTY cfmom_wo_mx stm stm 0
TRACE PROPERTY cfmom_wo_mx spm spm 0
TRACE PROPERTY cfmom_wo_mx shield shield 0
TRACE PROPERTY cfmom_wo_mx dmflag dmflag 0
TRACE PROPERTY cfmom_wo_mx multi multi 0


//

//

//

//

//

//

DEVICE cmoscap_rf var11_cvar n_poly3(GATE) tndiff(BULK) psub(GNODE) <var11gt_rf> <nthin> [
  property lr,wr,br,gr
  gr = count(nthin)
  br = count(var11gt_rf)/gr
  wr = (perimeter_coincide(var11gt_rf,tndiff)/2)/(br*gr)
  lr = (area(var11gt_rf)/wr)/(br*gr)
]
TRACE PROPERTY cmoscap_rf lr lr MOSCAP_Lerr
TRACE PROPERTY cmoscap_rf wr wr MOSCAP_Werr
TRACE PROPERTY cmoscap_rf br br 0
TRACE PROPERTY cmoscap_rf gr gr 0

DEVICE cmoscap_rf18 var11_rf18 n_poly3(GATE) tndiff(BULK) psub(GNODE) <var11gt_rf> <nthin> [
  property lr,wr,br,gr
  gr = count(nthin)
  br = count(var11gt_rf)/gr
  wr = (perimeter_coincide(var11gt_rf,tndiff)/2)/(br*gr)
  lr = (area(var11gt_rf)/wr)/(br*gr)
]
TRACE PROPERTY cmoscap_rf18 lr lr MOSCAP_Lerr
TRACE PROPERTY cmoscap_rf18 wr wr MOSCAP_Werr
TRACE PROPERTY cmoscap_rf18 br br 0
TRACE PROPERTY cmoscap_rf18 gr gr 0

DEVICE cmoscap_rf18_nw var11_nw_rf18 n_poly3(GATE) tndiff(BULK) psub(GNODE) <var11gt_rf> <nthin> [
  property lr,wr,br,gr
  gr = count(nthin)
  br = count(var11gt_rf)/gr
  wr = (perimeter_coincide(var11gt_rf,tndiff)/2)/(br*gr)
  lr = (area(var11gt_rf)/wr)/(br*gr)
]
TRACE PROPERTY cmoscap_rf18_nw lr lr MOSCAP_Lerr
TRACE PROPERTY cmoscap_rf18_nw wr wr MOSCAP_Werr
TRACE PROPERTY cmoscap_rf18_nw br br 0
TRACE PROPERTY cmoscap_rf18_nw gr gr 0

DEVICE cmoscap_rf25 var11_rf25 n_poly3(GATE) tndiff(BULK) psub(GNODE) <var11gt_rf> <nthin> [
  property lr,wr,br,gr
  gr = count(nthin)
  br = count(var11gt_rf)/gr
  wr = (perimeter_coincide(var11gt_rf,tndiff)/2)/(br*gr)
  lr = (area(var11gt_rf)/wr)/(br*gr)
]
TRACE PROPERTY cmoscap_rf25 lr lr MOSCAP_Lerr
TRACE PROPERTY cmoscap_rf25 wr wr MOSCAP_Werr
TRACE PROPERTY cmoscap_rf25 br br 0
TRACE PROPERTY cmoscap_rf25 gr gr 0

DEVICE cmoscap_rf25_nw var11_nw_rf25 n_poly3(GATE) tndiff(BULK) psub(GNODE) <var11gt_rf> <nthin> [
  property lr,wr,br,gr
  gr = count(nthin)
  br = count(var11gt_rf)/gr
  wr = (perimeter_coincide(var11gt_rf,tndiff)/2)/(br*gr)
  lr = (area(var11gt_rf)/wr)/(br*gr)
]
TRACE PROPERTY cmoscap_rf25_nw lr lr MOSCAP_Lerr
TRACE PROPERTY cmoscap_rf25_nw wr wr MOSCAP_Werr
TRACE PROPERTY cmoscap_rf25_nw br br 0
TRACE PROPERTY cmoscap_rf25_nw gr gr 0

DEVICE cmoscap_rf_nw var11_nw n_poly3(GATE) tndiff(BULK) psub(GNODE) <var11gt_rf> <nthin> [
  property lr,wr,br,gr
  gr = count(nthin)
  br = count(var11gt_rf)/gr
  wr = (perimeter_coincide(var11gt_rf,tndiff)/2)/(br*gr)
  lr = (area(var11gt_rf)/wr)/(br*gr)
]
TRACE PROPERTY cmoscap_rf_nw lr lr MOSCAP_Lerr
TRACE PROPERTY cmoscap_rf_nw wr wr MOSCAP_Werr
TRACE PROPERTY cmoscap_rf_nw br br 0
TRACE PROPERTY cmoscap_rf_nw gr gr 0

DEVICE dmoscap_rf var10_dvar n_poly3(GATE1) n_poly3(GATE2) tndiff(BULK) psub(GNODE) <var10gt_rf> <nthin> (GATE1 GATE2) [
       property lr,wr,br,gr
       gr = count(nthin)
       br = count(var10gt_rf)/gr/2
       wr = (perimeter_coincide(var10gt_rf,tndiff)/2)/(br*gr*2)
       lr = (area(var10gt_rf)/wr)/(br*gr*2)
]
TRACE PROPERTY dmoscap_rf wr wr MOSCAP_Werr
TRACE PROPERTY dmoscap_rf lr lr MOSCAP_Lerr
TRACE PROPERTY dmoscap_rf br br 0
TRACE PROPERTY dmoscap_rf gr gr 0

DEVICE dmoscap_rf18 var10_rf18 n_poly3(GATE1) n_poly3(GATE2) tndiff(BULK) psub(GNODE) <var10gt_rf> <nthin> (GATE1 GATE2) [
       property lr,wr,br,gr
       gr = count(nthin)
       br = count(var10gt_rf)/gr/2
       wr = (perimeter_coincide(var10gt_rf,tndiff)/2)/(br*gr*2)
       lr = (area(var10gt_rf)/wr)/(br*gr*2)
]
TRACE PROPERTY dmoscap_rf18 wr wr MOSCAP_Werr
TRACE PROPERTY dmoscap_rf18 lr lr MOSCAP_Lerr
TRACE PROPERTY dmoscap_rf18 br br 0
TRACE PROPERTY dmoscap_rf18 gr gr 0

DEVICE dmoscap_rf18_nw var10_nw_rf18 n_poly3(GATE1) n_poly3(GATE2) tndiff(BULK) psub(GNODE) <var10gt_rf> <nthin> (GATE1 GATE2) [
       property lr,wr,br,gr
       gr = count(nthin)
       br = count(var10gt_rf)/gr/2
       wr = (perimeter_coincide(var10gt_rf,tndiff)/2)/(br*gr*2)
       lr = (area(var10gt_rf)/wr)/(br*gr*2)
]
TRACE PROPERTY dmoscap_rf18_nw wr wr MOSCAP_Werr
TRACE PROPERTY dmoscap_rf18_nw lr lr MOSCAP_Lerr
TRACE PROPERTY dmoscap_rf18_nw br br 0
TRACE PROPERTY dmoscap_rf18_nw gr gr 0

DEVICE dmoscap_rf25 var10_rf25 n_poly3(GATE1) n_poly3(GATE2) tndiff(BULK) psub(GNODE) <var10gt_rf> <nthin> (GATE1 GATE2) [
       property lr,wr,br,gr
       gr = count(nthin)
       br = count(var10gt_rf)/gr/2
       wr = (perimeter_coincide(var10gt_rf,tndiff)/2)/(br*gr*2)
       lr = (area(var10gt_rf)/wr)/(br*gr*2)
]
TRACE PROPERTY dmoscap_rf25 wr wr MOSCAP_Werr
TRACE PROPERTY dmoscap_rf25 lr lr MOSCAP_Lerr
TRACE PROPERTY dmoscap_rf25 br br 0
TRACE PROPERTY dmoscap_rf25 gr gr 0

DEVICE dmoscap_rf25_nw var10_nw_rf25 n_poly3(GATE1) n_poly3(GATE2) tndiff(BULK) psub(GNODE) <var10gt_rf> <nthin> (GATE1 GATE2) [
       property lr,wr,br,gr
       gr = count(nthin)
       br = count(var10gt_rf)/gr/2
       wr = (perimeter_coincide(var10gt_rf,tndiff)/2)/(br*gr*2)
       lr = (area(var10gt_rf)/wr)/(br*gr*2)
]
TRACE PROPERTY dmoscap_rf25_nw wr wr MOSCAP_Werr
TRACE PROPERTY dmoscap_rf25_nw lr lr MOSCAP_Lerr
TRACE PROPERTY dmoscap_rf25_nw br br 0
TRACE PROPERTY dmoscap_rf25_nw gr gr 0

DEVICE dmoscap_rf_nw var10_nw n_poly3(GATE1) n_poly3(GATE2) tndiff(BULK) psub(GNODE) <var10gt_rf> <nthin> (GATE1 GATE2) [
       property lr,wr,br,gr
       gr = count(nthin)
       br = count(var10gt_rf)/gr/2
       wr = (perimeter_coincide(var10gt_rf,tndiff)/2)/(br*gr*2)
       lr = (area(var10gt_rf)/wr)/(br*gr*2)
]
TRACE PROPERTY dmoscap_rf_nw wr wr MOSCAP_Werr
TRACE PROPERTY dmoscap_rf_nw lr lr MOSCAP_Lerr
TRACE PROPERTY dmoscap_rf_nw br br 0
TRACE PROPERTY dmoscap_rf_nw gr gr 0

#IFDEF extract_dnwdio
DEVICE D(pwdnw) rwdio psub DNW
TRACE PROPERTY D(pwdnw) a a DIOWELL_Aerr 
DEVICE D(dnwpsub) dnwdio psub_term DNW [
   property a,pj
   a = area(dnw)
   pj = perimeter(dnw)
]
TRACE PROPERTY D(dnwpsub) a a DIOWELL_Aerr
#ENDIF

#IFDEF MIMCAP_TYPE 
ctm_8 = ctm NOT CTM_O
cbm_8 = cbm NOT CBM_O
RCTMa = mim_top AND CTMDMY_8
RCTMb = RCTMa NOT INTERACT CTMDMY_9
RCTM8 = RCTMb INTERACT VIA7i
RCTM = ctm_8 INTERACT RCTM8
RCBM = cbm_8 INTERACT RCTM8
OCBM = RCBM NOT RCTM
ctm_via7a = RCTM8 AND VIA7i
ctm_via7b = ctm_via7a NOT CTM_O
ctm_via7  = ctm_via7b NOT CBM_O
cbm_via7a = OCBM AND VIA7i
cbm_via7  = cbm_via7a NOT CBM_O
tvia1   = VIA7i NOT ctm_via7
VIA7  = tvia1 NOT cbm_via7		// normal VIA7 will located on region of [CTM_O && CBM_O]
VIA8   = COPY VIA8i
//CONNECT STATEMENT
CONNECT M8 ctm_8 BY ctm_via7
CONNECT M8 cbm_8 BY cbm_via7
#ELSE
ctm_9 = ctm NOT CTM_O
cbm_9 = cbm NOT CBM_O
RCTMa = mim_top AND CTMDMY_9
RCTMb = RCTMa NOT INTERACT CTMDMY_8
RCTM9 = RCTMb INTERACT VIA8i
RCBM = cbm_9 INTERACT RCTM9
RCTM = ctm_9 INTERACT RCTM9
OCBM = RCBM NOT RCTM
ctm_via8a = RCTM9 AND VIA8i
ctm_via8b = ctm_via8a NOT CTM_O
ctm_via8  = ctm_via8b NOT CBM_O
cbm_via8a = OCBM AND VIA8i
cbm_via8  = cbm_via8a NOT CBM_O
tvia1   = VIA8i NOT ctm_via8
VIA8   = tvia1 NOT cbm_via8
VIA7  = COPY VIA7i

//CONNECT STATEMENT
CONNECT M9 ctm_9 BY ctm_via8
CONNECT M9 cbm_9 BY cbm_via8
#ENDIF

#IFDEF MIMCAP_TYPE
DEVICE mimcap_sin RCTM8 ctm_8(TOP) cbm_8(BOTTOM) [
  property lt,wt
  A_CAP = area(RCTM8)
  P_CAP = perimeter(RCTM8)
  P_2_CAP = P_CAP * P_CAP
  AC4 = A_CAP * 16
  KKK = P_2_CAP-AC4
  IF(KKK<0) {
  KKK=0
  }
  SQ = sqrt(KKK)
  lt = (P_CAP+SQ)/4
  wt = (P_CAP-SQ)/4
]
#ELSE
DEVICE mimcap_sin RCTM9 ctm_9(TOP) cbm_9(BOTTOM) [
  property lt,wt
  A_CAP = area(RCTM9)
  P_CAP = perimeter(RCTM9)
  P_2_CAP = P_CAP * P_CAP
  AC4 = A_CAP * 16
  KKK = P_2_CAP-AC4
  IF(KKK<0) {
  KKK=0
  }
  SQ = sqrt(KKK)
  lt = (P_CAP+SQ)/4
  wt = (P_CAP-SQ)/4
]
#ENDIF
TRACE PROPERTY mimcap_sin lt lt MIMCAP_Lerr
TRACE PROPERTY mimcap_sin wt wt MIMCAP_Werr

DEVICE moscap_rf var_nw3_rf n_poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf br br 0
TRACE PROPERTY moscap_rf gr gr 0

DEVICE moscap_rf15_nw var_nw_rf15_nw n_poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf15> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf15)/gr
  wr = (perimeter_coincide(vargt_rf15,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf15)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf15_nw lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf15_nw wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf15_nw br br 0
TRACE PROPERTY moscap_rf15_nw gr gr 0

DEVICE moscap_rf18 var_nw_rf18 n_poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf18> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf18)/gr
  wr = (perimeter_coincide(vargt_rf18,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf18)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf18 lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf18 wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf18 br br 0
TRACE PROPERTY moscap_rf18 gr gr 0

DEVICE moscap_rf18_nw var_nw_rf18_nw n_poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf18> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf18)/gr
  wr = (perimeter_coincide(vargt_rf18,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf18)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf18_nw lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf18_nw wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf18_nw br br 0
TRACE PROPERTY moscap_rf18_nw gr gr 0

DEVICE moscap_rf25 var_nw_rf25 n_poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf25> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf25)/gr
  wr = (perimeter_coincide(vargt_rf25,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf25)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf25 lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf25 wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf25 br br 0
TRACE PROPERTY moscap_rf25 gr gr 0

DEVICE moscap_rf25_nw var_nw_rf25_nw n_poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf25> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf25)/gr
  wr = (perimeter_coincide(vargt_rf25,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf25)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf25_nw lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf25_nw wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf25_nw br br 0
TRACE PROPERTY moscap_rf25_nw gr gr 0

DEVICE moscap_rf_nw var_nw3_rf_nw n_poly3(PLUS) tndiff(MINUS) psub(BULK) <vargt_rf> <nthin2> [
  property lr,wr,br,gr
  gr = count(nthin2)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
]
TRACE PROPERTY moscap_rf_nw lr lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf_nw wr wr MOSCAP_Werr
TRACE PROPERTY moscap_rf_nw br br 0
TRACE PROPERTY moscap_rf_nw gr gr 0

#IFDEF LVS_DECK
DEVICE ndio_gated_mac ndiff_gdio psub(PLUS) tndiff(MINUS) <ngate_gdio18> <npdiff_gdio> [
  property wg,dw,nr

#ELSE
DEVICE ndio_gated_mac ndiff_gdio psub(PLUS) tndiff_woR(MINUS) <ngate_gdio18> <npdiff_gdio> [
  property wg,dw,nr

#ENDIF   
  nr = count(ngate_gdio18)
  wg = perimeter_coincide(npdiff_gdio,ngate_gdio18)/nr/2
  dw = area(npdiff_gdio)/wg/(nr+1)
]  
TRACE PROPERTY ndio_gated_mac wg wg 0
TRACE PROPERTY ndio_gated_mac dw dw 0
TRACE PROPERTY ndio_gated_mac nr nr 0

#IFDEF LVS_DECK
DEVICE ndio_hia_mac hia_ndio_r psub(PLUS) tndiff(MINUS) <hia_ndio> [
#ELSE
DEVICE ndio_hia_mac hia_ndio_r psub(PLUS) tndiff_woR(MINUS) <hia_ndio> [
#ENDIF   
  property l,w,nf
  nf = count(hia_ndio)
  A_DIO = area(hia_ndio)/nf
  P_DIO = perimeter(hia_ndio)/nf
  P_2_DIO = P_DIO * P_DIO
  AD4 = A_DIO * 16
  KKK = P_2_DIO-AD4
  IF(KKK<0) {
  KKK=0
  }
  SQ = sqrt(KKK)
  l = (P_DIO+SQ)/4
  w = (P_DIO-SQ)/4
]
TRACE PROPERTY ndio_hia_mac w  w  DIO_Werr
TRACE PROPERTY ndio_hia_mac l  l  DIO_Lerr
TRACE PROPERTY ndio_hia_mac nf nf 0 

DEVICE ndio_hia_rf hia_ndio_rf_r psub(CATHODE) tndiff(ANODE) <hia_ndio_rf> [
  property al,aw,fn
  fn = count(hia_ndio_rf)  
  A_DIO = area(hia_ndio_rf)/fn
  P_DIO = perimeter(hia_ndio_rf)/fn
  P_2_DIO = P_DIO * P_DIO
  AD4 = A_DIO * 16
  KKK = P_2_DIO-AD4
  IF(KKK<0) {
  KKK=0
  }
  SQ = sqrt(KKK)
  al = (P_DIO+SQ)/4
  aw = (P_DIO-SQ)/4
]    

TRACE PROPERTY ndio_hia_rf aw aw 0
TRACE PROPERTY ndio_hia_rf al al 0
TRACE PROPERTY ndio_hia_rf fn fn 0

#IFDEF CCI_DECK
DEVICE nmos_rf_18_5t ngate_nthin_18_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf_18> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_18_5t ngate_nthin_18_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf_18> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_18)
   wr = ((perimeter_coincide(ngate_rf_18,s_tndiff)+ perimeter_coincide(ngate_rf_18,d_tndiff))/2)/nr
   lr = (area(ngate_rf_18)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_18_5t_layer = DEVICE LAYER nmos_rf_18_5t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_18_5t"
]
LVS ANNOTATE DEVICES nmos_rf_18_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_18_5t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_18_5t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_18_5t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_18_6t ngate_nthin_18_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf_18> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_18_6t ngate_nthin_18_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf_18> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_18)
   wr = ((perimeter_coincide(ngate_rf_18,s_tndiff)+ perimeter_coincide(ngate_rf_18,d_tndiff))/2)/nr
   lr = (area(ngate_rf_18)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_18_6t_layer = DEVICE LAYER nmos_rf_18_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_18_6t"
]
LVS ANNOTATE DEVICES nmos_rf_18_6t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_18_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_18_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_18_6t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_18_nw ngate_nthin_18 d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_18> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_18_nw ngate_nthin_18 d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_18> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_18)
   wr = ((perimeter_coincide(ngate_rf_18,s_tndiff)+ perimeter_coincide(ngate_rf_18,d_tndiff))/2)/nr
   lr = (area(ngate_rf_18)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_18_nw_layer = DEVICE LAYER nmos_rf_18_nw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_18_nw"
]
LVS ANNOTATE DEVICES nmos_rf_18_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_18_nw wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_18_nw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_18_nw nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_18ud15_5t ngate_nthin_18ud_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf_18ud> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_18ud15_5t ngate_nthin_18ud_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf_18ud> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_18ud)
   wr = ((perimeter_coincide(ngate_rf_18ud,s_tndiff)+ perimeter_coincide(ngate_rf_18ud,d_tndiff))/2)/nr
   lr = (area(ngate_rf_18ud)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_18ud15_5t_layer = DEVICE LAYER nmos_rf_18ud15_5t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_18ud15_5t"
]
LVS ANNOTATE DEVICES nmos_rf_18ud15_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_18ud15_5t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_18ud15_5t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_18ud15_5t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_18ud15_6t ngate_nthin_18ud_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf_18ud> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_18ud15_6t ngate_nthin_18ud_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf_18ud> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_18ud)
   wr = ((perimeter_coincide(ngate_rf_18ud,s_tndiff)+ perimeter_coincide(ngate_rf_18ud,d_tndiff))/2)/nr
   lr = (area(ngate_rf_18ud)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_18ud15_6t_layer = DEVICE LAYER nmos_rf_18ud15_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_18ud15_6t"
]
LVS ANNOTATE DEVICES nmos_rf_18ud15_6t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_18ud15_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_18ud15_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_18ud15_6t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_18ud15_nw ngate_nthin_18ud d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_18ud> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_18ud15_nw ngate_nthin_18ud d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_18ud> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_18ud)
   wr = ((perimeter_coincide(ngate_rf_18ud,s_tndiff)+ perimeter_coincide(ngate_rf_18ud,d_tndiff))/2)/nr
   lr = (area(ngate_rf_18ud)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_18ud15_nw_layer = DEVICE LAYER nmos_rf_18ud15_nw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_18ud15_nw"
]
LVS ANNOTATE DEVICES nmos_rf_18ud15_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_18ud15_nw wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_18ud15_nw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_18ud15_nw nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_25_5t ngate_nthin_25_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf_25> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_25_5t ngate_nthin_25_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf_25> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_25)
   wr = ((perimeter_coincide(ngate_rf_25,s_tndiff)+ perimeter_coincide(ngate_rf_25,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25_5t_layer = DEVICE LAYER nmos_rf_25_5t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25_5t"
]
LVS ANNOTATE DEVICES nmos_rf_25_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_25_5t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25_5t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25_5t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_25_6t ngate_nthin_25_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf_25> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_25_6t ngate_nthin_25_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf_25> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_25)
   wr = ((perimeter_coincide(ngate_rf_25,s_tndiff)+ perimeter_coincide(ngate_rf_25,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25_6t_layer = DEVICE LAYER nmos_rf_25_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25_6t"
]
LVS ANNOTATE DEVICES nmos_rf_25_6t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_25_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25_6t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_25_nw ngate_nthin_25 d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_25_nw ngate_nthin_25 d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_25)
   wr = ((perimeter_coincide(ngate_rf_25,s_tndiff)+ perimeter_coincide(ngate_rf_25,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25_nw_layer = DEVICE LAYER nmos_rf_25_nw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25_nw"
]
LVS ANNOTATE DEVICES nmos_rf_25_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_25_nw wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25_nw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25_nw nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_25od33_5t ngate_nthin_25od_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf_25od> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_25od33_5t ngate_nthin_25od_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf_25od> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_25od)
   wr = ((perimeter_coincide(ngate_rf_25od,s_tndiff)+ perimeter_coincide(ngate_rf_25od,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25od)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25od33_5t_layer = DEVICE LAYER nmos_rf_25od33_5t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25od33_5t"
]
LVS ANNOTATE DEVICES nmos_rf_25od33_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_25od33_5t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25od33_5t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25od33_5t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_25od33_6t ngate_nthin_25od_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf_25od> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_25od33_6t ngate_nthin_25od_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf_25od> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_25od)
   wr = ((perimeter_coincide(ngate_rf_25od,s_tndiff)+ perimeter_coincide(ngate_rf_25od,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25od)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25od33_6t_layer = DEVICE LAYER nmos_rf_25od33_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25od33_6t"
]
LVS ANNOTATE DEVICES nmos_rf_25od33_6t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_25od33_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25od33_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25od33_6t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_25od33_nw ngate_nthin_25od d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25od> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_25od33_nw ngate_nthin_25od d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25od> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf_25od)
   wr = ((perimeter_coincide(ngate_rf_25od,s_tndiff)+ perimeter_coincide(ngate_rf_25od,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25od)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25od33_nw_layer = DEVICE LAYER nmos_rf_25od33_nw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25od33_nw"
]
LVS ANNOTATE DEVICES nmos_rf_25od33_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_25od33_nw wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25od33_nw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25od33_nw nr nr 0

DEVICE nmos_rf_25ud18_5t ngate_nthin_25ud_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf_25ud> [
   property lr,wr,nr
   nr = count(ngate_rf_25ud)
   wr = ((perimeter_coincide(ngate_rf_25ud,s_tndiff)+ perimeter_coincide(ngate_rf_25ud,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25ud)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25ud18_5t_layer = DEVICE LAYER nmos_rf_25ud18_5t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25ud18_5t"
]
LVS ANNOTATE DEVICES nmos_rf_25ud18_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_25ud18_5t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25ud18_5t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25ud18_5t nr nr 0

DEVICE nmos_rf_25ud18_6t ngate_nthin_25ud_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf_25ud> [
   property lr,wr,nr
   nr = count(ngate_rf_25ud)
   wr = ((perimeter_coincide(ngate_rf_25ud,s_tndiff)+ perimeter_coincide(ngate_rf_25ud,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25ud)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25ud18_6t_layer = DEVICE LAYER nmos_rf_25ud18_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25ud18_6t"
]
LVS ANNOTATE DEVICES nmos_rf_25ud18_6t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_25ud18_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25ud18_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25ud18_6t nr nr 0

DEVICE nmos_rf_25ud18_nw ngate_nthin_25ud d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf_25ud> [
   property lr,wr,nr
   nr = count(ngate_rf_25ud)
   wr = ((perimeter_coincide(ngate_rf_25ud,s_tndiff)+ perimeter_coincide(ngate_rf_25ud,d_tndiff))/2)/nr
   lr = (area(ngate_rf_25ud)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_25ud18_nw_layer = DEVICE LAYER nmos_rf_25ud18_nw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_25ud18_nw"
]
LVS ANNOTATE DEVICES nmos_rf_25ud18_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_25ud18_nw wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_25ud18_nw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_25ud18_nw nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_5t ngate_nthin_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_5t ngate_nthin_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rf> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf)
   wr = ((perimeter_coincide(ngate_rf,s_tndiff)+ perimeter_coincide(ngate_rf,d_tndiff))/2)/nr
   lr = (area(ngate_rf)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_5t_layer = DEVICE LAYER nmos_rf_5t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_5t"
]
LVS ANNOTATE DEVICES nmos_rf_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_5t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_5t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_5t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_6t ngate_nthin_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_6t ngate_nthin_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rf> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf)
   wr = ((perimeter_coincide(ngate_rf,s_tndiff)+ perimeter_coincide(ngate_rf,d_tndiff))/2)/nr
   lr = (area(ngate_rf)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_6t_layer = DEVICE LAYER nmos_rf_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_6t"
]
LVS ANNOTATE DEVICES nmos_rf_6t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_6t nr nr 0

DEVICE nmos_rf_hvt_5t ngate_nthin_hv_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rfhv> [
   property lr,wr,nr
   nr = count(ngate_rfhv)
   wr = ((perimeter_coincide(ngate_rfhv,s_tndiff)+ perimeter_coincide(ngate_rfhv,d_tndiff))/2)/nr
   lr = (area(ngate_rfhv)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_hvt_5t_layer = DEVICE LAYER nmos_rf_hvt_5t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_hvt_5t"
]
LVS ANNOTATE DEVICES nmos_rf_hvt_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_hvt_5t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_hvt_5t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_hvt_5t nr nr 0

DEVICE nmos_rf_hvt_6t ngate_nthin_hv_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rfhv> [
   property lr,wr,nr
   nr = count(ngate_rfhv)
   wr = ((perimeter_coincide(ngate_rfhv,s_tndiff)+ perimeter_coincide(ngate_rfhv,d_tndiff))/2)/nr
   lr = (area(ngate_rfhv)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_hvt_6t_layer = DEVICE LAYER nmos_rf_hvt_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_hvt_6t"
]
LVS ANNOTATE DEVICES nmos_rf_hvt_6t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_hvt_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_hvt_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_hvt_6t nr nr 0

DEVICE nmos_rf_hvt_nw ngate_nthin_hv d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rfhv> [
   property lr,wr,nr
   nr = count(ngate_rfhv)
   wr = ((perimeter_coincide(ngate_rfhv,s_tndiff)+ perimeter_coincide(ngate_rfhv,d_tndiff))/2)/nr
   lr = (area(ngate_rfhv)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_hvt_nw_layer = DEVICE LAYER nmos_rf_hvt_nw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_hvt_nw"
]
LVS ANNOTATE DEVICES nmos_rf_hvt_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_hvt_nw wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_hvt_nw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_hvt_nw nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_lvt_5t ngate_nthin_lv_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rflv> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_lvt_5t ngate_nthin_lv_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rflv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rflv)
   wr = ((perimeter_coincide(ngate_rflv,s_tndiff)+ perimeter_coincide(ngate_rflv,d_tndiff))/2)/nr
   lr = (area(ngate_rflv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_lvt_5t_layer = DEVICE LAYER nmos_rf_lvt_5t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_lvt_5t"
]
LVS ANNOTATE DEVICES nmos_rf_lvt_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_lvt_5t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_lvt_5t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_lvt_5t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_lvt_6t ngate_nthin_lv_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rflv> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_lvt_6t ngate_nthin_lv_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rflv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rflv)
   wr = ((perimeter_coincide(ngate_rflv,s_tndiff)+ perimeter_coincide(ngate_rflv,d_tndiff))/2)/nr
   lr = (area(ngate_rflv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_lvt_6t_layer = DEVICE LAYER nmos_rf_lvt_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_lvt_6t"
]
LVS ANNOTATE DEVICES nmos_rf_lvt_6t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_lvt_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_lvt_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_lvt_6t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_lvt_nw ngate_nthin_lv d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rflv> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_lvt_nw ngate_nthin_lv d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rflv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rflv)
   wr = ((perimeter_coincide(ngate_rflv,s_tndiff)+ perimeter_coincide(ngate_rflv,d_tndiff))/2)/nr
   lr = (area(ngate_rflv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_lvt_nw_layer = DEVICE LAYER nmos_rf_lvt_nw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_lvt_nw"
]
LVS ANNOTATE DEVICES nmos_rf_lvt_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_lvt_nw wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_lvt_nw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_lvt_nw nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_nw ngate_nthin d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_nw ngate_nthin d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rf> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rf)
   wr = ((perimeter_coincide(ngate_rf,s_tndiff)+ perimeter_coincide(ngate_rf,d_tndiff))/2)/nr
   lr = (area(ngate_rf)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_nw_layer = DEVICE LAYER nmos_rf_nw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_nw"
]
LVS ANNOTATE DEVICES nmos_rf_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_nw wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_nw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_nw nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_ulvt_5t ngate_nthin_ulv_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rfulv> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_ulvt_5t ngate_nthin_ulv_5t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) <ngate_rfulv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rfulv)
   wr = ((perimeter_coincide(ngate_rfulv,s_tndiff)+ perimeter_coincide(ngate_rfulv,d_tndiff))/2)/nr
   lr = (area(ngate_rfulv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_ulvt_5t_layer = DEVICE LAYER nmos_rf_ulvt_5t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_ulvt_5t"
]
LVS ANNOTATE DEVICES nmos_rf_ulvt_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_ulvt_5t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_ulvt_5t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_ulvt_5t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_ulvt_6t ngate_nthin_ulv_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rfulv> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_ulvt_6t ngate_nthin_ulv_6t d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) DNW(NG) rfdmy56(PG) <ngate_rfulv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rfulv)
   wr = ((perimeter_coincide(ngate_rfulv,s_tndiff)+ perimeter_coincide(ngate_rfulv,d_tndiff))/2)/nr
   lr = (area(ngate_rfulv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_ulvt_6t_layer = DEVICE LAYER nmos_rf_ulvt_6t ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_ulvt_6t"
]
LVS ANNOTATE DEVICES nmos_rf_ulvt_6t_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_ulvt_6t wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_ulvt_6t lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_ulvt_6t nr nr 0

#IFDEF CCI_DECK
DEVICE nmos_rf_ulvt_nw ngate_nthin_ulv d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rfulv> <gcon_aux> <gcon_aux2> <nmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE nmos_rf_ulvt_nw ngate_nthin_ulv d_tndiff(D) n_poly_rf(G) s_tndiff(S) psub(B) <ngate_rfulv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(ngate_rfulv)
   wr = ((perimeter_coincide(ngate_rfulv,s_tndiff)+ perimeter_coincide(ngate_rfulv,d_tndiff))/2)/nr
   lr = (area(ngate_rfulv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( nmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( nmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( nmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( nmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
nmos_rf_ulvt_nw_layer = DEVICE LAYER nmos_rf_ulvt_nw ANNOTATE[
   PROPERTY pname
   pname = "nmos_rf_ulvt_nw"
]
LVS ANNOTATE DEVICES nmos_rf_ulvt_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY nmos_rf_ulvt_nw wr wr RFMOS_Werr 
TRACE PROPERTY nmos_rf_ulvt_nw lr lr RFMOS_Lerr
TRACE PROPERTY nmos_rf_ulvt_nw nr nr 0

DEVICE nmoscap vargt vargt(PLUS) tndiff(MINUS) <nthin> [
       property lr,wr
       nr = count(vargt)
       lr = perimeter_coincide(vargt,nthin)/nr/2
       A  = area(vargt)/nr
       wr = A/lr
]
TRACE PROPERTY nmoscap wr wr MOSCAP_Werr
TRACE PROPERTY nmoscap lr lr MOSCAP_Lerr

DEVICE nmoscap_15 vargt_15 vargt_15(PLUS) tndiff(MINUS) <nthin> [
       property lr,wr
       nr = count(vargt_15)
       lr = perimeter_coincide(vargt_15,nthin)/nr/2
       A  = area(vargt_15)/nr
       wr = A/lr
]
TRACE PROPERTY nmoscap_15 wr wr MOSCAP_Werr
TRACE PROPERTY nmoscap_15 lr lr MOSCAP_Lerr

DEVICE nmoscap_18 vargt_18 vargt_18(PLUS) tndiff(MINUS) <nthin> [
       property lr,wr
       nr = count(vargt_18)
       lr = perimeter_coincide(vargt_18,nthin)/nr/2
       A  = area(vargt_18)/nr
       wr = A/lr
]
TRACE PROPERTY nmoscap_18 wr wr MOSCAP_Werr
TRACE PROPERTY nmoscap_18 lr lr MOSCAP_Lerr

DEVICE nmoscap_25 vargt_25 vargt_25(PLUS) tndiff(MINUS) <nthin> [
       property lr,wr
       nr = count(vargt_25)
       lr = perimeter_coincide(vargt_25,nthin)/nr/2
       A  = area(vargt_25)/nr
       wr = A/lr
]
TRACE PROPERTY nmoscap_25 wr wr MOSCAP_Werr
TRACE PROPERTY nmoscap_25 lr lr MOSCAP_Lerr

DEVICE nmoscap_33 vargt_33 vargt_33(PLUS) tndiff(MINUS) <nthin> [
       property lr,wr
       nr = count(vargt_33)
       lr = perimeter_coincide(vargt_33,nthin)/nr/2
       A  = area(vargt_33)/nr
       wr = A/lr
]
TRACE PROPERTY nmoscap_33 wr wr MOSCAP_Werr
TRACE PROPERTY nmoscap_33 lr lr MOSCAP_Lerr

DEVICE nmoscap_edc vargt_edc vargt_edc(PLUS) tndiff(MINUS) <nthin> netlist model nmoscap_edc [
       property lr,wr
       nr = count(vargt_edc)
       lr = perimeter_coincide(vargt_edc,nthin)/nr/2
       A  = area(vargt_edc)/nr
       wr = A/lr
]
TRACE PROPERTY nmoscap_edc wr wr MOSCAP_Werr
TRACE PROPERTY nmoscap_edc lr lr MOSCAP_Lerr

DEVICE pcmoscap_rf cvar_pw_rf p_poly3(GATE) tpdiff(BULK) DNW(GNODE) <pvargt_rf> <pthin2> [
  property lr,wr,br,gr
  gr = count(pthin2)
  br = count(pvargt_rf)/gr
  wr = (perimeter_coincide(pvargt_rf,tpdiff)/2)/(br*gr)
  lr = (area(pvargt_rf)/wr)/(br*gr)
]
TRACE PROPERTY pcmoscap_rf lr lr MOSCAP_Lerr
TRACE PROPERTY pcmoscap_rf wr wr MOSCAP_Werr
TRACE PROPERTY pcmoscap_rf br br 0
TRACE PROPERTY pcmoscap_rf gr gr 0

DEVICE pcmoscap_rf18 cvar_pw_rf18 p_poly3(GATE) tpdiff(BULK) DNW(GNODE) <pvargt_rf18> <pthin2> [
  property lr,wr,br,gr
  gr = count(pthin2)
  br = count(pvargt_rf18)/gr
  wr = (perimeter_coincide(pvargt_rf18,tpdiff)/2)/(br*gr)
  lr = (area(pvargt_rf18)/wr)/(br*gr)
]
TRACE PROPERTY pcmoscap_rf18 lr lr MOSCAP_Lerr
TRACE PROPERTY pcmoscap_rf18 wr wr MOSCAP_Werr
TRACE PROPERTY pcmoscap_rf18 br br 0
TRACE PROPERTY pcmoscap_rf18 gr gr 0

DEVICE pcmoscap_rf25 cvar_pw_rf25 p_poly3(GATE) tpdiff(BULK) DNW(GNODE) <pvargt_rf25> <pthin2> [
  property lr,wr,br,gr
  gr = count(pthin2)
  br = count(pvargt_rf25)/gr
  wr = (perimeter_coincide(pvargt_rf25,tpdiff)/2)/(br*gr)
  lr = (area(pvargt_rf25)/wr)/(br*gr)
]
TRACE PROPERTY pcmoscap_rf25 lr lr MOSCAP_Lerr
TRACE PROPERTY pcmoscap_rf25 wr wr MOSCAP_Werr
TRACE PROPERTY pcmoscap_rf25 br br 0
TRACE PROPERTY pcmoscap_rf25 gr gr 0

#IFDEF LVS_DECK
DEVICE pdio_gated_mac pdiff_gdio2 tpdiff(PLUS) nxwell(MINUS) <pgate_gdio18_2t> <npdiff_gdio> [
  property wg,dw,nr
#ELSE
DEVICE pdio_gated_mac pdiff_gdio2 tpdiff_woR(PLUS) nxwell(MINUS) <pgate_gdio18_2t> <npdiff_gdio> [
  property wg,dw,nr
#ENDIF   
  nr = count(pgate_gdio18_2t)
  wg = perimeter_coincide(npdiff_gdio,pgate_gdio18_2t)/nr/2
  dw = area(npdiff_gdio)/wg/(nr+1)
]  
TRACE PROPERTY pdio_gated_mac wg wg 0
TRACE PROPERTY pdio_gated_mac dw dw 0
TRACE PROPERTY pdio_gated_mac nr nr 0

SCONNECT psub nw_pgdio ABUT ALSO
#IFDEF LVS_DECK
DEVICE pdio_gated_mac_3t pdiff_gdio3 tpdiff(PLUS) nxwell(MINUS) nw_pgdio(BULK) <pgate_gdio18_3t> <npdiff_gdio> [
  property wg,dw,nr

#ELSE
DEVICE pdio_gated_mac_3t pdiff_gdio3 tpdiff_woR(PLUS) nxwell(MINUS) nw_pgdio(BULK) <pgate_gdio18_3t> <npdiff_gdio> [
  property wg,dw,nr

#ENDIF   
  nr = count(pgate_gdio18_3t)
  wg = perimeter_coincide(npdiff_gdio,pgate_gdio18_3t)/nr/2
  dw = area(npdiff_gdio)/wg/(nr+1)
]  
TRACE PROPERTY pdio_gated_mac_3t wg wg 0
TRACE PROPERTY pdio_gated_mac_3t dw dw 0
TRACE PROPERTY pdio_gated_mac_3t nr nr 0

#IFDEF LVS_DECK
DEVICE pdio_hia_mac hia_pdio_r tpdiff(PLUS) nxwell(MINUS) <hia_pdio> [
#ELSE
DEVICE pdio_hia_mac hia_pdio_r tpdiff_woR(PLUS) nxwell(MINUS) <hia_pdio> [
#ENDIF   
  property l,w,nf
  nf = count(hia_pdio)
  A_DIO = area(hia_pdio)/nf
  P_DIO = perimeter(hia_pdio)/nf
  P_2_DIO = P_DIO * P_DIO
  AD4 = A_DIO * 16
  KKK = P_2_DIO-AD4
  IF(KKK<0) {
  KKK=0
  }
  SQ = sqrt(KKK)
  l = (P_DIO+SQ)/4
  w = (P_DIO-SQ)/4
]
TRACE PROPERTY pdio_hia_mac w  w  DIO_Werr
TRACE PROPERTY pdio_hia_mac l  l  DIO_Lerr
TRACE PROPERTY pdio_hia_mac nf nf 0 

DEVICE pdio_hia_rf hia_pdio_rf_r tpdiff(ANODE) nxwell(CATHODE) RFDMY_HIA_bulk(GNODE) <hia_pdio_rf> [
  property al,aw,fn
  fn = count(hia_pdio_rf)  
  A_DIO = area(hia_pdio_rf)/fn
  P_DIO = perimeter(hia_pdio_rf)/fn
  P_2_DIO = P_DIO * P_DIO
  AD4 = A_DIO * 16
  KKK = P_2_DIO-AD4
  IF(KKK<0) {
  KKK=0
  }
  SQ = sqrt(KKK)
  al = (P_DIO+SQ)/4
  aw = (P_DIO-SQ)/4
]    

TRACE PROPERTY pdio_hia_rf aw aw 0
TRACE PROPERTY pdio_hia_rf al al 0
TRACE PROPERTY pdio_hia_rf fn fn 0

#IFDEF CCI_DECK
DEVICE pmos_rf_18_5t pgate_pthin_18_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_18> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_18_5t pgate_pthin_18_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_18> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_18)
   wr = ((perimeter_coincide(pgate_rf_18,s_tpdiff)+ perimeter_coincide(pgate_rf_18,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_18)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_18_5t_layer = DEVICE LAYER pmos_rf_18_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_18_5t"
]
LVS ANNOTATE DEVICES pmos_rf_18_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_18_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_18_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_18_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_18_nw pgate_pthin_18nw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_18> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_18_nw pgate_pthin_18nw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_18> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_18)
   wr = ((perimeter_coincide(pgate_rf_18,s_tpdiff)+ perimeter_coincide(pgate_rf_18,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_18)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_18_nw_layer = DEVICE LAYER pmos_rf_18_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_18_nw"
]
LVS ANNOTATE DEVICES pmos_rf_18_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_18_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_18_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_18_nw nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_18_nw_5t pgate_pthin_18nw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_18> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_18_nw_5t pgate_pthin_18nw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_18> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_18)
   wr = ((perimeter_coincide(pgate_rf_18,s_tpdiff)+ perimeter_coincide(pgate_rf_18,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_18)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_18_nw_5t_layer = DEVICE LAYER pmos_rf_18_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_18_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_18_nw_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_18_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_18_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_18_nw_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_18ud15_5t pgate_pthin_18ud_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_18ud> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_18ud15_5t pgate_pthin_18ud_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_18ud> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_18ud)
   wr = ((perimeter_coincide(pgate_rf_18ud,s_tpdiff)+ perimeter_coincide(pgate_rf_18ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_18ud)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_18ud15_5t_layer = DEVICE LAYER pmos_rf_18ud15_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_18ud15_5t"
]
LVS ANNOTATE DEVICES pmos_rf_18ud15_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_18ud15_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_18ud15_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_18ud15_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_18ud15_nw pgate_pthin_18udnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_18ud> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_18ud15_nw pgate_pthin_18udnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_18ud> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_18ud)
   wr = ((perimeter_coincide(pgate_rf_18ud,s_tpdiff)+ perimeter_coincide(pgate_rf_18ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_18ud)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_18ud15_nw_layer = DEVICE LAYER pmos_rf_18ud15_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_18ud15_nw"
]
LVS ANNOTATE DEVICES pmos_rf_18ud15_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_18ud15_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_18ud15_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_18ud15_nw nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_18ud15_nw_5t pgate_pthin_18udnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_18ud> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_18ud15_nw_5t pgate_pthin_18udnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_18ud> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_18ud)
   wr = ((perimeter_coincide(pgate_rf_18ud,s_tpdiff)+ perimeter_coincide(pgate_rf_18ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_18ud)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_18ud15_nw_5t_layer = DEVICE LAYER pmos_rf_18ud15_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_18ud15_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_18ud15_nw_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_18ud15_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_18ud15_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_18ud15_nw_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_25_5t pgate_pthin_25_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_25_5t pgate_pthin_25_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_25)
   wr = ((perimeter_coincide(pgate_rf_25,s_tpdiff)+ perimeter_coincide(pgate_rf_25,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25_5t_layer = DEVICE LAYER pmos_rf_25_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_25_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_25_nw pgate_pthin_25nw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_25_nw pgate_pthin_25nw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_25)
   wr = ((perimeter_coincide(pgate_rf_25,s_tpdiff)+ perimeter_coincide(pgate_rf_25,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25_nw_layer = DEVICE LAYER pmos_rf_25_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25_nw"
]
LVS ANNOTATE DEVICES pmos_rf_25_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_25_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25_nw nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_25_nw_5t pgate_pthin_25nw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_25_nw_5t pgate_pthin_25nw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_25)
   wr = ((perimeter_coincide(pgate_rf_25,s_tpdiff)+ perimeter_coincide(pgate_rf_25,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25_nw_5t_layer = DEVICE LAYER pmos_rf_25_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25_nw_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_25_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25_nw_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_25od33_5t pgate_pthin_25od_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25od> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_25od33_5t pgate_pthin_25od_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25od> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_25od)
   wr = ((perimeter_coincide(pgate_rf_25od,s_tpdiff)+ perimeter_coincide(pgate_rf_25od,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25od)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25od33_5t_layer = DEVICE LAYER pmos_rf_25od33_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25od33_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25od33_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_25od33_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25od33_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25od33_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_25od33_nw pgate_pthin_25odnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25od> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_25od33_nw pgate_pthin_25odnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25od> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_25od)
   wr = ((perimeter_coincide(pgate_rf_25od,s_tpdiff)+ perimeter_coincide(pgate_rf_25od,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25od)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25od33_nw_layer = DEVICE LAYER pmos_rf_25od33_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25od33_nw"
]
LVS ANNOTATE DEVICES pmos_rf_25od33_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_25od33_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25od33_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25od33_nw nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_25od33_nw_5t pgate_pthin_25odnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25od> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_25od33_nw_5t pgate_pthin_25odnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25od> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf_25od)
   wr = ((perimeter_coincide(pgate_rf_25od,s_tpdiff)+ perimeter_coincide(pgate_rf_25od,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25od)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25od33_nw_5t_layer = DEVICE LAYER pmos_rf_25od33_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25od33_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25od33_nw_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_25od33_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25od33_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25od33_nw_5t nr nr 0

DEVICE pmos_rf_25ud18_5t pgate_pthin_25ud_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25ud> [
   property lr,wr,nr
   nr = count(pgate_rf_25ud)
   wr = ((perimeter_coincide(pgate_rf_25ud,s_tpdiff)+ perimeter_coincide(pgate_rf_25ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25ud)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25ud18_5t_layer = DEVICE LAYER pmos_rf_25ud18_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25ud18_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25ud18_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_25ud18_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25ud18_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25ud18_5t nr nr 0

DEVICE pmos_rf_25ud18_nw pgate_pthin_25udnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf_25ud> [
   property lr,wr,nr
   nr = count(pgate_rf_25ud)
   wr = ((perimeter_coincide(pgate_rf_25ud,s_tpdiff)+ perimeter_coincide(pgate_rf_25ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25ud)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25ud18_nw_layer = DEVICE LAYER pmos_rf_25ud18_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25ud18_nw"
]
LVS ANNOTATE DEVICES pmos_rf_25ud18_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_25ud18_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25ud18_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25ud18_nw nr nr 0

DEVICE pmos_rf_25ud18_nw_5t pgate_pthin_25udnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf_25ud> [
   property lr,wr,nr
   nr = count(pgate_rf_25ud)
   wr = ((perimeter_coincide(pgate_rf_25ud,s_tpdiff)+ perimeter_coincide(pgate_rf_25ud,d_tpdiff))/2)/nr
   lr = (area(pgate_rf_25ud)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_25ud18_nw_5t_layer = DEVICE LAYER pmos_rf_25ud18_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_25ud18_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_25ud18_nw_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_25ud18_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_25ud18_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_25ud18_nw_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_5t pgate_pthin_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_5t pgate_pthin_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf)
   wr = ((perimeter_coincide(pgate_rf,s_tpdiff)+ perimeter_coincide(pgate_rf,d_tpdiff))/2)/nr
   lr = (area(pgate_rf)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_5t_layer = DEVICE LAYER pmos_rf_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_5t"
]
LVS ANNOTATE DEVICES pmos_rf_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_5t nr nr 0

DEVICE pmos_rf_hvt_5t pgate_pthin_hv_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfhv> [
   property lr,wr,nr
   nr = count(pgate_rfhv)
   wr = ((perimeter_coincide(pgate_rfhv,s_tpdiff)+ perimeter_coincide(pgate_rfhv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfhv)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_hvt_5t_layer = DEVICE LAYER pmos_rf_hvt_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_hvt_5t"
]
LVS ANNOTATE DEVICES pmos_rf_hvt_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_hvt_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_hvt_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_hvt_5t nr nr 0

DEVICE pmos_rf_hvt_nw pgate_pthin_hvnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rfhv> [
   property lr,wr,nr
   nr = count(pgate_rfhv)
   wr = ((perimeter_coincide(pgate_rfhv,s_tpdiff)+ perimeter_coincide(pgate_rfhv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfhv)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_hvt_nw_layer = DEVICE LAYER pmos_rf_hvt_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_hvt_nw"
]
LVS ANNOTATE DEVICES pmos_rf_hvt_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_hvt_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_hvt_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_hvt_nw nr nr 0

DEVICE pmos_rf_hvt_nw_5t pgate_pthin_hvnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfhv> [
   property lr,wr,nr
   nr = count(pgate_rfhv)
   wr = ((perimeter_coincide(pgate_rfhv,s_tpdiff)+ perimeter_coincide(pgate_rfhv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfhv)/wr)/nr
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_hvt_nw_5t_layer = DEVICE LAYER pmos_rf_hvt_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_hvt_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_hvt_nw_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_hvt_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_hvt_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_hvt_nw_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_lvt_5t pgate_pthin_lv_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rflv> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_lvt_5t pgate_pthin_lv_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rflv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rflv)
   wr = ((perimeter_coincide(pgate_rflv,s_tpdiff)+ perimeter_coincide(pgate_rflv,d_tpdiff))/2)/nr
   lr = (area(pgate_rflv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_lvt_5t_layer = DEVICE LAYER pmos_rf_lvt_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_lvt_5t"
]
LVS ANNOTATE DEVICES pmos_rf_lvt_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_lvt_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_lvt_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_lvt_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_lvt_nw pgate_pthin_lvnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rflv> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_lvt_nw pgate_pthin_lvnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rflv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rflv)
   wr = ((perimeter_coincide(pgate_rflv,s_tpdiff)+ perimeter_coincide(pgate_rflv,d_tpdiff))/2)/nr
   lr = (area(pgate_rflv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_lvt_nw_layer = DEVICE LAYER pmos_rf_lvt_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_lvt_nw"
]
LVS ANNOTATE DEVICES pmos_rf_lvt_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_lvt_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_lvt_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_lvt_nw nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_lvt_nw_5t pgate_pthin_lvnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rflv> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_lvt_nw_5t pgate_pthin_lvnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rflv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rflv)
   wr = ((perimeter_coincide(pgate_rflv,s_tpdiff)+ perimeter_coincide(pgate_rflv,d_tpdiff))/2)/nr
   lr = (area(pgate_rflv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_lvt_nw_5t_layer = DEVICE LAYER pmos_rf_lvt_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_lvt_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_lvt_nw_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_lvt_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_lvt_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_lvt_nw_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_nw pgate_pthin_nw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_nw pgate_pthin_nw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rf> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf)
   wr = ((perimeter_coincide(pgate_rf,s_tpdiff)+ perimeter_coincide(pgate_rf,d_tpdiff))/2)/nr
   lr = (area(pgate_rf)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_nw_layer = DEVICE LAYER pmos_rf_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_nw"
]
LVS ANNOTATE DEVICES pmos_rf_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_nw nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_nw_5t pgate_pthin_nw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_nw_5t pgate_pthin_nw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rf> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rf)
   wr = ((perimeter_coincide(pgate_rf,s_tpdiff)+ perimeter_coincide(pgate_rf,d_tpdiff))/2)/nr
   lr = (area(pgate_rf)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_nw_5t_layer = DEVICE LAYER pmos_rf_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_nw_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_nw_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_ulvt_5t pgate_pthin_ulv_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfulv> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_ulvt_5t pgate_pthin_ulv_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfulv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rfulv)
   wr = ((perimeter_coincide(pgate_rfulv,s_tpdiff)+ perimeter_coincide(pgate_rfulv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfulv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_ulvt_5t_layer = DEVICE LAYER pmos_rf_ulvt_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_ulvt_5t"
]
LVS ANNOTATE DEVICES pmos_rf_ulvt_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_ulvt_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_ulvt_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_ulvt_5t nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_ulvt_nw pgate_pthin_ulvnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rfulv> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_ulvt_nw pgate_pthin_ulvnw d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) <pgate_rfulv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rfulv)
   wr = ((perimeter_coincide(pgate_rfulv,s_tpdiff)+ perimeter_coincide(pgate_rfulv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfulv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_ulvt_nw_layer = DEVICE LAYER pmos_rf_ulvt_nw ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_ulvt_nw"
]
LVS ANNOTATE DEVICES pmos_rf_ulvt_nw_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_ulvt_nw wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_ulvt_nw lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_ulvt_nw nr nr 0

#IFDEF CCI_DECK
DEVICE pmos_rf_ulvt_nw_5t pgate_pthin_ulvnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfulv> <gcon_aux> <gcon_aux2> <pmos_SOB> <dinsaflag_aux> [
#ELSE
DEVICE pmos_rf_ulvt_nw_5t pgate_pthin_ulvnw_5t d_tpdiff(D) p_poly_rf(G) s_tpdiff(S) nxwell(B) rfdmy56(PG) <pgate_rfulv> [
#ENDIF
   property lr,wr,nr
   #IFDEF CCI_DECK
   ,ngcon,sobn,sobs,sobw,sobe,dinsaflag
   #ENDIF
   nr = count(pgate_rfulv)
   wr = ((perimeter_coincide(pgate_rfulv,s_tpdiff)+ perimeter_coincide(pgate_rfulv,d_tpdiff))/2)/nr
   lr = (area(pgate_rfulv)/wr)/nr
   #IFDEF CCI_DECK
   IF(count(gcon_aux2)/count(gcon_aux) == nr){ ngcon = count(gcon_aux) }ELSE{ ngcon = 99 }

   RFX_1 = DFM_VEC_VAL( pmos_SOB, "PER_1" )
   RFX_2 = DFM_VEC_VAL( pmos_SOB, "PER_2" )
   RFY_1 = DFM_VEC_VAL( pmos_SOB, "PAR_1" )
   RFY_2 = DFM_VEC_VAL( pmos_SOB, "PAR_2" )

   sobn = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_1, UNIT_LENGTH())
   sobs = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFX_2, UNIT_LENGTH())
   sobw = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_1, UNIT_LENGTH())
   sobe = TVF_NUM_FUN ("cal_sobv_dfm", "device_function", RFY_2, UNIT_LENGTH())

   len_dinsaflag_aux = perimeter(dinsaflag_aux)/2 - MINGRID_RECT1_UNIT
   dinsaflag = 0
   if(len_dinsaflag_aux > MINGRID_RECT1_01_UNIT) {
      dinsaflag = 1
   }
   #ENDIF
]
#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
pmos_rf_ulvt_nw_5t_layer = DEVICE LAYER pmos_rf_ulvt_nw_5t ANNOTATE[
   PROPERTY pname
   pname = "pmos_rf_ulvt_nw_5t"
]
LVS ANNOTATE DEVICES pmos_rf_ulvt_nw_5t_layer
#ENDIF
#ENDIF
TRACE PROPERTY pmos_rf_ulvt_nw_5t wr wr RFMOS_Werr 
TRACE PROPERTY pmos_rf_ulvt_nw_5t lr lr RFMOS_Lerr
TRACE PROPERTY pmos_rf_ulvt_nw_5t nr nr 0

DEVICE pmoscap vargt_p vargt_p(PLUS) tpdiff(MINUS) <pthin> [
       property lr,wr
       nr = count(vargt_p)
       lr = perimeter_coincide(vargt_p,pthin)/nr/2
       A  = area(vargt_p)/nr
       wr = A/lr
]
TRACE PROPERTY pmoscap wr wr MOSCAP_Werr
TRACE PROPERTY pmoscap lr lr MOSCAP_Lerr

DEVICE pmoscap_18 vargt_18_p vargt_18_p(PLUS) tpdiff(MINUS) <pthin> [
       property lr,wr
       nr = count(vargt_18_p)
       lr = perimeter_coincide(vargt_18_p,pthin)/nr/2
       A  = area(vargt_18_p)/nr
       wr = A/lr
]
TRACE PROPERTY pmoscap_18 wr wr MOSCAP_Werr
TRACE PROPERTY pmoscap_18 lr lr MOSCAP_Lerr

DEVICE pmoscap_25 vargt_25_p vargt_25_p(PLUS) tpdiff(MINUS) <pthin> [
       property lr,wr
       nr = count(vargt_25_p)
       lr = perimeter_coincide(vargt_25_p,pthin)/nr/2
       A  = area(vargt_25_p)/nr
       wr = A/lr
]
TRACE PROPERTY pmoscap_25 wr wr MOSCAP_Werr
TRACE PROPERTY pmoscap_25 lr lr MOSCAP_Lerr

DEVICE pmoscap_rf var_pw_rf p_poly3(GATE) tpdiff(BULK) DNW(GNODE) <pvargt_rf> <pthin2> [
  property lr,wr,br,gr
  gr = count(pthin2)
  br = count(pvargt_rf)/gr
  wr = (perimeter_coincide(pvargt_rf,tpdiff)/2)/(br*gr)
  lr = (area(pvargt_rf)/wr)/(br*gr)
]
TRACE PROPERTY pmoscap_rf lr lr MOSCAP_Lerr
TRACE PROPERTY pmoscap_rf wr wr MOSCAP_Werr
TRACE PROPERTY pmoscap_rf br br 0
TRACE PROPERTY pmoscap_rf gr gr 0

DEVICE pmoscap_rf18 var_pw_rf18 p_poly3(GATE) tpdiff(BULK) DNW(GNODE) <pvargt_rf18> <pthin2> [
  property lr,wr,br,gr
  gr = count(pthin2)
  br = count(pvargt_rf18)/gr
  wr = (perimeter_coincide(pvargt_rf18,tpdiff)/2)/(br*gr)
  lr = (area(pvargt_rf18)/wr)/(br*gr)
]
TRACE PROPERTY pmoscap_rf18 lr lr MOSCAP_Lerr
TRACE PROPERTY pmoscap_rf18 wr wr MOSCAP_Werr
TRACE PROPERTY pmoscap_rf18 br br 0
TRACE PROPERTY pmoscap_rf18 gr gr 0

#IFDEF extract_pnwdio
DEVICE D(pnwdio) pnwdio_r psub nxwell netlist model nwdio
#ENDIF
LVS FILTER D(pnwdio) LAYOUT OPEN

DEVICE probe1 PROBEM1 M1(TOP) PROBEM1_T(BULK) [
property a,pj
   a  = area(PROBEM1)
   pj = perimeter(PROBEM1) 
]
TRACE PROPERTY probe1 a a PROBE_Aerr
TRACE PROPERTY probe1 pj pj PROBE_Perr

DEVICE probe2 PROBEM2 M2(TOP) PROBEM2_T(BULK) [
property a,pj
   a  = area(PROBEM2)
   pj = perimeter(PROBEM2) 
]
TRACE PROPERTY probe2 a a PROBE_Aerr
TRACE PROPERTY probe2 pj pj PROBE_Perr

DEVICE probe3 PROBEM3 M3(TOP) PROBEM3_T(BULK) [
property a,pj
   a  = area(PROBEM3)
   pj = perimeter(PROBEM3) 
]
TRACE PROPERTY probe3 a a PROBE_Aerr
TRACE PROPERTY probe3 pj pj PROBE_Perr

DEVICE probe4 PROBEM4 M4(TOP) PROBEM4_T(BULK) [
property a,pj
   a  = area(PROBEM4)
   pj = perimeter(PROBEM4) 
]
TRACE PROPERTY probe4 a a PROBE_Aerr
TRACE PROPERTY probe4 pj pj PROBE_Perr

DEVICE probe5 PROBEM5 M5(TOP) PROBEM5_T(BULK) [
property a,pj
   a  = area(PROBEM5)
   pj = perimeter(PROBEM5) 
]
TRACE PROPERTY probe5 a a PROBE_Aerr
TRACE PROPERTY probe5 pj pj PROBE_Perr

DEVICE probe6 PROBEM6 M6(TOP) PROBEM6_T(BULK) [
property a,pj
   a  = area(PROBEM6)
   pj = perimeter(PROBEM6) 
]
TRACE PROPERTY probe6 a a PROBE_Aerr
TRACE PROPERTY probe6 pj pj PROBE_Perr

DEVICE probe7 PROBEM7 M7(TOP) PROBEM7_T(BULK) [
property a,pj
   a  = area(PROBEM7)
   pj = perimeter(PROBEM7) 
]
TRACE PROPERTY probe7 a a PROBE_Aerr
TRACE PROPERTY probe7 pj pj PROBE_Perr

//

DEVICE rm1w mt1res M1(PLUS) M1(MINUS) netlist model rm1w (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt1res,M1)/2
	l = area(mt1res)/w
]
	TRACE PROPERTY rm1w w  w  RES_Werr
	TRACE PROPERTY rm1w l  l  RES_Lerr

DEVICE rm2w mt2res M2(PLUS) M2(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt2res,M2)/2
	l = area(mt2res)/w
]
TRACE PROPERTY rm2w w  w  RES_Werr
TRACE PROPERTY rm2w l  l  RES_Lerr

DEVICE rm3w mt3res M3(PLUS) M3(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt3res,M3)/2
	l = area(mt3res)/w
]
TRACE PROPERTY rm3w w  w  RES_Werr
TRACE PROPERTY rm3w l  l  RES_Lerr

DEVICE rm4w mt4res M4(PLUS) M4(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt4res,M4)/2
	l = area(mt4res)/w
]
TRACE PROPERTY rm4w w  w  RES_Werr
TRACE PROPERTY rm4w l  l  RES_Lerr

DEVICE rm5w mt5res M5(PLUS) M5(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt5res,M5)/2
	l = area(mt5res)/w
]
TRACE PROPERTY rm5w w  w  RES_Werr
TRACE PROPERTY rm5w l  l  RES_Lerr

DEVICE rm6w mt6res M6(PLUS) M6(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt6res,M6)/2
	l = area(mt6res)/w
]
TRACE PROPERTY rm6w w  w  RES_Werr
TRACE PROPERTY rm6w l  l  RES_Lerr

DEVICE rm7w mt7res M7(PLUS) M7(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt7res,M7)/2
	l = area(mt7res)/w
]
TRACE PROPERTY rm7w w  w  RES_Werr
TRACE PROPERTY rm7w l  l  RES_Lerr

DEVICE rm8w mt8res M8(PLUS) M8(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt8res,M8)/2
	l = area(mt8res)/w
]
TRACE PROPERTY rm8w w  w  RES_Werr
TRACE PROPERTY rm8w l  l  RES_Lerr

DEVICE rm9w mt9res M9(PLUS) M9(MINUS) netlist model rmzw (PLUS MINUS) [

	property w,l
	w = perimeter_coincide(mt9res,M9)/2
	l = area(mt9res)/w
]
	TRACE PROPERTY rm9w w  w  RES_Werr
	TRACE PROPERTY rm9w l  l  RES_Lerr

DEVICE rmap mtAPres AP(PLUS) AP(MINUS) netlist model rmap (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mtAPres,AP)/2
	l = area(mtAPres)/w
]
TRACE PROPERTY rmap w  w  RES_Werr
TRACE PROPERTY rmap l  l  RES_Lerr

DEVICE rnmg rnmg_r n_poly(PLUS) n_poly(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(rnmg_r,n_poly)/2
  l = area(rnmg_r)/w
]
TRACE PROPERTY rnmg w w RES_Werr
TRACE PROPERTY rnmg l l RES_Lerr

DEVICE rnmg_m rnmg_dp n_poly(PLUS) n_poly(MINUS) psub(BULK) (PLUS MINUS) [
property lr,wr
  wr = perimeter_coincide(rnmg_dp,n_poly)/2
  lr = area(rnmg_dp)/wr
]
DEVICE rnmg_m rnmg_dn n_poly(PLUS) n_poly(MINUS) nxwell(BULK) (PLUS MINUS) [
property lr,wr
  wr = perimeter_coincide(rnmg_dn,n_poly)/2
  lr = area(rnmg_dn)/wr
]
TRACE PROPERTY rnmg_m wr wr RES_Werr
TRACE PROPERTY rnmg_m lr lr RES_Lerr

DEVICE rnodl rnodl_r tndiff(PLUS) tndiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rnodl_r,tndiff)/2
	l = area(rnodl_r)/w
]
	TRACE PROPERTY rnodl w  w  RES_Werr
	TRACE PROPERTY rnodl l  l  RES_Lerr

DEVICE rnodl_m rnodl_mr tndiff(PLUS) tndiff(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rnodl_mr,tndiff)/2
   lr = area(rnodl_mr)/wr
]
TRACE PROPERTY rnodl_m wr wr RES_Werr
TRACE PROPERTY rnodl_m lr lr RES_Lerr

DEVICE rnods rnods_r tndiff(PLUS) tndiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rnods_r,tndiff)/2
	l = area(rnods_r)/w
]
	TRACE PROPERTY rnods w  w  RES_Werr
	TRACE PROPERTY rnods l  l  RES_Lerr

DEVICE rnods_m rnods_mr tndiff(PLUS) tndiff(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rnods_mr,tndiff)/2
   lr = area(rnods_mr)/wr
]
TRACE PROPERTY rnods_m wr wr RES_Werr
TRACE PROPERTY rnods_m lr lr RES_Lerr

DEVICE rnodwo rnodwo_r tndiff(PLUS) tndiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rnodwo_r,tndiff)/2
	l = area(rnodwo_r)/w
]
	TRACE PROPERTY rnodwo w  w  RES_Werr
	TRACE PROPERTY rnodwo l  l  RES_Lerr

DEVICE rnodwo_m rnodwo_mr tndiff(PLUS) tndiff(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rnodwo_mr,tndiff)/2
   lr = area(rnodwo_mr)/wr
]
TRACE PROPERTY rnodwo_m wr wr RES_Werr
TRACE PROPERTY rnodwo_m lr lr RES_Lerr

DEVICE rnwod nwod_r nxwell(PLUS) nxwell(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(nwod_r,nxwell)/2
	l = area(nwod_r)/w
]
	TRACE PROPERTY rnwod w w RES_Werr
	TRACE PROPERTY rnwod l l RES_Lerr

DEVICE rnwod_m nwod_mr nxwell(PLUS) nxwell(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(nwod_mr,nxwell)/2
   lr = area(nwod_mr)/wr
]
TRACE PROPERTY rnwod_m wr wr RES_Werr
TRACE PROPERTY rnwod_m lr lr RES_Lerr

DEVICE rnwsti nwsti_r nxwell(PLUS) nxwell(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(nwsti_r,nxwell)/2
	l = area(nwsti_r)/w
]
	TRACE PROPERTY rnwsti w w RES_Werr
	TRACE PROPERTY rnwsti l l RES_Lerr

DEVICE rnwsti_m nwsti_mr nxwell(PLUS) nxwell(MINUS) psub(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(nwsti_mr,nxwell)/2
   lr = area(nwsti_mr)/wr
]
TRACE PROPERTY rnwsti_m wr wr RES_Werr
TRACE PROPERTY rnwsti_m lr lr RES_Lerr

DEVICE rpmg rpmg_r p_poly(PLUS) p_poly(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(rpmg_r,p_poly)/2
  l = area(rpmg_r)/w
]
TRACE PROPERTY rpmg w w RES_Werr
TRACE PROPERTY rpmg l l RES_Lerr

DEVICE rpmg_m rpmg_dp p_poly(PLUS) p_poly(MINUS) psub(BULK) (PLUS MINUS) [
property lr,wr
  wr = perimeter_coincide(rpmg_dp,p_poly)/2
  lr = area(rpmg_dp)/wr
]
DEVICE rpmg_m rpmg_dn p_poly(PLUS) p_poly(MINUS) nxwell(BULK) (PLUS MINUS) [
property lr,wr
  wr = perimeter_coincide(rpmg_dn,p_poly)/2
  lr = area(rpmg_dn)/wr
]
TRACE PROPERTY rpmg_m wr wr RES_Werr
TRACE PROPERTY rpmg_m lr lr RES_Lerr

DEVICE rpodl rpodl_r tpdiff(PLUS) tpdiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rpodl_r,tpdiff)/2
	l = area(rpodl_r)/w
]
	TRACE PROPERTY rpodl w  w  RES_Werr
	TRACE PROPERTY rpodl l  l  RES_Lerr

DEVICE rpodl_m rpodl_mr tpdiff(PLUS) tpdiff(MINUS) nxwell(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rpodl_mr,tpdiff)/2
   lr = area(rpodl_mr)/wr
]
TRACE PROPERTY rpodl_m wr wr RES_Werr
TRACE PROPERTY rpodl_m lr lr RES_Lerr

DEVICE rpods rpods_r tpdiff(PLUS) tpdiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rpods_r,tpdiff)/2
	l = area(rpods_r)/w
]
	TRACE PROPERTY rpods w  w  RES_Werr
	TRACE PROPERTY rpods l  l  RES_Lerr

DEVICE rpods_m rpods_mr tpdiff(PLUS) tpdiff(MINUS) nxwell(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rpods_mr,tpdiff)/2
   lr = area(rpods_mr)/wr
]
TRACE PROPERTY rpods_m wr wr RES_Werr
TRACE PROPERTY rpods_m lr lr RES_Lerr

DEVICE rpodwo rpodwo_r tpdiff(PLUS) tpdiff(MINUS) (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(rpodwo_r,tpdiff)/2
	l = area(rpodwo_r)/w
]
	TRACE PROPERTY rpodwo w  w  RES_Werr
	TRACE PROPERTY rpodwo l  l  RES_Lerr

DEVICE rpodwo_m rpodwo_mr tpdiff(PLUS) tpdiff(MINUS) nxwell(BULK) (PLUS MINUS) [
   property wr,lr
   wr = perimeter_coincide(rpodwo_mr,tpdiff)/2
   lr = area(rpodwo_mr)/wr
]
TRACE PROPERTY rpodwo_m wr wr RES_Werr
TRACE PROPERTY rpodwo_m lr lr RES_Lerr

DEVICE rupolym rupolym_r p_poly(PLUS) p_poly(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(rupolym_r,p_poly)/2
  l = area(rupolym_r)/w
]
TRACE PROPERTY rupolym w w RES_Werr
TRACE PROPERTY rupolym l l RES_Lerr

DEVICE rupolym_m rupolym_dp p_poly(PLUS) p_poly(MINUS) psub(BULK) (PLUS MINUS) [
property lr,wr
  wr = perimeter_coincide(rupolym_dp,p_poly)/2
  lr = area(rupolym_dp)/wr
]
DEVICE rupolym_m rupolym_dn p_poly(PLUS) p_poly(MINUS) nxwell(BULK) (PLUS MINUS) [
property lr,wr
  wr = perimeter_coincide(rupolym_dn,p_poly)/2
  lr = area(rupolym_dn)/wr
]
TRACE PROPERTY rupolym_m wr wr RES_Werr
TRACE PROPERTY rupolym_m lr lr RES_Lerr

DEVICE rupolym_rf rupolym_rfr p_poly(HI) p_poly(LO) nxwell(GNODE) (HI LO) [
property l,w
  w = perimeter_coincide(rupolym_rfr,p_poly)/2
  l = area(rupolym_rfr)/w
]
TRACE PROPERTY rupolym_rf w w RES_Werr
TRACE PROPERTY rupolym_rf l l RES_Lerr

DEVICE spiral_std_mu_a28_dm std_mu_a28_ind_dm indm9p(TOP) indm9m(BOTTOM) psub(GNODE) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_std_mu_a28_dm [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 9
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_std_mu_a28_dm lay lay 0
  TRACE PROPERTY spiral_std_mu_a28_dm w w SPIRAL_Werr
  TRACE PROPERTY spiral_std_mu_a28_dm spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_std_mu_a28_dm nr nr 0
  TRACE PROPERTY spiral_std_mu_a28_dm rad rad 0
  TRACE PROPERTY spiral_std_mu_a28_dm gdis gdis 0

DEVICE spiral_std_mu_z std_mu_z_ind indm9p(TOP) indm9m(BOTTOM) psub(GNODE) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_std_mu_z [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 9
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_std_mu_z lay lay 0
  TRACE PROPERTY spiral_std_mu_z w w SPIRAL_Werr
  TRACE PROPERTY spiral_std_mu_z spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_std_mu_z nr nr 0
  TRACE PROPERTY spiral_std_mu_z rad rad 0
  TRACE PROPERTY spiral_std_mu_z gdis gdis 0

DEVICE spiral_std_mu_z_dm std_mu_z_ind_dm indm9p(TOP) indm9m(BOTTOM) psub(GNODE) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_std_mu_z_dm [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 9
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_std_mu_z_dm lay lay 0
  TRACE PROPERTY spiral_std_mu_z_dm w w SPIRAL_Werr
  TRACE PROPERTY spiral_std_mu_z_dm spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_std_mu_z_dm nr nr 0
  TRACE PROPERTY spiral_std_mu_z_dm rad rad 0
  TRACE PROPERTY spiral_std_mu_z_dm gdis gdis 0

DEVICE spiral_sym sym_ind indm9p(PLUS) indm9m(MINUS) psub(BULK) netlist model spiral_sym

ERC SELECT CHECK CHECK_IND
GROUP CHECK_IND IND?

// IND CHECK MACRO 
DMACRO STD_IND_Check BODY CROSS VIA REG { 	
std_ind_1a = BODY AND INDDMY  			
std_ind_1 = std_ind_1a INSIDE REG  		
std_ind_2a = CROSS AND INDDMY  		
std_ind_2 = std_ind_2a INSIDE REG  		
std_ind = std_ind_1 AND std_ind_2  	
							
std_ind_A = std_ind_1 NOT INTERACT IND_RAD 
std_ind_A1 = std_ind_2 INTERACT IND_RAD    
std_ind_B = std_ind_A AND std_ind_A1    
std_ind_B NOT INTERACT VIA
std_ind_C = std_ind INTERACT IND_RAD  
std_ind_C NOT INTERACT VIA
}

// VIA_Check
DMACRO VIA_Check VIA REG {
REG AND VIA
}

// VIA_Check2
DMACRO VIA_Check2 BODY CROSS VIA REG {		
std_ind_1a = BODY AND INDDMY  			
std_ind_1 = std_ind_1a INSIDE REG  		
std_ind_2a = CROSS AND INDDMY  	
std_ind_2 = std_ind_2a INSIDE REG  		
std_ind = std_ind_2 INTERACT std_ind_1  	
std_ind_C = std_ind INTERACT IND_RAD  		
std_ind_D = REG NOT std_ind_C  					
std_ind_D AND VIA
}
 
// VIA_Check3 
DMACRO VIA_Check3 BODY CROSS VIA REG {
std_ind_1a = BODY AND INDDMY  			
std_ind_1 = std_ind_1a INSIDE REG  		
std_ind_2a = CROSS AND INDDMY  		
std_ind_2 = std_ind_2a INSIDE REG  		
std_ind_3 = std_ind_1 OR std_ind_2  		
sym_ind_A1 = std_ind_3 INTERACT IND_NR  	
sym_ind_A2 = std_ind_2 INTERACT sym_ind_A1  	
sym_ind_A3a = sym_ind_A2 AND std_ind_1  	
sym_ind_A3b = SIZE sym_ind_A3a BY 0.3 	
sym_ind_A3 = SIZE sym_ind_A3b BY -0.3 	
sym_ind_A4 = RECTANGLE sym_ind_A3 ORTHOGONAL ONLY
sym_ind_B = REG NOT sym_ind_A4  
sym_ind_B AND VIA 
}

// MULTI_STD_IND_Check
DMACRO MULTI_STD_IND_Check BODY CROSS VIA REG {
std_ind_1a = BODY AND INDDMY  				
std_ind_1 = std_ind_1a INSIDE REG  			
std_ind_2a = CROSS AND INDDMY  			
std_ind_2 = std_ind_2a INSIDE REG  			
std_ind = std_ind_2 OR std_ind_1  			
std_ind_A = std_ind INTERACT IND_RAD  		
std_ind_A NOT INTERACT VIA
}

// MULTI_STD_IND_Check2
DMACRO MULTI_STD_IND_Check2 BODY CROSS VIA REG {	
std_ind_1a = BODY AND INDDMY  					
std_ind_1 = std_ind_1a INSIDE REG  			
std_ind_2a = CROSS AND INDDMY  	
std_ind_2 = std_ind_2a INSIDE REG  				
std_ind = std_ind_2 OR std_ind_1  				
std_ind NOT INTERACT VIA
}

// SYM_CT_RL_IND_Check1
DMACRO SYM_CT_RL_IND_Check1 BODY VIA REG AUX {	
std_ind_1a = AUX INTERACT BODY  		
std_ind_1 = std_ind_1a AND REG  		
std_ind_1 NOT INTERACT VIA
}

// SYM_CT_RL_IND_Check2
DMACRO SYM_CT_RL_IND_Check2 CROSS VIA REG {
std_ind_2a = CROSS AND INDDMY  			
std_ind_2b = (std_ind_2a NOT metal7i) NOT APi
std_ind_2c = std_ind_2a INTERACT std_ind_2b  	
std_ind_2 = std_ind_2c INSIDE REG  			
std_ind_2 NOT INTERACT VIA
} 

// CT_IND_CHECK1
DMACRO CT_IND_CHECK1 BODY CROSS VIA REG {
ct_ind1a = BODY AND INDDMY  			
ct_ind1 = ct_ind1a INSIDE REG  			
ct_ind2a = CROSS AND INDDMY  			
ct_ind2 = ct_ind2a INSIDE REG  			
ct_ind3 = ct_ind1 OR ct_ind2  			
sym_ind_A1 = ct_ind3 INTERACT IND_NR  			
sym_ind_A2 = ct_ind2 INTERACT sym_ind_A1  			
sym_ind_A3a = sym_ind_A2 AND ct_ind1  			
sym_ind_A3b = SIZE sym_ind_A3a BY 0.3 	
sym_ind_A3 = SIZE sym_ind_A3b BY -0.3	
sym_ind_A4 = RECTANGLE sym_ind_A3 ORTHOGONAL ONLY
( sym_ind_A4 NOT INTERACT VIA ) NOT INTERACT ptap
} 
  
// CT_IND_CHECK2
DMACRO CT_IND_CHECK2 BODY CTAP VIA REG {	// VIA check for CTAP
ct_ind1a = BODY AND INDDMY  		
ct_ind1 = ct_ind1a INSIDE REG  		
ct_ind2a = CTAP AND INDDMY  		
ct_ind2 = ct_ind2a INSIDE REG  		
ct_ind3 = ct_ind1 OR ct_ind2  		
sym_ind_A1 = ct_ind3 INTERACT IND_NR  		
sym_ind_A2 = ct_ind2 INTERACT sym_ind_A1  		
sym_ind_A3a = sym_ind_A2 AND ct_ind1  		
sym_ind_A3b = SIZE sym_ind_A3a BY 0.5 	
sym_ind_A3 = SIZE sym_ind_A3b BY -0.5 	
sym_ind_A = RECTANGLE sym_ind_A3 ORTHOGONAL ONLY
( sym_ind_A NOT INTERACT VIA ) NOT INTERACT ptap
} 

// CT_IND_CHECK3 
DMACRO CT_IND_CHECK3 BODY CTAP VIA REG {	// VIA check for CTAP
ct_ind1a = BODY AND INDDMY  					
ct_ind1 = ct_ind1a INSIDE REG  					
ct_ind2a = CTAP AND INDDMY  					
ct_ind2 = ct_ind2a INSIDE REG  					
ct_ind3 = ct_ind1 OR ct_ind2  					
sym_ind_A1 = ct_ind3 INTERACT IND_NR  					
sym_ind_A2 = ct_ind2 INTERACT sym_ind_A1  					
sym_ind_A3a = sym_ind_A2 AND ct_ind1  					
sym_ind_A3b = SIZE sym_ind_A3a BY 0.5 
sym_ind_A3 = SIZE sym_ind_A3b BY -0.5 
sym_ind_A4 = RECTANGLE sym_ind_A3 ORTHOGONAL ONLY
sym_ind_A5a = VERTEX sym_ind_A3 == 6
sym_ind_A5b = AP INTERACT sym_ind_A5a
sym_ind_A5 = sym_ind_A5b AND REG
sym_ind_A = sym_ind_A4 OR sym_ind_A5
( sym_ind_A NOT INTERACT VIA ) NOT INTERACT ptap
} 

// CT_IND_CHECK4 
DMACRO CT_IND_CHECK4 BODY CTAP AUX VIA REG {	// VIA check for CTAP
ct_ind1a = BODY AND INDDMY  		
ct_ind1 = ct_ind1a INSIDE REG  		
ct_ind2a = CTAP AND INDDMY  		
ct_ind2 = ct_ind2a INSIDE REG  		
ct_ind3 = ct_ind1 OR ct_ind2  		
sym_ind_A1 = ct_ind3 INTERACT IND_NR  		
sym_ind_A2a = ct_ind2 INTERACT sym_ind_A1  		
sym_ind_A2b = ct_ind1 INTERACT IND_NR  		
sym_ind_A3a = sym_ind_A2a AND sym_ind_A2b
sym_ind_A3b = SIZE sym_ind_A3a BY 0.5
sym_ind_A3 = SIZE sym_ind_A3b BY -0.5
sym_ind_A4a = RECTANGLE sym_ind_A3 ORTHOGONAL ONLY
(( sym_ind_A4a NOT INTERACT VIA ) NOT INTERACT ptap) NOT INTERACT AUX
} 

// CT_IND_CHECK5
DMACRO CT_IND_CHECK5 BODY CROSS VIA REG {	// VIA check for CROSS
ct_ind1a = BODY AND INDDMY  			
ct_ind1 = ct_ind1a INSIDE REG  			
cross1 = CROSS AND INDDMY  			
ct_ind2a = cross1 NOT INTERACT IND_D4
ct_ind2 = ct_ind2a INSIDE REG  			
ct_ind3 = ct_ind1 OR ct_ind2  			
sym_ind_A1 = ct_ind3 INTERACT IND_NR  			
sym_ind_A2 = ct_ind2 INTERACT sym_ind_A1  			
sym_ind_A3a = sym_ind_A2 AND ct_ind1  			
sym_ind_A3b = SIZE sym_ind_A3a BY 0.3 	
sym_ind_A3 = SIZE sym_ind_A3b BY -0.3 	
sym_ind_A4 = RECTANGLE sym_ind_A3 ORTHOGONAL ONLY
( sym_ind_A4 NOT INTERACT VIA ) NOT INTERACT ptap
cross_ind1 = cross1 INTERACT IND_D4  			      
cross_ind2 = cross_ind1 INTERACT sym_ind_A1  			      
cross_ind2 NOT INTERACT VIA
} 

// MULTI_CT_IND_CHECK1
DMACRO MULTI_CT_IND_CHECK1 BODY CROSS VIA REG {
ct_ind1a = BODY AND INDDMY  	
ct_ind1 = ct_ind1a INSIDE REG  	
ct_ind2a = CROSS AND INDDMY  	
ct_ind2 = ct_ind2a INSIDE REG  	
ct_ind3 = ct_ind1 OR ct_ind2  	
sym_ind_A1 = ct_ind3 INTERACT IND_NR  	
sym_ind_A2 = ct_ind2 INTERACT sym_ind_A1  	
sym_ind_A3 = sym_ind_A2 AND ct_ind1  	
sym_ind_A = RECTANGLE sym_ind_A3 ORTHOGONAL ONLY   
( sym_ind_A NOT INTERACT VIA ) NOT INTERACT ptap
} 

// MULTI_CT_IND_CHECK2
DMACRO MULTI_CT_IND_CHECK2 BODY CTAP VIA REG {
ct_ind1a = BODY AND INDDMY  	
ct_ind1 = ct_ind1a INSIDE REG  	
ct_ind2a = CTAP AND INDDMY  	
ct_ind2 = ct_ind2a INSIDE REG  	
ct_ind2 NOT ct_ind1
} 

// STD_IND_Check_4X
DMACRO STD_IND_Check_4X BODY CROSS VIA REG {
std_ind_1a = BODY AND INDDMY  			
std_ind_1 = std_ind_1a INSIDE REG  		
std_ind_2a = CROSS AND INDDMY  		
std_ind_2b = std_ind_2a INSIDE REG  		
std_ind_2c = SIZE std_ind_2b BY 0.3
std_ind_2 = SIZE std_ind_2c BY -0.3
std_ind = std_ind_2 INTERACT std_ind_1  	
std_ind NOT INTERACT VIA
} 

// spiral_std_mu_a28_dm
IND_STD_CHECK_MU_A28_DM.AP { @ RV is needed for connection of AP and M9 in spiral_std_mu_a28_dm inductor.
    CMACRO STD_IND_Check metal9i APi RVi std_mu_a28_ind_dm
}
IND_STD_CHECK_MU_A28_DM.VIA8 { @ VIA8 INTERACT spiral_std_mu_a28_dm inductor is forbidden.
    CMACRO VIA_Check VIA8 std_mu_a28_ind_dm
}

// spiral_sym_mu_a28_dm 
IND_CT_CHECK_MU_A28_DM.AP { @ RV is needed for connection of AP and M9 in spiral_sym_mu_a28_dm inductor.
    CMACRO CT_IND_CHECK1 metal9i APi RVi sym_mu_a28_ind_dm
}
IND_CT_CHECK_MU_A28_DM.VIA8 { @ VIA8 INTERACT sym_mu_a28_ind_dm inductor is forbidden.
    CMACRO VIA_Check VIA8 sym_mu_a28_ind_dm
}

// spiral_std_mu_z/spiral_std_mu_z_dm
IND_STD_CHECK_MU_Z.VIA8 { @ VIA8 is needed for connection of M9 and M8 in spiral_std_mu_z/spiral_std_mu_z_dm inductor.
    reg_lay = std_mu_z_ind OR std_mu_z_ind_dm
    CMACRO STD_IND_Check metal9i metal8i VIA8 reg_lay
}
IND_STD_CHECK_MU_Z.VIA7 { @ VIA7 INTERACT spiral_std_mu_z/spiral_std_mu_z_dm inductor is forbidden.
    reg_lay = std_mu_z_ind OR std_mu_z_ind_dm
    CMACRO VIA_Check VIA7 reg_lay
}

// spiral_sym_mu_z/spiral_sym_mu_z_dm
IND_SYM_CHECK_MU_Z.VIA8 { @ VIA8 is needed for connection of M9 and M8 in spiral_sym_mu_z/spiral_sym_mu_z_dm inductor.
    reg_lay = sym_mu_z_ind OR sym_mu_z_ind_dm
    CMACRO CT_IND_CHECK1 metal9i metal8i VIA8 reg_lay
}
IND_SYM_CHECK_MU_Z.VIA7 { @ VIA7 INTERACT spiral_sym_mu_z/spiral_sym_mu_z_dm inductor is forbidden.
    reg_lay = sym_mu_z_ind OR sym_mu_z_ind_dm
    CMACRO VIA_Check VIA7 reg_lay
}

// spiral_sym_ct_mu_z_a/spiral_sym_ct_mu_z_a28_dm
IND_CT_CHECK_MU_Z_A.VIA8 { @ VIA8 is needed for connection of M9 and M8 in spiral_sym_ct_mu_z_a/spiral_sym_ct_mu_z_a28_dm inductor.
    reg_lay = sym_ct_mu_z_a_ind OR sym_ct_mu_z_a28_ind_dm
    CMACRO CT_IND_CHECK1 metal9i metal8i VIA8 reg_lay
}
IND_CT_CHECK_MU_Z_A.RV { @ RV is needed for connection of AP and M9 in spiral_sym_ct_mu_z_a/spiral_sym_ct_mu_z_a28_dm inductor.
    reg_lay = sym_ct_mu_z_a_ind OR sym_ct_mu_z_a28_ind_dm
    CMACRO CT_IND_CHECK2 metal9i APi RVi reg_lay
}
IND_CT_CHECK_MU_Z_A.VIA7 { @ VIA7 INTERACT spiral_sym_ct_mu_z_a/spiral_sym_ct_mu_z_a28_dm inductor is forbidden.
    reg_lay = sym_ct_mu_z_a_ind OR sym_ct_mu_z_a28_ind_dm
    CMACRO VIA_Check VIA7 reg_lay
}

// spiral_sym_ct_mu_a28_a28_dm
IND_CT_CHECK_MU_A28_A28_DM.RV { @ RV is needed for connection of AP and M9 in spiral_sym_ct_mu_a28_a28_dm inductor.
    CMACRO CT_IND_CHECK5 metal9i APi RVi sym_ct_mu_a28_a28_ind_dm
}
IND_CT_CHECK_MU_A28_A28.VIA8 { @ VIA8 INTERACT spiral_sym_ct_mu_a28_a28_dm inductor is forbidden.
    CMACRO VIA_Check VIA8 sym_ct_mu_a28_a28_ind_dm
}

// spiral_sym
IND_SYM_CHECK.RV { @ RV is needed for connection of AP and M9 in spiral_sym inductor.
    spiral_sym_body  = APi AND metal9i
    spiral_sym_cross = APi OR metal9i 
    CMACRO MULTI_STD_IND_Check2 spiral_sym_body spiral_sym_cross RVi sym_ind
}    
IND_SYM_CHECK.VIA8 { @ VIA8 INTERACT spiral_sym inductor is forbidden.
    CMACRO VIA_Check VIA8 sym_ind
}    

// spiral_sym_ct_lc
IND_SYM_CT_LC_CHECK.RV { @ RV is needed for connection of AP and M9 in spiral_sym_ct_lc inductor.
    spiral_sym_ct_lc_body = (((APi AND metal9i) AND metal8i) AND metal7i) AND metal6i
    spiral_sym_ct_lc_cross = ((metal9i OR metal8i) OR metal7i) OR metal6i
    CMACRO MULTI_STD_IND_Check2 spiral_sym_ct_lc_body spiral_sym_ct_lc_cross RVi sym_ct_lc_ind
}    
IND_SYM_CT_LC_CHECK.VIA8 { @ VIA8 is needed for connection of M9 and M8 in spiral_sym_ct_lc inductor.
    spiral_sym_ct_lc_body = (((APi AND metal9i) AND metal8i) AND metal7i) AND metal6i
    spiral_sym_ct_lc_cross = ((metal9i OR metal8i) OR metal7i) OR metal6i
    CMACRO MULTI_STD_IND_Check2 spiral_sym_ct_lc_body spiral_sym_ct_lc_cross VIA8 sym_ct_lc_ind
}    
IND_SYM_CT_LC_CHECK.VIA7 { @ VIA7 is needed for connection of M8 and M7 in spiral_sym_ct_lc inductor.
    spiral_sym_ct_lc_body = (((APi AND metal9i) AND metal8i) AND metal7i) AND metal6i
    spiral_sym_ct_lc_cross = ((metal9i OR metal8i) OR metal7i) OR metal6i
    CMACRO MULTI_STD_IND_Check2 spiral_sym_ct_lc_body spiral_sym_ct_lc_cross VIA7 sym_ct_lc_ind
}    
IND_SYM_CT_LC_CHECK.VIA6 { @ VIA6 is needed for connection of M7 and M6 in spiral_sym_ct_lc inductor.
    spiral_sym_ct_lc_body = (((APi AND metal9i) AND metal8i) AND metal7i) AND metal6i
    spiral_sym_ct_lc_cross = ((metal9i OR metal8i) OR metal7i) OR metal6i
    CMACRO MULTI_STD_IND_Check2 spiral_sym_ct_lc_body spiral_sym_ct_lc_cross VIA6 sym_ct_lc_ind
}    
IND_SYM_CT_LC_CHECK.VIA5 { @ VIA5 INTERACT spiral_sym_ct_lc inductor is forbidden.
    CMACRO VIA_Check VIA5 sym_ct_lc_ind
}

// spiral_sym_ct_rl 
IND_SYM_CT_RL_CHECK.RV { @ RV is needed for connection of AP and M9 in spiral_sym_ct_rl inductor.
    spiral_sym_ct_rl_body = (((APi AND metal9i) AND metal8i) AND metal7i) AND metal6i
    spiral_sym_ct_rl_body_r = APi AND metal9i
    CMACRO SYM_CT_RL_IND_Check1 spiral_sym_ct_rl_body_r RVi sym_ct_rl_ind metal9i
}    
IND_SYM_CT_RL_CHECK.VIA7 { @ VIA7 is needed for connection of M8 and M7 in spiral_sym_ct_rl inductor.
    spiral_sym_ct_rl_body_l = (metal8i AND metal7i) AND metal6i
    CMACRO SYM_CT_RL_IND_Check1 spiral_sym_ct_rl_body_l VIA7 sym_ct_rl_ind metal8i
}    
IND_SYM_CT_RL_CHECK.VIA6 { @ VIA6 is needed for connection of M7 and M6 in spiral_sym_ct_rl inductor.
    spiral_sym_ct_rl_body_l = (metal8i AND metal7i) AND metal6i
    CMACRO SYM_CT_RL_IND_Check1 spiral_sym_ct_rl_body_l VIA6 sym_ct_rl_ind metal8i
}    
IND_SYM_CT_RL_CHECK.VIA8 { @ VIA8 is needed for connection of M9 and M8 in spiral_sym_ct_rl inductor.
    spiral_sym_ct_rl_cross = metal9i AND metal8i
    CMACRO SYM_CT_RL_IND_Check2 spiral_sym_ct_rl_cross VIA8 sym_ct_rl_ind
}    
IND_SYM_CT_RL_CHECK.VIA5 { @ VIA5 INTERACT spiral_sym_ct_rl inductor is forbidden.
    CMACRO VIA_Check VIA5 sym_ct_rl_ind
}	

// End of IND check

DEVICE spiral_sym_ct_lc sym_ct_lc_ind indm9p(PLUS) indm9m(MINUS) psub(BULK) indm10c(CTAP) netlist model spiral_sym_ct_lc

DEVICE spiral_sym_ct_mu_a28_a28_dm sym_ct_mu_a28_a28_ind_dm indm9p(TOP) indm9m(BOTTOM) psub(GNODE) indm10c(TAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_ct_mu_a28_a28_dm [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 9
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_ct_mu_a28_a28_dm lay lay 0
  TRACE PROPERTY spiral_sym_ct_mu_a28_a28_dm w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mu_a28_a28_dm spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mu_a28_a28_dm nr nr 0
  TRACE PROPERTY spiral_sym_ct_mu_a28_a28_dm rad rad 0
  TRACE PROPERTY spiral_sym_ct_mu_a28_a28_dm gdis gdis 0 

DEVICE spiral_sym_ct_mu_z_a sym_ct_mu_z_a_ind indm9p(TOP) indm9m(BOTTOM) psub(GNODE) indm10c(TAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> <IND_CTW> netlist model spiral_sym_ct_mu_z_a [
   PROPERTY w,spacing,nr,rad,lay,gdis,ctapw
   lay = 9
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
   ctapw = ( perimeter(IND_CTW) - 5e-7*2 ) / 2 / 1e-6
]
  TRACE PROPERTY spiral_sym_ct_mu_z_a lay lay 0
  TRACE PROPERTY spiral_sym_ct_mu_z_a w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mu_z_a spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mu_z_a nr nr 0
  TRACE PROPERTY spiral_sym_ct_mu_z_a rad rad 0
  TRACE PROPERTY spiral_sym_ct_mu_z_a gdis gdis 0 
  TRACE PROPERTY spiral_sym_ct_mu_z_a ctapw ctapw 0 

DEVICE spiral_sym_ct_mu_z_a28_dm sym_ct_mu_z_a28_ind_dm indm9p(TOP) indm9m(BOTTOM) psub(GNODE) indm10c(TAP) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> <IND_CTW> netlist model spiral_sym_ct_mu_z_a28_dm [
   PROPERTY w,spacing,nr,rad,lay,gdis,ctapw
   lay = 9
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
   ctapw = ( perimeter(IND_CTW) - 5e-7*2 ) / 2 / 1e-6
]
  TRACE PROPERTY spiral_sym_ct_mu_z_a28_dm lay lay 0
  TRACE PROPERTY spiral_sym_ct_mu_z_a28_dm w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_ct_mu_z_a28_dm spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_ct_mu_z_a28_dm nr nr 0
  TRACE PROPERTY spiral_sym_ct_mu_z_a28_dm rad rad 0
  TRACE PROPERTY spiral_sym_ct_mu_z_a28_dm gdis gdis 0 
  TRACE PROPERTY spiral_sym_ct_mu_z_a28_dm ctapw ctapw 0 

DEVICE spiral_sym_ct_rl sym_ct_rl_ind indm9p(PLUS) indm9m(MINUS) psub(BULK) indm10c(CTAP) netlist model spiral_sym_ct_rl

DEVICE spiral_sym_mu_a28_dm sym_mu_a28_ind_dm indm9p(TOP) indm9m(BOTTOM) psub(GNODE) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_mu_a28_dm [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 9
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_mu_a28_dm lay lay 0
  TRACE PROPERTY spiral_sym_mu_a28_dm w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_mu_a28_dm spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_mu_a28_dm nr nr 0
  TRACE PROPERTY spiral_sym_mu_a28_dm rad rad 0
  TRACE PROPERTY spiral_sym_mu_a28_dm gdis gdis 0

DEVICE spiral_sym_mu_z sym_mu_z_ind indm9p(TOP) indm9m(BOTTOM) psub(GNODE) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_mu_z [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 9
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_mu_z lay lay 0
  TRACE PROPERTY spiral_sym_mu_z w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_mu_z spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_mu_z nr nr 0
  TRACE PROPERTY spiral_sym_mu_z rad rad 0
  TRACE PROPERTY spiral_sym_mu_z gdis gdis 0

DEVICE spiral_sym_mu_z_dm sym_mu_z_ind_dm indm9p(TOP) indm9m(BOTTOM) psub(GNODE) <IND_RAD> <IND_NR> <IND_GDIS> <IND_W> <IND_S> netlist model spiral_sym_mu_z_dm [
   PROPERTY w,spacing,nr,rad,lay,gdis
   lay = 9
   nnr = ( perimeter(IND_NR) - 5e-9*2 ) / 2
   nr = ( nnr / 1e-8 ) * 0.25
   rad = ( perimeter(IND_RAD) - 5e-7*2 ) / 2
   gdis = ( perimeter(IND_GDIS) - 5e-7*2 ) / 2
   w = ( perimeter(IND_W) - 5e-7*2 ) / 2
   spacing = ( perimeter(IND_S) - 5e-7*2 ) / 2
]
  TRACE PROPERTY spiral_sym_mu_z_dm lay lay 0
  TRACE PROPERTY spiral_sym_mu_z_dm w w SPIRAL_Werr
  TRACE PROPERTY spiral_sym_mu_z_dm spacing spacing SPIRAL_Serr
  TRACE PROPERTY spiral_sym_mu_z_dm nr nr 0
  TRACE PROPERTY spiral_sym_mu_z_dm rad rad 0
  TRACE PROPERTY spiral_sym_mu_z_dm gdis gdis 0

#IFDEF CCI_DECK
#IFDEF MULTI_DEVICE_EXTRACTION
ERC TVF do_Perc_ADP Perc_ADP_properties annotate_adp_properties

TVF FUNCTION Perc_ADP_properties [/*
    package require CalibreLVS_ERC_TVF

    proc annotate_adp_properties {} {

#IFDEF FLICKER_CORNER_EXTRACTION
     erc::setup_parallel_device_parameters -devices { MN(nch_18_mac) MN(nch_18ud12_mac) MN(nch_18ud15_mac) MN(nch_25_mac) MN(nch_25od33_mac) MN(nch_25ud18_mac) MN(nch_avt_mac) MN(nch_ehvt_mac) MN(nch_hia18_mac) MN(nch_hia25_mac) MN(nch_hia_mac) MN(nch_hvt_mac) MN(nch_lvt_mac) MN(nch_mac) MN(nch_na18_mac) MN(nch_na25_mac) MN(nch_na_mac) MN(nch_uhvt_mac) MN(nch_ulvt_mac) MP(pch_18_mac) MP(pch_18ud12_mac) MP(pch_18ud15_mac) MP(pch_25_mac) MP(pch_25od33_mac) MP(pch_25ud18_mac) MP(pch_ehvt_mac) MP(pch_hvt_mac) MP(pch_lvt_mac) MP(pch_mac) MP(pch_uhvt_mac) MP(pch_ulvt_mac)  } -total { total { drawn_l drawn_w } }
     erc::setup_parallel_device_parameters -devices { nmos_rf_nw nmos_rf_18_nw nmos_rf_18ud15_nw nmos_rf_25_nw nmos_rf_25ud18_nw nmos_rf_25od33_nw nmos_rf_hvt_nw nmos_rf_ulvt_nw nmos_rf_lvt_nw pmos_rf_18ud15_nw pmos_rf_18_nw pmos_rf_25_nw pmos_rf_25ud18_nw pmos_rf_25od33_nw pmos_rf_hvt_nw pmos_rf_ulvt_nw pmos_rf_lvt_nw pmos_rf_nw nmos_rf_5t nmos_rf_18_5t nmos_rf_18ud15_5t nmos_rf_lvt_5t nmos_rf_25_5t nmos_rf_25ud18_5t nmos_rf_25od33_5t nmos_rf_hvt_5t nmos_rf_ulvt_5t pmos_rf_5t pmos_rf_nw_5t pmos_rf_18_5t pmos_rf_18_nw_5t pmos_rf_18ud15_5t pmos_rf_18ud15_nw_5t pmos_rf_25_5t pmos_rf_25_nw_5t pmos_rf_25ud18_5t pmos_rf_25ud18_nw_5t pmos_rf_25od33_5t pmos_rf_25od33_nw_5t pmos_rf_hvt_5t pmos_rf_hvt_nw_5t pmos_rf_ulvt_5t pmos_rf_ulvt_nw_5t pmos_rf_lvt_5t pmos_rf_lvt_nw_5t nmos_rf_6t nmos_rf_18_6t nmos_rf_18ud15_6t nmos_rf_lvt_6t nmos_rf_25_6t nmos_rf_25ud18_6t nmos_rf_25od33_6t nmos_rf_hvt_6t nmos_rf_ulvt_6t  } -sum { nr total_rf { lr wr } }
     erc::execute_parallel_device_parameters 
#ENDIF
    }
*/]
#ENDIF
#ENDIF
TVF FUNCTION device_function [/*

    package require CalibreLVS_DEVICE_DFM
    namespace import device::*
    proc catching_expr { arg } {
      	#puts "called catching_expr"
      	set rtval 0.0
      	if { [ catch {
            set rtval [ expr $arg ]
      	} result ] } {
            global errorCode
            set tmpError $errorCode
            #puts $result
            if { [ string match "ARITH UNDERFLOW *" $errorCode ] } {
            	#puts "$errorCode error caught during expr"
            	set rtval 0.0
            } elseif { [ string match "ARITH OVERFLOW *" $errorCode ] } {
	    	#puts "$errorCode error caught during expr"
            	set rtval 1e200
            } else {
            	#puts "error propagated during expr"
            	error $result $tmpError
            }
      	}
      	return $rtval
    }

    proc calc_sca { SCH SCV W L LR_EXT TOP_EXT BOT_EXT SCALE } {
  	set sca_sum1 0.0
  	set sca_sum2 0.0
  	set SCref 1.0
  	set slice_count1 [ $SCH slice_count ]
  	set slice_count2 [ $SCV slice_count ]

  	for { set i 0 } { $i < $slice_count1} { incr i } {
       	    set sca_sum1 [ expr { $sca_sum1 + ( ([$SCALE]*[$SCH w $i]) * ( ($SCref * $SCref/([$SCALE]*([$SCH a $i]+[$LR_EXT]))) - ($SCref * $SCref/([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))) +  ($SCref * $SCref/([$SCALE]*([$SCH b $i]+[$LR_EXT]))) - ($SCref * $SCref/([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))))) }]
       	}

  	for { set i 0 } { $i < $slice_count2} { incr i } {
            set sca_sum2 [ expr { $sca_sum2 + ( ([$SCALE]*[$SCV w $i]) * ( ($SCref * $SCref/([$SCALE]*([$SCV a $i]+[$BOT_EXT]))) - ($SCref * $SCref/([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))) + ($SCref * $SCref/([$SCALE]*([$SCV b $i]+[$TOP_EXT]))) - ($SCref * $SCref/([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))))) }]
       	}

  	return [ expr { ($sca_sum1 + $sca_sum2) / ( (([$SCALE]*[$W]) * ([$SCALE]*[$L])) * 1e12) }]
    }

    proc calc_scb {  SCH SCV W  L LR_EXT TOP_EXT BOT_EXT SCALE } {
  	set scb_sum1 0.0
	set scb_sum2 0.0
  	set SCref 1.0
  	set slice_count1 [ $SCH slice_count ]
  	set slice_count2 [ $SCV slice_count ]
  	for { set i 0 } { $i < $slice_count1} { incr i } {
  	    set exp_term1 [ catching_expr " exp(-10*([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6/$SCref) " ]
  	    set exp_term2 [ catching_expr " exp(-10*([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6/$SCref) " ]
  	    set exp_term3 [ catching_expr " exp(-10*([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
    	    set exp_term4 [ catching_expr " exp(-10*([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
   	    set exp_term5 [ catching_expr " exp(-10*([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6/$SCref) " ]
  	    set exp_term6 [ catching_expr " exp(-10*([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term7 [ catching_expr " exp(-10*([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term8 [ catching_expr " exp(-10*([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set scb_sum1 [ expr { $scb_sum1 + ( ([$SCALE]*[ $SCH w $i ])*1e6 * (   (([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6*( $exp_term1/10)) +   ($SCref*($exp_term2/100)) - (([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6*($exp_term3/10)) - (($SCref*($exp_term4/100))) + (([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6*( $exp_term5/10)) +   ($SCref*($exp_term6/100)) - (([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6*($exp_term7/10)) - ($SCref*($exp_term8/100))       )) } ]
     	}
   	for { set i 0 } { $i < $slice_count2} { incr i } {
	    set exp_term1 [ catching_expr " exp(-10*([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term2 [ catching_expr " exp(-10*([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term3 [ catching_expr " exp(-10*([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term4 [ catching_expr " exp(-10*([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term5 [ catching_expr " exp(-10*([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term6 [ catching_expr " exp(-10*([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term7 [ catching_expr " exp(-10*([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term8 [ catching_expr " exp(-10*([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set scb_sum2 [ expr { $scb_sum2 + ( ([$SCALE]*[$SCV w $i])*1e6 * (   (([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6*( $exp_term1/10)) +   ($SCref*($exp_term2/100)) - (([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6*($exp_term3/10)) - ($SCref*($exp_term4/100)) + (([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6*( $exp_term5/10)) +   ($SCref*($exp_term6/100)) - (([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6*($exp_term7/10)) - ($SCref*($exp_term8/100))       )) } ]
     	}
	return [ expr { ( $scb_sum1 + $scb_sum2)  / ( (([$SCALE]*[$W]) * ([$SCALE]*[$L])) *1e12) }]
    }

    proc calc_scc { SCH SCV W L LR_EXT TOP_EXT BOT_EXT SCALE } {
  	set scc_sum1 0.0
	set scc_sum2 0.0
	set SCref 1.0
	set slice_count1 [ $SCH slice_count ]
	set slice_count2 [ $SCV slice_count ]
	for { set i 0 } { $i < $slice_count1} { incr i } { 
	    set exp_term1 [ catching_expr " exp(-20*([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term2 [ catching_expr " exp(-20*([$SCALE]*([$SCH a $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term3 [ catching_expr " exp(-20*([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term4 [ catching_expr " exp(-20*([$SCALE]*([$SCH a $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term5 [ catching_expr " exp(-20*([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term6 [ catching_expr " exp(-20*([$SCALE]*([$SCH b $i]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term7 [ catching_expr " exp(-20*([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set exp_term8 [ catching_expr " exp(-20*([$SCALE]*([$SCH b $i]+[$L]+[$LR_EXT]))*1e6/$SCref) " ]
	    set scc_sum1 [ expr { $scc_sum1 + ( ([$SCALE]*[$SCH w $i])*1e6 * (   (([$SCALE]*([$SCH a $i]+ [$LR_EXT]))*1e6*( $exp_term1/20)) +   ($SCref*($exp_term2/400)) - (([$SCALE]*([$SCH a $i]+[$L]+ [$LR_EXT]))*1e6*($exp_term3/20)) - ($SCref*($exp_term4/400)) + (([$SCALE]*([$SCH b $i]+ [$LR_EXT]))*1e6*( $exp_term5/20)) +   ($SCref*($exp_term6/400)) - (([$SCALE]*([$SCH b $i]+[$L]+ [$LR_EXT]))*1e6*($exp_term7/20)) - ($SCref*($exp_term8/400))       )) } ]
	}
	for { set i 0 } { $i < $slice_count2} { incr i } {
	    set exp_term1 [ catching_expr " exp(-20*([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term2 [ catching_expr " exp(-20*([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term3 [ catching_expr " exp(-20*([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term4 [ catching_expr " exp(-20*([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6/$SCref) " ]
	    set exp_term5 [ catching_expr " exp(-20*([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term6 [ catching_expr " exp(-20*([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term7 [ catching_expr " exp(-20*([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set exp_term8 [ catching_expr " exp(-20*([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6/$SCref) " ]
	    set scc_sum2 [ expr { $scc_sum2 + ( ([$SCALE]*[$SCV w $i])*1e6 * (   (([$SCALE]*([$SCV a $i]+[$BOT_EXT]))*1e6*( $exp_term1/20)) +   ($SCref*($exp_term2/400)) - (([$SCALE]*([$SCV a $i]+[$W]+[$BOT_EXT]))*1e6*($exp_term3/20)) - ($SCref*($exp_term4/400)) + (([$SCALE]*([$SCV b $i]+[$TOP_EXT]))*1e6*( $exp_term5/20)) +   ($SCref*($exp_term6/400)) - (([$SCALE]*([$SCV b $i]+[$W]+[$TOP_EXT]))*1e6*($exp_term7/20)) - ($SCref*($exp_term8/400))       )) } ]
	}
	return [ expr { ( $scc_sum1 + $scc_sum2)  / ( (([$SCALE]*[$W]) * ([$SCALE]*[$L])) *1e12) }]
    }
    proc calc_lod_sasb { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*1.0/($sa+0.5*$Lsi)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ((1.0/$accum)-0.5*$Lsi)/[$scale] } ]
    }
    
    proc calc_lod_sa1sb1 { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*1.0/pow($sa+0.1*$Lsi,3)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { (pow(1.0/$accum,1.0/3)-0.1*$Lsi)/[$scale] } ]
    }

    proc calc_lod_sa2sb2 { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*sqrt(pow(5e-7/($sa+0.5*$Lsi),2)+1)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ( 5e-7/sqrt(pow($accum,2)-1) - 0.5*$Lsi ) /[$scale] } ]
    }

    proc calc_lod_sa3sb3 { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)/(1+pow(5e-7/($sa+0.1*$Lsi),3))} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ( 5e-7/pow(1.0/$accum - 1,1.0/3) - 0.1*$Lsi ) /[$scale] } ]
    }

    proc calc_sca_dfm__getsum { tclvec pgw ext units WPED } {
        
        # scale cancels out in this ratio, discarded
        # pgw = perpendicular gate width (L for sides, W for ends)
        # ext = encval extension (LR_EXT for sides, TOP_EXT/BOT_EXT for ends)
        
        set SCref 1.0
        set sum 0.0
        
        foreach segment $tclvec {
        	foreach { width encval } $segment {
        	    set width [ expr { $width * $units } ]
        	    set encval [ min $encval $WPED ]
        	    set encval [ expr { $encval * $units } ]
        	    set sum [ expr { $sum + $width * ( \
        		   $SCref * $SCref / ( $encval + $ext ) - \
        		   $SCref * $SCref / ( $encval + $pgw + $ext ) \
        		   ) } ]
        	}
        }
        
        return $sum
    }
    
    proc calc_sca_dfm { PER_1 PER_2 PAR_1 PAR_2 W L LR_EXT TOP_EXT BOT_EXT UNITS SCALE WPED} {
        
        set side_1 [ dfm_vec_measurements $PER_1 ]
        set side_2 [ dfm_vec_measurements $PER_2 ]
        set sides  [ concat $side_1 $side_2 ]
    
        set end_1  [ dfm_vec_measurements $PAR_1 ]
        set end_2  [ dfm_vec_measurements $PAR_2 ]
        
        set sum [ expr { [ calc_sca_dfm__getsum $sides [$L] [$LR_EXT] [$UNITS] [$WPED] ] + \
    			 [ calc_sca_dfm__getsum $end_1 [$W] [$BOT_EXT] [$UNITS] [$WPED] ] + \
    			 [ calc_sca_dfm__getsum $end_2 [$W] [$TOP_EXT] [$UNITS] [$WPED] ] } ]
        
        return [ expr { $sum / ( [$SCALE] * [$W] * [$SCALE] * [$L] * 1e12 ) } ]
    }	

    proc calc_scbscc_dfm__getsum { tclvec pgw ext units scale em d1 d2 WPED} {
    
        # pgw = perpendicular gate width (L for sides, W for ends)
        # ext = encval extension (LR_EXT for sides, TOP_EXT/BOT_EXT for ends)
        # em = multiplier for args to exp
        # d1 = denominator1 (for 1st and 3rd terms)
        # d2 = denominator2 (for 2nd and 4th terms)
        
        set SCref 1.0
        set sum 0.0
        set constant 1e6
        
        foreach segment $tclvec {
        	foreach { width encval } $segment {
        	    set width [ expr { $width * $units } ]
        	    set encval [ expr { $encval * $units } ]
        	    set encval [ min $encval $WPED ]
        	    set encval_1 [ expr { $scale * ( $encval + $ext ) } ]
        	    set encval_2 [ expr { $scale * ( $encval + $pgw + $ext ) } ]
                    set encval_1_exp [ catching_expr "exp( $em * $encval_1 * $constant / $SCref )" ]
                    set encval_2_exp [ catching_expr "exp( $em * $encval_2 * $constant / $SCref )" ]
        	    set sum [ expr { $sum + $scale * $width * $constant * ( \
        		       $encval_1 * $constant * ( $encval_1_exp/$d1 ) + \
    			       $SCref * ( $encval_1_exp/$d2 ) - \
    			       $encval_2 * $constant * ( $encval_2_exp/$d1 ) - \
    			       $SCref * ( $encval_2_exp/$d2 ) \
    			      ) } ]
    		}
        }
        
        return $sum
    }
    
    
    proc calc_scb_dfm { PER_1 PER_2 PAR_1 PAR_2 W L LR_EXT TOP_EXT BOT_EXT UNITS SCALE WPED } {
    
        set side_1 [ dfm_vec_measurements $PER_1 ]
        set side_2 [ dfm_vec_measurements $PER_2 ]
        set sides  [ concat $side_1 $side_2 ]
    
        set end_1  [ dfm_vec_measurements $PAR_1 ]
        set end_2  [ dfm_vec_measurements $PAR_2 ]
        
        set sum [ expr { [ calc_scbscc_dfm__getsum $sides [$L] [$LR_EXT] [$UNITS] [$SCALE] -10 10 100 [$WPED] ] + \
    			 [ calc_scbscc_dfm__getsum $end_1 [$W] [$BOT_EXT] [$UNITS] [$SCALE] -10 10 100 [$WPED] ] + \
    			 [ calc_scbscc_dfm__getsum $end_2 [$W] [$TOP_EXT] [$UNITS] [$SCALE] -10 10 100 [$WPED] ] } ]
        
        return [ expr { $sum / ( [$SCALE] * [$W] * [$SCALE] * [$L] * 1e12 ) } ]
    }

    proc calc_scc_dfm { PER_1 PER_2 PAR_1 PAR_2 W L LR_EXT TOP_EXT BOT_EXT UNITS SCALE WPED } {
    
        set side_1 [ dfm_vec_measurements $PER_1 ]
        set side_2 [ dfm_vec_measurements $PER_2 ]
        set sides  [ concat $side_1 $side_2 ]
        
        set end_1  [ dfm_vec_measurements $PAR_1 ]
        set end_2  [ dfm_vec_measurements $PAR_2 ]
        
        set sum [ expr { [ calc_scbscc_dfm__getsum $sides [$L] [$LR_EXT] [$UNITS] [$SCALE] -20 20 400 [$WPED] ] + \
			 [ calc_scbscc_dfm__getsum $end_1 [$W] [$BOT_EXT] [$UNITS] [$SCALE] -20 20 400 [$WPED] ] + \
			 [ calc_scbscc_dfm__getsum $end_2 [$W] [$TOP_EXT] [$UNITS] [$SCALE] -20 20 400 [$WPED] ] } ]
        
        return [ expr { $sum / ( [$SCALE] * [$W] * [$SCALE] * [$L] * 1e12 ) } ]
    }

    proc min { a b } {
            return [ expr { ($a < $b) ? $a : $b } ]
    }


    proc cal_sobv_dfm { vec units } {
      set ret1 [$vec value 0 1]
      set ret [ expr { $ret1 * [$units] } ]
      return $ret
    }

    proc calc_lod_sa1 { SCH W L GATE_EXT SCALE } {
      	set sum1 0.0     
      	set slice_count1 [ $SCH slice_count ]     

      	for { set i 0 } { $i < $slice_count1 } { incr i } {
            set sum1 [ expr { $sum1 + [$SCALE]*[$SCH w $i] / pow([$SCALE]*([$SCH a $i] + [$GATE_EXT] + 0.1*[$L]),3) }]
        }
        return [ expr { ( pow(([$SCALE]*[$W] / $sum1) , (1.0/3.0)) - 0.1*[$SCALE]*[$L] )/[$SCALE] }]
    }

    proc calc_lod_sb1 { SCH W L GATE_EXT SCALE } {
      	set sum1 0.0     
      	set slice_count1 [ $SCH slice_count ]     

        for { set i 0 } { $i < $slice_count1 } { incr i } {
            set sum1 [ expr { $sum1 + [$SCALE]*[$SCH w $i] / pow([$SCALE]*([$SCH b $i] + [$GATE_EXT] + 0.1*[$L]),3) }]
        }
        return [ expr { ( pow(([$SCALE]*[$W] / $sum1) , (1.0/3.0)) - 0.1*[$SCALE]*[$L] )/[$SCALE] }]
    }

    proc calc_lod_sa2 { SCH W L GATE_EXT SCALE } {
    	set slice_count [ $SCH slice_count ]
        set constant1 5e-07
        set constant2 0.5
        set sum 0.0
        for { set i 0 } { $i < $slice_count } { incr i } {
            set sum [ expr { $sum + ( (([$SCALE]*[$SCH w $i])/([$SCALE]*[$W])) * sqrt( pow( ($constant1/(([$SCALE]*[$SCH a $i])+([$SCALE]*[$GATE_EXT]) + ($constant2*[$L]*[$SCALE]))), 2 ) 
+1 ) ) } ]
        }
        return [ expr { (($constant1 /sqrt( pow($sum, 2) -1 )) - ($constant2*[$L]*[$SCALE]))/[$SCALE] } ]
    }

    proc calc_lod_sb2 { SCH W L GATE_EXT SCALE } {
        set slice_count [ $SCH slice_count ]
        set constant1 5e-07
        set constant2 0.5
        set sum 0.0
        for { set i 0 } { $i < $slice_count } { incr i } {
            set sum [ expr { $sum + ( (([$SCALE]*[$SCH w $i])/([$W]*[$SCALE])) * sqrt( pow( ($constant1/(([$SCALE]*[$SCH b $i])+([$SCALE]*[$GATE_EXT]) + ($constant2*[$L]*[$SCALE]))), 2 )
+1 ) ) } ]
        }
        return [ expr { (($constant1 /sqrt( pow($sum, 2) -1 )) - ($constant2*[$L]*[$SCALE]))/[$SCALE] } ]
    }

    proc calc_lod_sa3 { SCH W L GATE_EXT SCALE } {
    	set accum 0.0
        set slice_count1 [ $SCH slice_count ]
        set constant [ expr { 5e-7} ] 
        for { set i 0 } { $i < $slice_count1 } { incr i } {
            set val [ expr { ( [$SCALE]*[$SCH w $i]) /  ( 1 + pow($constant/([$SCALE]*[$SCH a $i] +([$SCALE]*[$GATE_EXT]) + (0.1*[$L]*[$SCALE])),3))  }]
	    set accum [ expr { $accum + $val}]
        }
        return [ expr { (( $constant /   pow(([$SCALE]*[$W]/$accum)-1, 1.0/3))   - 0.1*[$SCALE]*[$L])/[$SCALE]  }]
    }

    proc calc_lod_sb3 { SCH W L GATE_EXT SCALE } {
        set accum 0.0
        set slice_count1 [ $SCH slice_count ]
        set constant [ expr { 5e-7} ]
        for { set i 0 } { $i < $slice_count1 } { incr i } {
            set val [ expr { ( [$SCALE]*[$SCH w $i]) /  ( 1 + pow($constant/([$SCALE]*[$SCH b $i] +([$SCALE]*[$GATE_EXT]) + (0.1*[$L]*[$SCALE])),3))  }]
            set accum [ expr { $accum + $val}]
        }
        return [ expr { (( $constant /   pow(([$SCALE]*[$W]/$accum)-1, 1.0/3))   - 0.1*[$SCALE]*[$L])/[$SCALE]  }]
    }



    proc compute_spa { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
    	set constant [ expr { 3e-07 / [$units] } ]
    	
	foreach segment $measurements {
	    foreach { width spa spb se } $segment {
	    	set val   [ expr { [$scale]*$width / ([$scale]*$spa + $constant) } ] 
	    	set accum [ expr { $accum + $val } ]
	    }
     	}
	
    	return [ expr { (((( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum ) - $constant) * [$units])/[$scale] } ]
    }

    proc compute_spa1 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
    	set constant [ expr { 3e-07 / [$units] } ]
    	
	foreach segment $measurements {
	    foreach { width spa spb se } $segment {
	    	set val   [ expr { [$scale]*$width / pow(([$scale]*$spa + $constant),2) } ] 
	    	set accum [ expr { $accum + $val } ]
	    }
    	}
	
    	return [ expr {( (sqrt(( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum ) - $constant) * [$units])/[$scale] } ]
    }

    proc compute_spa2 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
    
	foreach segment $measurements {
	    foreach { width spa spb se } $segment {
	    	set val   [ expr { [$scale]*$width / pow([$scale]*$spa+0.1*[$scale]*[$drawn_length]/[$units],3) } ] 
	    	set accum [ expr { $accum + $val } ]
	    }
    	}
	
    	return [ expr { ((pow(( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum, 1.0/3)-0.1*[$scale]*[$drawn_length]/[$units]) * [$units])/[$scale] } ]
	    
    }

    proc compute_spa3 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width spa spb se } $segment {
            	set val   [ expr { [$scale]*$width / pow([$scale]*$spa+0.5*[$scale]*[$drawn_length]/[$units],2) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}
	
    	return [ expr { ((sqrt(( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum)-0.5*[$scale]*[$drawn_length]/[$units]) * [$units])/[$scale] } ]
    }

    proc compute_sap { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set constant [ expr { 1e-09 / [$units] } ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width spa spb se } $segment {
            	set val   [ expr { [$scale]*$width / ( ([$scale]*$se+$constant) *  pow([$scale]*$spa+$constant,2) ) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}
	
    	return [ expr {(( pow(( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum,1.0/3))*[$units])/[$scale] } ] 
    }

    proc compute_sa4 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set constant [ expr { 1e-09 / [$units] } ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width spa spb se } $segment {
            	set val   [ expr { [$scale]*$width / ([$scale]*$se+$constant) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}
	
    	return [ expr { (((( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum)-$constant)*[$units])/[$scale] } ] 
    }

    proc compute_spba { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left  ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
    	set max_test [ expr { 5e-08 / [$units] } ]

    	foreach segment $measurements {
	    foreach { width spa spb se } $segment {
	    	set diff  [ expr { [$scale]*$spb - [$scale]*$spa } ]
	    	set maxd  [ max $diff $max_test ]
	    	set val   [ expr { [$scale]*$width / ( pow([$scale]*$spa+0.1*[$scale]*[$drawn_length]/[$units],3) * pow($maxd,3) ) } ]
	    	set accum [ expr { $accum + $val } ]
	    }
        }

    	return [ expr { ((pow( (( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum), 1.0/6)) * [$units])/[$scale] } ]
    }
    proc compute_spba1 { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
    
        set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left  ]
        set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
        set measurements [ concat $measurements_left $measurements_right ]
        set accum 0.0
        set max_test [ expr { 5e-08 / [$units] } ]

        foreach segment $measurements {
        	foreach { width spa spb se } $segment {
        	    set diff  [ expr { [$scale]*$spb - [$scale]*$spa + 0.1*[$scale]*[$drawn_length]/[$units]} ]
        	    set maxd  [ max $diff $max_test ]
        	    set val   [ expr { [$scale]*$width / ( pow([$scale]*$spa+0.1*[$scale]*[$drawn_length]/[$units],3) * pow($maxd,3) ) } ]
        	    set accum [ expr { $accum + $val } ]
        	}
        }
        return [ expr { ((pow( (( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum), 1.0/6)) * [$units])/[$scale] } ]
    }

    proc compute_sapb { dfm_vector_g2sp_left dfm_vector_g2sp_right drawn_width drawn_length units scale } {
	set measurements_left [ dfm_vec_measurements $dfm_vector_g2sp_left ]
	set measurements_right [ dfm_vec_measurements $dfm_vector_g2sp_right ]
	set measurements [ concat $measurements_left $measurements_right ]
	set accum 0.0
	set constant [ expr { 1e-09 / [$units] } ]

	foreach segment $measurements {
		foreach { width spa spb se } $segment {
			set val [ expr { ([$scale]*$width) / (([$scale]*$se + $constant)*pow( ([$scale]*$spb - [$scale]*$spa + $constant) ,3)) } ]
			set accum [ expr { $accum + $val } ]
		}
	}
	return [ expr { pow( (2 * ([$scale]*[$drawn_width]/[$units]) / $accum), 0.25) * [$units] / [$scale] } ]
    }

    proc compute_enx { dfm_vector_per_left dfm_vector_per_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_per_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_per_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width sp se sf } $segment {
            	set val   [ expr { ([$scale]*$width) / pow(([$scale]*$se+([$scale]*[$drawn_length]/[$units])), 0.5) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}

    	return [ expr { ( (pow((((2*[$scale]*[$drawn_width])/[$units]) / $accum), 2)-(([$scale]*[$drawn_length])/[$units]))*[$units])/[$scale] } ] 
    }

    proc compute_enx1 { dfm_vector_per_left dfm_vector_per_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_per_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_per_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set constant [ expr { 1e-09 / [$units] } ] 
    	set accum 0.0

    	foreach segment $measurements {
            foreach { width sp se sf } $segment {
            	set val   [ expr { [$scale]*$width / ([$scale]*$se+$constant) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}

    	return [ expr { ((( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum)- $constant)*[$units]/[$scale] } ] 
    }

    proc compute_eny { dfm_vector_par_top dfm_vector_par_bottom drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_par_top ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_par_bottom ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width sle slf } $segment {
            	set val   [ expr { [$scale]*$width / ([$scale]*$sle+([$scale]*[$drawn_length]/[$units])) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}

    	return [ expr {(((( 2 * ([$scale]*[$drawn_length]/[$units]) ) / $accum)-(1.0*[$scale]*[$drawn_length]/[$units]))*[$units])/[$scale] } ] 
    }

    proc compute_eny1 { dfm_vector_par_top dfm_vector_par_bottom drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_par_top ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_par_bottom ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width sle slf } $segment {
            	set val   [ expr { [$scale]*$width / pow( ([$scale]*$sle+(0.05*[$scale]*[$drawn_length]/[$units])), 3)   } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}
    	return [ expr {(( pow( (( 2 * ([$scale]*[$drawn_length]/[$units]) ) / $accum) , 1.0/3) -(0.05*[$scale]*[$drawn_length]/[$units]))*[$units])/[$scale] } ] 
    }

    proc compute_eny2 { dfm_vector_par_top dfm_vector_par_bottom drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_par_top ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_par_bottom ]
    	set constant [ expr { 1e-09 / [$units] } ]	
    	set measurements [ concat $measurements_left $measurements_right ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width sle slf } $segment {
            	set val   [ expr { [$scale]*$width / ([$scale]*$sle+$constant) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}

    	return [ expr { (((( 2 * ([$scale]*[$drawn_length]/[$units]) ) / $accum)- $constant)*[$units])/[$scale] } ] 
    }

    proc compute_rex { dfm_vector_per_left dfm_vector_per_right drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_per_left ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_per_right ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set constant [ expr { 1e-09 / [$units] } ]
    	set max_test [ expr { 5e-08 / [$units] } ] 
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width sp se sf } $segment {
            	set diff  [ expr { [$scale]*($sf-$se) + (1.0*[$scale]*[$drawn_length]/[$units]) } ] 
            	set maxd  [ max $diff $max_test ]
                set val   [ expr { [$scale]*$width / (([$scale]*$se+$constant)*$maxd) } ]
                set accum [ expr { $accum + $val } ]
            }
    	}

    	return [ expr { ((sqrt(( 2 * ([$scale]*[$drawn_width]/[$units]) ) / $accum))*[$units])/[$scale] } ] 
    }

    proc compute_rey { dfm_vector_par_top  dfm_vector_par_bottom drawn_width drawn_length units scale } {
    	set measurements_left [ dfm_vec_measurements $dfm_vector_par_top ]
    	set measurements_right [ dfm_vec_measurements $dfm_vector_par_bottom ]
    	set measurements [ concat $measurements_left $measurements_right ]
    	set constant [ expr { 1e-09 / [$units] } ]
    	set max_test [ expr { 5e-08 / [$units] } ]
    	set accum 0.0
	
    	foreach segment $measurements {
            foreach { width sle slf } $segment {
            	set diff  [ expr { [$scale]*($slf-$sle) + (1.0*[$scale]*[$drawn_length]/[$units]) } ]
            	set maxd  [ max $diff $max_test ]
            	set val   [ expr { [$scale]*$width / (([$scale]*$sle+$constant)*$maxd) } ]
            	set accum [ expr { $accum + $val } ]
            }
    	}

    	return [ expr { ((sqrt(( 2 * ([$scale]*[$drawn_length]/[$units]) ) / $accum))*[$units])/[$scale] } ] 
    }


*/]
#IFNDEF LVS_DECK
INCLUDE ./DFM/odSpace.encrypt
INCLUDE ./DFM/metal_boundary.encrypt
#ENDIF
// Serve X-resistor as an built-in resistor (for PATHCHK)
LVS DEVICE TYPE RESISTOR rm1w rm2w rm3w rm4w rm5w rm6w rm7w rm8w rm9w rmap rnmg rnmg_m rnodl rnodl_m rnods rnods_m rnodwo rnodwo_m rnwod rnwod_m rnwsti rnwsti_m rpmg rpmg_m rpodl rpodl_m rpods rpods_m rpodwo rpodwo_m rupolym rupolym_m [POS=PLUS NEG=MINUS]
LVS DEVICE TYPE RESISTOR rupolym_rf [POS=HI NEG=LO]
LVS REDUCE rupolym_rf PARALLEL NO
LVS REDUCE rupolym_rf SERIES HI LO NO

#IFNDEF RC_DECK
//#############################################
//# ERC CHECK                                 #
//#############################################
// Reports regions on a DNW layer that connect to more than one node.
LVS SOFTCHK DNW CONTACT
// Reports regions on a PROBEM1_T layer that connect to more than one node.
LVS SOFTCHK PROBEM1_T CONTACT
// Reports regions on a PROBEM2_T layer that connect to more than one node.
LVS SOFTCHK PROBEM2_T CONTACT
// Reports regions on a PROBEM3_T layer that connect to more than one node.
LVS SOFTCHK PROBEM3_T CONTACT
// Reports regions on a PROBEM4_T layer that connect to more than one node.
LVS SOFTCHK PROBEM4_T CONTACT
// Reports regions on a PROBEM5_T layer that connect to more than one node.
LVS SOFTCHK PROBEM5_T CONTACT
// Reports regions on a PROBEM6_T layer that connect to more than one node.
LVS SOFTCHK PROBEM6_T CONTACT
// Reports regions on a PROBEM7_T layer that connect to more than one node.
LVS SOFTCHK PROBEM7_T CONTACT
// Reports regions on a tndiff_dmy layer that connect to more than one node.
LVS SOFTCHK tndiff_dmy CONTACT
// Reports regions on a RFDMY_HIA_psub layer that connect to more than one node.
LVS SOFTCHK RFDMY_HIA_psub CONTACT
// Reports regions on a rfdmy56 layer that connect to more than one node.
LVS SOFTCHK rfdmy56 CONTACT
// Reports regions on a tpdiff_dmy layer that connect to more than one node.
LVS SOFTCHK tpdiff_dmy CONTACT
// Reports regions on a nxwell layer that connect to more than one node.
LVS SOFTCHK nxwell CONTACT
// Reports regions on a RFDMY_HIA_bulk layer that connect to more than one node.
LVS SOFTCHK RFDMY_HIA_bulk CONTACT
// Reports regions on a coll1 layer that connect to more than one node.
LVS SOFTCHK coll1 CONTACT
// Reports regions on a n_psub layer that connect to more than one node.
#IFNDEF NW_RING
	LVS SOFTCHK n_psub CONTACT
#ENDIF
// Reports regions on a psub layer that connect to more than one node.
LVS SOFTCHK psub CONTACT
// Reports regions on a psub_term layer that connect to more than one node.
LVS SOFTCHK psub_term CONTACT

#IFDEF WELL_TO_PG_CHECK
GROUP ERC_WELL_TO_PG_CHECK  npvss49 ppvdd49
ERC SELECT CHECK ERC_WELL_TO_PG_CHECK
#ENDIF

#IFDEF GATE_TO_PG_CHECK
GROUP ERC_GATE_TO_PG_CHECK  npvss150 ppvdd150
ERC SELECT CHECK ERC_GATE_TO_PG_CHECK
#ENDIF

#IFDEF DS_TO_PG_CHECK
GROUP ERC_DS_TO_PG_CHECK  mnpg mppg mnpgldd mppgldd mnpgldd_hv mppgldd_hv
ERC SELECT CHECK ERC_DS_TO_PG_CHECK
#ENDIF

#IFDEF FLOATING_WELL_CHECK
GROUP ERC_FLOATING_WELL_CHECK  floating.nxwell_float floating.psub
ERC SELECT CHECK ERC_FLOATING_WELL_CHECK
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpg*/
N1tndiff = NET tndiff POWER_NAME
T1tndiff = erc_nmos_gates TOUCH N1tndiff
N2tndiff = NET tndiff GROUND_NAME
T2tndiff = erc_nmos_gates TOUCH N2tndiff

#IFDEF DS_TO_PG_CHECK
mnpg { @ MOS connected to both power and ground
  T1tndiff AND T2tndiff
}
#ENDIF

//MOS erc_pmos_gates S/D connect to POWER&GROUND --mppg*/
N1tpdiff = NET tpdiff POWER_NAME
T1tpdiff = erc_pmos_gates TOUCH N1tpdiff
N2tpdiff = NET tpdiff GROUND_NAME
T2tpdiff = erc_pmos_gates TOUCH N2tpdiff

#IFDEF DS_TO_PG_CHECK
mppg { @ MOS connected to both power and ground
  T1tpdiff AND T2tpdiff
}
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpgldd*/
N1s_tndiff_udm_mnpglddA = NET s_tndiff_udm POWER_NAME
T1s_tndiff_udm_mnpglddA = erc_nmos_gates TOUCH N1s_tndiff_udm_mnpglddA
N2d_tndiff_udm_mnpglddA = NET d_tndiff_udm GROUND_NAME
T2d_tndiff_udm_mnpglddA = erc_nmos_gates TOUCH N2d_tndiff_udm_mnpglddA

N1d_tndiff_udm_mnpglddB = NET d_tndiff_udm POWER_NAME
T1d_tndiff_udm_mnpglddB = erc_nmos_gates TOUCH N1d_tndiff_udm_mnpglddB
N2s_tndiff_udm_mnpglddB = NET s_tndiff_udm GROUND_NAME
T2s_tndiff_udm_mnpglddB = erc_nmos_gates TOUCH N2s_tndiff_udm_mnpglddB

#IFDEF DS_TO_PG_CHECK
mnpgldd { @ MOS connected to both power and ground
  (T1s_tndiff_udm_mnpglddA AND T2d_tndiff_udm_mnpglddA ) OR (T1d_tndiff_udm_mnpglddB AND T2s_tndiff_udm_mnpglddB )
}
#ENDIF

//MOS erc_pmos_gates S/D connect to POWER&GROUND --mppgldd*/
N1s_tpdiff_udm_mppglddA = NET s_tpdiff_udm POWER_NAME
T1s_tpdiff_udm_mppglddA = erc_pmos_gates TOUCH N1s_tpdiff_udm_mppglddA
N2d_tpdiff_udm_mppglddA = NET d_tpdiff_udm GROUND_NAME
T2d_tpdiff_udm_mppglddA = erc_pmos_gates TOUCH N2d_tpdiff_udm_mppglddA

N1d_tpdiff_udm_mppglddB = NET d_tpdiff_udm POWER_NAME
T1d_tpdiff_udm_mppglddB = erc_pmos_gates TOUCH N1d_tpdiff_udm_mppglddB
N2s_tpdiff_udm_mppglddB = NET s_tpdiff_udm GROUND_NAME
T2s_tpdiff_udm_mppglddB = erc_pmos_gates TOUCH N2s_tpdiff_udm_mppglddB

#IFDEF DS_TO_PG_CHECK
mppgldd { @ MOS connected to both power and ground
  (T1s_tpdiff_udm_mppglddA AND T2d_tpdiff_udm_mppglddA ) OR (T1d_tpdiff_udm_mppglddB AND T2s_tpdiff_udm_mppglddB )
}
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpgldd_hv*/
N1s_tndiff_hv_mnpgldd_hvA = NET s_tndiff_hv POWER_NAME
T1s_tndiff_hv_mnpgldd_hvA = erc_nmos_gates TOUCH N1s_tndiff_hv_mnpgldd_hvA
N2d_tndiff_hv_mnpgldd_hvA = NET d_tndiff_hv GROUND_NAME
T2d_tndiff_hv_mnpgldd_hvA = erc_nmos_gates TOUCH N2d_tndiff_hv_mnpgldd_hvA

N1d_tndiff_hv_mnpgldd_hvB = NET d_tndiff_hv POWER_NAME
T1d_tndiff_hv_mnpgldd_hvB = erc_nmos_gates TOUCH N1d_tndiff_hv_mnpgldd_hvB
N2s_tndiff_hv_mnpgldd_hvB = NET s_tndiff_hv GROUND_NAME
T2s_tndiff_hv_mnpgldd_hvB = erc_nmos_gates TOUCH N2s_tndiff_hv_mnpgldd_hvB

#IFDEF DS_TO_PG_CHECK
mnpgldd_hv { @ MOS connected to both power and ground
  (T1s_tndiff_hv_mnpgldd_hvA AND T2d_tndiff_hv_mnpgldd_hvA ) OR (T1d_tndiff_hv_mnpgldd_hvB AND T2s_tndiff_hv_mnpgldd_hvB )
}
#ENDIF

//MOS erc_pmos_gates S/D connect to POWER&GROUND --mppgldd_hv*/
N1s_tpdiff_hv_mppgldd_hvA = NET s_tpdiff_hv POWER_NAME
T1s_tpdiff_hv_mppgldd_hvA = erc_pmos_gates TOUCH N1s_tpdiff_hv_mppgldd_hvA
N2d_tpdiff_hv_mppgldd_hvA = NET d_tpdiff_hv GROUND_NAME
T2d_tpdiff_hv_mppgldd_hvA = erc_pmos_gates TOUCH N2d_tpdiff_hv_mppgldd_hvA

N1d_tpdiff_hv_mppgldd_hvB = NET d_tpdiff_hv POWER_NAME
T1d_tpdiff_hv_mppgldd_hvB = erc_pmos_gates TOUCH N1d_tpdiff_hv_mppgldd_hvB
N2s_tpdiff_hv_mppgldd_hvB = NET s_tpdiff_hv GROUND_NAME
T2s_tpdiff_hv_mppgldd_hvB = erc_pmos_gates TOUCH N2s_tpdiff_hv_mppgldd_hvB

#IFDEF DS_TO_PG_CHECK
mppgldd_hv { @ MOS connected to both power and ground
  (T1s_tpdiff_hv_mppgldd_hvA AND T2d_tpdiff_hv_mppgldd_hvA ) OR (T1d_tpdiff_hv_mppgldd_hvB AND T2s_tpdiff_hv_mppgldd_hvB )
}
#ENDIF

#IFDEF FLOATING_WELL_CHECK
SCONNECT tndiff nxwell_float by nplug
floating.nxwell_float { @ nxwell_float is not connected to POWER
  no_power_path = PATHCHK !POWER nxwell_float PORTS ALSO
  direct_connect_ground = NET nxwell_float GROUND_NAME
  no_power_path or direct_connect_ground
}
#ENDIF

#IFDEF FLOATING_WELL_CHECK
floating.psub { @ psub is not connected to GROUND
  no_ground_path = PATHCHK !GROUND psub PORTS ALSO
  direct_connect_power = NET psub POWER_NAME
  no_ground_path or direct_connect_power
}
#ENDIF
gate1_not_IO2_GND = NET gate1_not_IO2_not_IO2 GROUND_NAME

#IFDEF GATE_TO_PG_CHECK
// Core gate connect to ground 
npvss150 { @ gate1_not_IO2 connected to GROUND
  gate1_not_IO2_GND_pmos = gate1_not_IO2_GND INTERACT N1tpdiff
  gate1_not_IO2_GND_nmos = gate1_not_IO2_GND INTERACT N1tndiff
  nxwell_PWR = NET nxwell POWER_NAME
  psub_PWR = NET psub POWER_NAME
  psub_GND = NET psub GROUND_NAME

  gate1_not_IO2_GND_pmos_filter1_1 = gate1_not_IO2_GND_pmos INTERACT N1tpdiff == 2
  gate1_not_IO2_GND_pmos_filter1 = gate1_not_IO2_GND_pmos_filter1_1 INTERACT nxwell_PWR

  gate1_not_IO2_GND_nmos_filter1_1 = gate1_not_IO2_GND_nmos INTERACT N1tndiff == 2
  gate1_not_IO2_GND_nmos_filter1 = gate1_not_IO2_GND_nmos_filter1_1 INTERACT psub_PWR

  gate1_not_IO2_GND_nmos_filter2_1 = gate1_not_IO2_GND_nmos INTERACT N2tndiff
  gate1_not_IO2_GND_nmos_filter2 = gate1_not_IO2_GND_nmos_filter2_1 INTERACT psub_GND

  gate1_not_IO2_GND_nmos_filter3_1 = gate1_not_IO2_GND_nmos INTERACT N1tndiff == 2
  gate1_not_IO2_GND_nmos_filter3 = gate1_not_IO2_GND_nmos_filter3_1 INTERACT (nxwell_PWR AND VARi)

  gate1_not_IO2_GND_pmos_filter3_1 = gate1_not_IO2_GND_pmos INTERACT N1tpdiff == 2
  gate1_not_IO2_GND_pmos_filter3 = gate1_not_IO2_GND_pmos_filter3_1 INTERACT (psub_PWR AND VARi)

  A = (((((gate1_not_IO2_GND_pmos OR gate1_not_IO2_GND_nmos) NOT gate1_not_IO2_GND_pmos_filter1) NOT gate1_not_IO2_GND_nmos_filter1) NOT gate1_not_IO2_GND_nmos_filter2) NOT gate1_not_IO2_GND_nmos_filter3) NOT gate1_not_IO2_GND_pmos_filter3

  // for UDM CORE
  gate1_not_IO2_GND_pudm_1 = gate1_not_IO2_GND INTERACT N1d_tpdiff_udm_mppglddB
  gate1_not_IO2_GND_pudm_2 = gate1_not_IO2_GND INTERACT N1s_tpdiff_udm_mppglddA 
  gate1_not_IO2_GND_nudm_1 = gate1_not_IO2_GND INTERACT N1d_tndiff_udm_mnpglddB
  gate1_not_IO2_GND_nudm_2 = gate1_not_IO2_GND INTERACT N1s_tndiff_udm_mnpglddA

  gate1_not_IO2_GND_pudm = gate1_not_IO2_GND_pudm_1 OR gate1_not_IO2_GND_pudm_2
  gate1_not_IO2_GND_nudm = gate1_not_IO2_GND_nudm_1 OR gate1_not_IO2_GND_nudm_2

  gate1_not_IO2_GND_pudm_filter1_1 = gate1_not_IO2_GND_pudm_1 INTERACT gate1_not_IO2_GND_pudm_2
  gate1_not_IO2_GND_pudm_filter1 = gate1_not_IO2_GND_pudm_filter1_1 INTERACT nxwell_PWR

  gate1_not_IO2_GND_nudm_filter1_1 = gate1_not_IO2_GND_nudm_1 INTERACT gate1_not_IO2_GND_nudm_2
  gate1_not_IO2_GND_nudm_filter1 = gate1_not_IO2_GND_nudm_filter1_1 INTERACT psub_PWR

  gate1_not_IO2_GND_nudm_filter2_1 = gate1_not_IO2_GND_nudm_1 INTERACT N2s_tndiff_udm_mnpglddB
  gate1_not_IO2_GND_nudm_filter2 = gate1_not_IO2_GND_nudm_filter2_1 INTERACT psub_GND
 
  gate1_not_IO2_GND_nudm_filter3_1 = gate1_not_IO2_GND_nudm_2 INTERACT N2d_tndiff_udm_mnpglddA
  gate1_not_IO2_GND_nudm_filter3 = gate1_not_IO2_GND_nudm_filter3_1 INTERACT psub_GND

  B = ((((gate1_not_IO2_GND_pudm OR gate1_not_IO2_GND_nudm) NOT gate1_not_IO2_GND_pudm_filter1) NOT gate1_not_IO2_GND_nudm_filter1) NOT gate1_not_IO2_GND_nudm_filter2) NOT gate1_not_IO2_GND_nudm_filter3

  A OR B
}
#ENDIF

#IFDEF WELL_TO_PG_CHECK
// ntap connect to ground 
npvss49 { @ ntap connected to GROUND
  ntap_not_var = ntap NOT ( ( ( VARi OR VAR10 ) OR VAR11 ) OR VAR14 )
  NET ntap_not_var GROUND_NAME
}
#ENDIF

#IFDEF PATH_CHECK
// Nodes with a path to ground but not power 
ERC PATHCHK GROUND && !POWER
#ENDIF

#IFDEF PATH_CHECK
// Nodes with a path to power but not ground 
ERC PATHCHK POWER && !GROUND
#ENDIF

#IFDEF PATH_CHECK
// Nodes without a path to power and ground 
ERC PATHCHK !POWER && !GROUND NOFLOAT
#ENDIF

#IFDEF PATH_CHECK
ERC PATHCHK !LABELED NOFLOAT
#ENDIF
gate1_not_IO2_not_IO1 = gate1_not_IO2 NOT OD25_18
gate1_not_IO2_not_IO2 = gate1_not_IO2_not_IO1 NOT OD33
CONNECT gate1_not_IO2_not_IO2 n_poly
CONNECT gate1_not_IO2_not_IO2 p_poly
gate1_not_IO2_PWR = NET gate1_not_IO2_not_IO2 POWER_NAME

#IFDEF GATE_TO_PG_CHECK
// Core gate connect to power 
ppvdd150 { @ gate1_not_IO2 connected to POWER
  gate1_not_IO2_PWR_pmos = gate1_not_IO2_PWR INTERACT N2tpdiff
  gate1_not_IO2_PWR_nmos = gate1_not_IO2_PWR INTERACT N2tndiff
  nxwell_GND = NET nxwell GROUND_NAME
  nxwell_PWR = NET nxwell POWER_NAME
  psub_GND = NET psub GROUND_NAME

  gate1_not_IO2_PWR_pmos_filter1_1 = gate1_not_IO2_PWR_pmos INTERACT N2tpdiff == 2
  gate1_not_IO2_PWR_pmos_filter1 = gate1_not_IO2_PWR_pmos_filter1_1 INTERACT nxwell_GND

  gate1_not_IO2_PWR_nmos_filter1_1 = gate1_not_IO2_PWR_nmos INTERACT N2tndiff == 2
  gate1_not_IO2_PWR_nmos_filter1 = gate1_not_IO2_PWR_nmos_filter1_1 INTERACT psub_GND

  gate1_not_IO2_PWR_pmos_filter2_1 = gate1_not_IO2_PWR_pmos INTERACT N1tpdiff
  gate1_not_IO2_PWR_pmos_filter2 = gate1_not_IO2_PWR_pmos_filter2_1 INTERACT nxwell_PWR

  gate1_not_IO2_PWR_nmos_filter3_1 = gate1_not_IO2_PWR_nmos INTERACT N2tndiff == 2
  gate1_not_IO2_PWR_nmos_filter3 = gate1_not_IO2_PWR_nmos_filter3_1 INTERACT (nxwell_GND AND VARi)

  gate1_not_IO2_PWR_pmos_filter3_1 = gate1_not_IO2_PWR_pmos INTERACT N2tpdiff == 2
  gate1_not_IO2_PWR_pmos_filter3 = gate1_not_IO2_PWR_pmos_filter3_1 INTERACT (psub_GND AND VARi)

  A = (((((gate1_not_IO2_PWR_pmos OR gate1_not_IO2_PWR_nmos) NOT gate1_not_IO2_PWR_pmos_filter1) NOT gate1_not_IO2_PWR_nmos_filter1) NOT gate1_not_IO2_PWR_pmos_filter2 ) NOT gate1_not_IO2_PWR_nmos_filter3) NOT gate1_not_IO2_PWR_pmos_filter3


  // For UDM CORE
  gate1_not_IO2_PWR_pudm_1 = gate1_not_IO2_PWR INTERACT N2d_tpdiff_udm_mppglddA 
  gate1_not_IO2_PWR_pudm_2 = gate1_not_IO2_PWR INTERACT N2s_tpdiff_udm_mppglddB 
  gate1_not_IO2_PWR_nudm_1 = gate1_not_IO2_PWR INTERACT N2d_tndiff_udm_mnpglddA
  gate1_not_IO2_PWR_nudm_2 = gate1_not_IO2_PWR INTERACT N2s_tndiff_udm_mnpglddB

  gate1_not_IO2_PWR_pudm = gate1_not_IO2_PWR_pudm_1 OR gate1_not_IO2_PWR_pudm_2
  gate1_not_IO2_PWR_nudm = gate1_not_IO2_PWR_nudm_1 OR gate1_not_IO2_PWR_nudm_2

  gate1_not_IO2_PWR_pudm_filter1_1 = gate1_not_IO2_PWR_pudm_1 INTERACT gate1_not_IO2_PWR_pudm_2
  gate1_not_IO2_PWR_pudm_filter1 = gate1_not_IO2_PWR_pudm_filter1_1 INTERACT nxwell_GND

  gate1_not_IO2_PWR_nudm_filter1_1 = gate1_not_IO2_PWR_nudm_1 INTERACT gate1_not_IO2_PWR_nudm_2
  gate1_not_IO2_PWR_nudm_filter1 = gate1_not_IO2_PWR_nudm_filter1_1 INTERACT psub_GND

  gate1_not_IO2_PWR_pudm_filter2_1 = gate1_not_IO2_PWR_pudm_1 INTERACT N1s_tpdiff_udm_mppglddA
  gate1_not_IO2_PWR_pudm_filter2 = gate1_not_IO2_PWR_pudm_filter2_1 INTERACT nxwell_PWR

  gate1_not_IO2_PWR_pudm_filter3_1 = gate1_not_IO2_PWR_pudm_2 INTERACT N1d_tpdiff_udm_mppglddB
  gate1_not_IO2_PWR_pudm_filter3 = gate1_not_IO2_PWR_pudm_filter3_1 INTERACT nxwell_PWR

  B = ((((gate1_not_IO2_PWR_pudm OR gate1_not_IO2_PWR_nudm) NOT gate1_not_IO2_PWR_pudm_filter1) NOT gate1_not_IO2_PWR_nudm_filter1) NOT gate1_not_IO2_PWR_pudm_filter2) NOT gate1_not_IO2_PWR_pudm_filter3  
 
  A OR B
}
#ENDIF

#IFDEF WELL_TO_PG_CHECK
// ptap connect to power 
ppvdd49 { @ ptap connected to POWER
  NET ptap POWER_NAME
}
#ENDIF

#ENDIF
////////////////////////////////////////////////////////////////////////////////
// STRAINED SILICON SEARCH DISTANCES
////////////////////////////////////////////////////////////////////////////////
all_sd = (((((((( tndiff OR tpdiff ) OR s_tndiff_udm) OR d_tndiff_udm) OR s_tndiff_hv) OR d_tndiff_hv) OR s_tpdiff_udm) OR d_tpdiff_udm) OR s_tpdiff_hv) OR d_tpdiff_hv 
#IFDEF CCI_DECK
 #IFDEF DFM_RULE
 #ELSE
  dfm_ops_ndf = COPY tndiff
  dfm_ops_pdf = COPY tpdiff
 #ENDIF
#ELSE
  dfm_ops_ndf = COPY tndiff
  dfm_ops_pdf = COPY tpdiff
#ENDIF
all_sd_cop = dfm_ops_ndf OR dfm_ops_pdf
odCont_diff = odCont INTERACT all_sd_cop
CONNECT all_sd_cop tndiff
CONNECT all_sd_cop tpdiff
CONNECT all_sd tndiff
CONNECT all_sd tpdiff
#IFNDEF SKIP_PSE
ngate_PROP = DFM COPY ngate_PROPx
pgate_PROP = DFM COPY pgate_PROPx
#ELSE
#IFNDEF SKIP_ODSE
ngate_PROP = DFM COPY ngate_PROPx
pgate_PROP = DFM COPY pgate_PROPx
#ELSE
ngate_PROP = DFM COPY gate
pgate_PROP = DFM COPY gate
#ENDIF
#ENDIF
}

package require CalibreDFM_DEVICE
### max_sp, max_sp2, max_sd : for PSE
# maximum search distance for gate-to-1st-poly spacing
set device::max_sp    3
# maximum search distance for gate-to-2nd-poly spacing
set device::max_sp2   4
# maximum search distance for gate-to-diffusion enclosure
set device::max_sd    11
### max_sp, max_se, max_sf, max_sle, max_slf : for Boundary
# maximum search distance for gate-to-layer1 enclosure (sides)
set device::max_se    5
# maximum search distance for gate-to-2nd-layer1 spacing (sides)
set device::max_sf    6
# maximum search distance for gate-to-layer1 enclosure (ends)
set device::max_sle   5
# maximum search distance for gate-to-2nd-layer1 spacing (ends)
set device::max_slf   6
### max_sp, max_sode, max_sodf, max_sodlf : for OD-OD
# maximum search distance for gate-to-1st-OD (sides)
set device::max_sode  11
# maximum search distance for gate-to-2nd-OD (sides)
set device::max_sodf  15
# maximum search distance for gate-to-2nd-OD (ends)
set device::max_sodlf 4
# sizing up vale for gate when measuring gate-to-2nd-OD (ends)
set device::lat_sodlf 0.045

tvf::SETLAYER ngate_PROPx = [
   device::strained_silicon_measurements -gate gate_mac -sd all_sd -active OD -poly POx -layer1 ncesl -pmet PMETAL -m0 BULK -max_pmet 5
]
tvf::SETLAYER pgate_PROPx = [
   device::strained_silicon_measurements -gate gate_mac -sd all_sd -active OD -poly POx -layer1 pcesl -pmet PMETAL -m0 BULK -max_pmet 5
]
tvf::SETLAYER nCore_WPEPROP = [
   device::enclosure_measurements -base gate_a -measurement c_nmcore_aux -orient all_sd -max_par 5.556 -max_per 5.556
]
tvf::SETLAYER pCore_WPEPROP = [
   device::enclosure_measurements -base gate_a -measurement c_pmcore_aux -orient all_sd -max_par 5.556 -max_per 5.556
]
tvf::SETLAYER nIO_WPEPROP = [
   device::enclosure_measurements -base gate_a -measurement c_nmIO_aux -orient all_sd -max_par 5.556 -max_per 5.556
]
tvf::SETLAYER pIO_WPEPROP = [
   device::enclosure_measurements -base gate_a -measurement c_pmIO_aux -orient all_sd -max_par 5.556 -max_per 5.556
]
tvf::SETLAYER nmos_SOB = [
   device::enclosure_measurements  -base ngate_nthin_sob_rf -orient v_dir       -measurement pplug_holes   -max_par 150 -max_per 150 
]
tvf::SETLAYER pmos_SOB = [
   device::enclosure_measurements  -base pgate_pthin_sob_rf -orient v_dir       -measurement nplug_holes   -max_par 150 -max_per 150 
]
tvf::SETLAYER lod_PROP = [
   device::enclosure_measurements -base gate_a -measurement OD -orient all_sd -max_par 0  -max_per 60 -connect
]
tvf::SETLAYER gate_COP = [ 
   device::contact_resistance_measurements -gate gate_mac -sd all_sd_cop -contact odCont_diff -max_ct 5 
]
